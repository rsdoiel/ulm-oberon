


Resources(3)           Ulm's Oberon System           Resources(3)


NNAAMMEE
       Resources - cooperative handling of shared objects

SSYYNNOOPPSSIISS
       TYPE Resource = Disciplines.Object;

       CONST terminated = 0;
       CONST unreferenced = 1;
       CONST communicationStopped = 2;
       CONST communicationResumed = 3;
       TYPE StateChange = SHORTINT; (* terminated..communicationResumed *)

       TYPE Event = POINTER TO EventRec; (* notification of state changes *)
       TYPE EventRec =
          RECORD
             (Events.EventRec)
             change: StateChange;
             resource: Resource;
          END;

       TYPE Key = POINTER TO KeyRec;
       TYPE KeyRec = RECORD (Objects.ObjectRec) END;

       PROCEDURE TakeInterest(resource: Resource; VAR eventType: Events.EventType);
       PROCEDURE Notify(resource: Resource; change: StateChange);
       PROCEDURE DependsOn(dependant, resource: Resource);
       PROCEDURE Attach(resource: Resource; VAR key: Key);
       PROCEDURE Detach(resource: Resource; key: Key);
       PROCEDURE Alive(resource: Resource) : BOOLEAN;
       PROCEDURE Stopped(resource: Resource) : BOOLEAN;
       PROCEDURE Terminated(resource: Resource) : BOOLEAN;


DDEESSCCRRIIPPTTIIOONN
       _R_e_s_o_u_r_c_e_s offers a general interface for objects which are
       shared and need some cooperative termination/cleanup  han­
       dling.   The  garbage collector alone is in many cases not
       sufficient because

       ·      no termination handler gets invoked when the object
              is collected and

       ·      the  object  wouldn't  be collected at all if it is
              member of bookkeeping data structures  which  would
              like to get rid of otherwise unused objects (light-
              weighted references).

       Objects which follow through on _R_e_s_o_u_r_c_e_s are  in  one  of
       five states:
       _a_l_i_v_e                    This  is  the initial state which
                                lasts  as  long  the  object   is
                                responsive and remains referenced
                                (by  heavy-weighted  references).
                                Successor        states       are



Release 0.5       Last change: 24 September 1996                1





Resources(3)           Ulm's Oberon System           Resources(3)


                                _u_n_r_e_f_e_r_e_n_c_e_d,   _t_e_r_m_i_n_a_t_e_d,   and
                                _s_t_o_p_p_e_d _& _a_l_i_v_e.
       _u_n_r_e_f_e_r_e_n_c_e_d             Unreferenced  objects  are  still
                                (at least locally) responsive  to
                                allow for terminating operations.
                                All light-weighted references are
                                to be removed to allow the object
                                to   be   collected.    Successor
                                states are _t_e_r_m_i_n_a_t_e_d and _s_t_o_p_p_e_d
                                _& _u_n_r_e_f_e_r_e_n_c_e_d.
       _t_e_r_m_i_n_a_t_e_d               Terminated objects are no  longer
                                operational.   Note  that in case
                                of proxy objects termination does
                                not mean that the original object
                                is no  longer  accessible.   This
                                state has no successor states.
       _s_t_o_p_p_e_d _& _a_l_i_v_e          Sometimes objects are not respon­
                                sive for a limited amount of time
                                in  distributed systems.  Stopped
                                objects  are   still   considered
                                alive  but  are unable to process
                                operations.  Successor states are
                                _a_l_i_v_e,  _u_n_r_e_f_e_r_e_n_c_e_d, and _s_t_o_p_p_e_d
                                _& _u_n_r_e_f_e_r_e_n_c_e_d.
       _s_t_o_p_p_e_d _& _u_n_r_e_f_e_r_e_n_c_e_d   In some  rare  occasions  it  may
                                happen   that   objects  are  not
                                responsive during the short  time
                                between  being  _u_n_r_e_f_e_r_e_n_c_e_d  and
                                _t_e_r_m_i_n_a_t_e_d.  Successor states are
                                _u_n_r_e_f_e_r_e_n_c_e_d and _t_e_r_m_i_n_a_t_e_d.

       Explicit state changes are signaled by _N_o_t_i_f_y.  Valid val­
       ues of _s_t_a_t_e  are  _t_e_r_m_i_n_a_t_e_d,  _c_o_m_m_u_n_i_c_a_t_i_o_n_S_t_o_p_p_e_d,  and
       _c_o_m_m_u_n_i_c_a_t_i_o_n_R_e_s_u_m_e_d.  While _t_e_r_m_i_n_a_t_e_d is always an abso­
       lute state change, the other two work relative, e.g.  _c_o_m_­
       _m_u_n_i_c_a_t_i_o_n_S_t_o_p_p_e_d  causes  a  state  change  from _a_l_i_v_e to
       _a_l_i_v_e _& _s_t_o_p_p_e_d, or from _u_n_r_e_f_e_r_e_n_c_e_d  to  _u_n_r_e_f_e_r_e_n_c_e_d  _&
       _s_t_o_p_p_e_d.  Note that state ``changes'' get silently ignored
       when the current state remains  constant  (e.g.  notifying
       _c_o_m_m_u_n_i_c_a_t_i_o_n_R_e_s_u_m_e_d to an object which is already _a_l_i_v_e),
       or when they are illegal:

       ·      _u_n_r_e_f_e_r_e_n_c_e_d is signaled implicitly by _D_e_t_a_c_h only,
              and

       ·      terminated  objects do not accept any further state
              changes.

       _T_a_k_e_I_n_t_e_r_e_s_t allows each interested party to get  notified
       about  all state changes (whether explicit or implicit) of
       _r_e_s_o_u_r_c_e.  Note that _e_v_e_n_t_T_y_p_e is even non-NNIILL if _r_e_s_o_u_r_c_e
       is  already terminated and no further notifications are to
       be expected.




Release 0.5       Last change: 24 September 1996                2





Resources(3)           Ulm's Oberon System           Resources(3)


       _D_e_p_e_n_d_s_O_n  states  that  _d_e_p_e_n_d_a_n_t  depends  entirely   on
       _r_e_s_o_u_r_c_e.   This  is  usually the case for proxy or filter
       objects where operations on  _d_e_p_e_n_d_a_n_t  are  delegated  or
       filtered  to  _r_e_s_o_u_r_c_e.  Only one call of _D_e_p_e_n_d_s_O_n may be
       issued for each _d_e_p_e_n_d_a_n_t  while  several  calls  for  one
       _r_e_s_o_u_r_c_e  are  valid.   _D_e_p_e_n_d_s_O_n calls _A_t_t_a_c_h (see below)
       implicitly  for  _r_e_s_o_u_r_c_e  and  detaches  when   _d_e_p_e_n_d_a_n_t
       becomes  unreferenced or terminates.  All subsequent state
       changes of _r_e_s_o_u_r_c_e will be propagated to _d_e_p_e_n_d_a_n_t.   The
       dependency  relation will be released when _r_e_s_o_u_r_c_e termi­
       nates or _d_e_p_e_n_d_a_n_t  becomes  unreferenced  or  terminates.
       Because  of  these  implicit  attachments, _r_e_s_o_u_r_c_e cannot
       become unreferenced as long  all  its  dependants  neither
       become unreferenced nor terminate.

       _A_t_t_a_c_h  marks  _r_e_s_o_u_r_c_e  as  being  used until _D_e_t_a_c_h gets
       called.  To check for proper nesting of _A_t_t_a_c_h and _D_e_t_a_c_h,
       a  key  is  returned by _A_t_t_a_c_h which must be passed to the
       corresponding _D_e_t_a_c_h.  Calls of _D_e_t_a_c_h with an invalid key
       are  silently  ignored.   The last call of _D_e_t_a_c_h causes a
       state change to _u_n_r_e_f_e_r_e_n_c_e_d and undoes a former  call  of
       _D_e_p_e_n_d_s_O_n (with _r_e_s_o_u_r_c_e in the role as _d_e_p_e_n_d_a_n_t).

       Following  operations allow to check for the current state
       of a resource.  They do not distinguish between alive  and
       unreferenced resources:
       _A_l_i_v_e        returns  TTRRUUEE  if  _r_e_s_o_u_r_c_e is not yet termi­
                    nated and ready for communication  (_a_l_i_v_e  or
                    _u_n_r_e_f_e_r_e_n_c_e_d).
       _S_t_o_p_p_e_d      returns  TTRRUUEE  if  _r_e_s_o_u_r_c_e  is currently not
                    responsive but not yet terminated (_s_t_o_p_p_e_d  _&
                    _a_l_i_v_e or _s_t_o_p_p_e_d _& _u_n_r_e_f_e_r_e_n_c_e_d).
       _T_e_r_m_i_n_a_t_e_d   returns TTRRUUEE for terminated resources (_t_e_r_m_i_­
                    _n_a_t_e_d).

DDIIAAGGNNOOSSTTIICCSS
       _R_e_s_o_u_r_c_e_s does not generate any error  events  nor  issues
       any  assertions.   Invalid  uses (e.g. unproper nesting of
       _A_t_t_a_c_h and _D_e_t_a_c_h) are silently ignored.

SSEEEE AALLSSOO
       _E_v_e_n_t_s_(_3_)          handling of events
       _R_e_m_o_t_e_O_b_j_e_c_t_s_(_3_)   support of  _R_e_s_o_u_r_c_e_s  for  distributed
                          objects













Release 0.5       Last change: 24 September 1996                3


