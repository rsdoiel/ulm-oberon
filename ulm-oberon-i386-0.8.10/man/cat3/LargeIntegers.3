


LargeIntegers(3)       Ulm's Oberon System       LargeIntegers(3)


NNAAMMEE
       LargeIntegers  -  implementation of almost arbitrary large
       integers

SSYYNNOOPPSSIISS
       TYPE LargeInteger = POINTER TO LargeIntegerRec;
       TYPE LargeIntegerRec = RECORD (IntOperations.OperandRec) END;

       PROCEDURE Create(VAR op: Operations.Operand);
       PROCEDURE ReadS(s: Streams.Stream; VAR op: Operations.Operand);
       PROCEDURE Read(VAR op: Operations.Operand);
       PROCEDURE WriteS(s: Streams.Stream; op: Operations.Operand);
       PROCEDURE Write(op: Operations.Operand);
       PROCEDURE GCD(a, b: Operations.Operand; VAR res, c, d: Operations.Operand);
       PROCEDURE Inverse(a, b: Operations.Operand; VAR res: Operations.Operand);


DDEESSCCRRIIPPTTIIOONN
       _L_a_r_g_e_I_n_t_e_g_e_r_s is an implementation  of  _O_p_e_r_a_t_i_o_n_s_(_3_)  and
       _I_n_t_O_p_e_r_a_t_i_o_n_s_(_3_).  It  provides  arithmetic operations for
       almost arbitrary large integers. Each number is stored  in
       a  block allocated with _S_Y_S_T_E_M_._N_E_W and treated as an array
       of LLOONNGGIINNTT (or any other  whole-numbered  variable  type).
       Only the unsigned part of such a variable type is used and
       therefore one bit is vasted  when  using  signed  variable
       types. To avoid a lot of slow memory reallocations, memory
       is often not freed  if  the  integers  absolute  value  is
       decreased.

       _C_r_e_a_t_e  creates  and  initializes  an  operand  _o_p of type
       _L_a_r_g_e_I_n_t_e_g_e_r.

       In addition to the procedures required by  the  interfaces
       _O_p_e_r_a_t_i_o_n_s_(_3_) and _I_n_t_O_p_e_r_a_t_i_o_n_s_(_3_) the following functions
       have been implemented:
       _I_n_v_e_r_s_e:  PPRROOCCEEDDUURREE(_a_,  _b:  _O_p_e_r_a_t_i_o_n_s_._O_p_e_r_a_n_d;  VVAARR  _r_e_s:
            _O_p_e_r_a_t_i_o_n_s_._O_p_e_r_a_n_d);
            calculate a * res = 1 (mod b).
       _G_C_D:  PPRROOCCEEDDUURREE(_a_,  _b:  _O_p_e_r_a_t_i_o_n_s_._O_p_e_r_a_n_d; VVAARR _r_e_s_, _c_, _d:
            _O_p_e_r_a_t_i_o_n_s_._O_p_e_r_a_n_d);
            solves the equation a * c + b  *  d  =  res  for  the
            smallest possible absolute value of res (which is the
            greatest common divisor of a and b).
       The other procedures provide in- and output functionality.
       _R_e_a_d  and  _W_r_i_t_e  use  _S_t_r_e_a_m_s_._s_t_d_i_n resp. _S_t_r_e_a_m_s_._s_t_d_o_u_t,
       _R_e_a_d_S  and  _W_r_i_t_e_S  require  any   stream   derived   from
       _S_t_r_e_a_m_s_._S_t_r_e_a_m.

DDIIAAGGNNOOSSTTIICCSS
       Two kinds of assertions might fail in _L_a_r_g_e_I_n_t_e_g_e_r_s:
       _D_i_v_M_o_d   Divisions  by zero cannot be recovered right now,
                but this can easily be changed in the future.
       _L_o_g_2     The logarithm of none positive numbers also leads
                to a program termination.



Release 0.5              Last change:                           1





LargeIntegers(3)       Ulm's Oberon System       LargeIntegers(3)


SSEEEE AALLSSOO
       _O_p_e_r_a_t_i_o_n_s_(_3_)      generic interface for arithmetic opera­
                          tions
       _I_n_t_O_p_e_r_a_t_i_o_n_s_(_3_)   generic interface for arithmetic  inte­
                          ger operations
       _C_a_r_d_1_0_2_4_s_(_3_)       implementation of 1024 bit cardinals
       _S_Y_S_T_E_M_(_3_)          system-dependent   built-ins  of  Ulm's
                          Oberon Compiler

BBUUGGSS
       Due to a low number of tests, there are most likely a  lot
       of them left.  Also _L_a_r_g_e_I_n_t_e_g_e_r_s has been written to work
       with signed and  unsigned  blocks.  This  has  never  been
       tested  with  unsigned  variables  which has to be done as
       soon as an unsigned integer base type is available.

AAUUTTHHOORR
       Ingo Melzer







































Release 0.5              Last change:                           2


