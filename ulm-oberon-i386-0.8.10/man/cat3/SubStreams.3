


SubStreams(3)          Ulm's Oberon System          SubStreams(3)


NNAAMMEE
       SubStreams  -  streams representing an interval of another
       stream

SSYYNNOOPPSSIISS
       CONST noSeek = 0; noLength = 1; errors = 2;
       TYPE ErrorEvent = POINTER TO ErrorEventRec;
       TYPE ErrorCode = SHORTINT;
       TYPE ErrorEventRec =
          RECORD
             (Events.EventRec)
             errorcode: ErrorCode;
          END;
       VAR error: Events.EventType;
       VAR errormsg: ARRAY errors OF Events.Message;

       TYPE OpenProc = PROCEDURE (VAR s: Streams.Stream;
                                  base: Streams.Stream;
                                  from, length: Streams.Count;
                                  errors: RelatedEvents.Object) : BOOLEAN;

       PROCEDURE Register(type: Services.Type; open: OpenProc);

       PROCEDURE Open(VAR s: Streams.Stream;
                      base: Streams.Stream;
                      from, length: Streams.Count;
                      errors: RelatedEvents.Object) : BOOLEAN;

       PROCEDURE Supported(s: Streams.Stream) : BOOLEAN;
       PROCEDURE DirectlySupported(s: Streams.Stream) : BOOLEAN;

       PROCEDURE Join(VAR s: Streams.Stream; s1, s2: Streams.Stream;
                      errors: RelatedEvents.Object) : BOOLEAN;


DDEESSCCRRIIPPTTIIOONN
       _S_u_b_S_t_r_e_a_m_s allows to  create  streams  which  represent  a
       selected interval of another stream.  The substream imple­
       mentation may be offered by the stream  implementation  of
       the  base  stream  itself,  by a separate service provider
       (see _S_e_r_v_i_c_e_s_(_3_)), or defaults to that of  _M_a_p_s_(_3_).   Spe­
       cific  substream  implementations  are expected to operate
       faster than the  default  implementation  by  avoiding  at
       least one level of intermediate calls.

       _O_p_e_n  creates  a  stream  which  represents  the  subrange
       [[_f_r_o_m...._f_r_o_m++_l_e_n_g_t_h))  of  _b_a_s_e  which  will  be  mapped  to
       [[00...._l_e_n_g_t_h))  on _s.  Note that _s works in general as filter
       object of _b_a_s_e, i.e. all other operations may be forwarded
       as well (if supported by _F_o_r_w_a_r_d_e_r_s_(_3_)).

       _S_u_p_p_o_r_t_e_d  allows  to check whether a stream may be passed
       as base stream to _O_p_e_n.  _D_i_r_e_c_t_l_y_S_u_p_p_o_r_t_e_d returns TTRRUUEE if
       substreams are directly supported by the implementation of



Release 0.5        Last change: 9 December 1996                 1





SubStreams(3)          Ulm's Oberon System          SubStreams(3)


       _s, i.e. _S_u_b_S_t_r_e_a_m_s needs not to create a stream on base of
       _M_a_p_s_(_3_) for _s as base stream.

       _J_o_i_n  returns  a stream which accesses _s_1 and _s_2 in a con­
       catenated way.  If _s_1 and _s_2 are  neighbouring  substreams
       of  the  the same base stream, _J_o_i_n will create a new sub­
       stream directly from the common base stream  --  otherwise
       _s_1 and _s_2 will be tied together by _M_a_p_s_(_3_).

       _R_e_g_i_s_t_e_r registers a specific implementation for the given
       type (which must be an extension  of  _S_t_r_e_a_m_s_._S_t_r_e_a_m)  and
       all  extensions thereof if not overridden by more specific
       calls).  Note that the opening procedure needs not to call
       _F_o_r_w_a_r_d_e_r_s_._F_o_r_w_a_r_d -- this will be done by _S_u_b_S_t_r_e_a_m_s.

DDIIAAGGNNOOSSTTIICCSS
       Following errors may be generated by _S_u_b_S_t_r_e_a_m_s:
       _n_o_S_e_e_k     This  error  is  returned  by  _O_p_e_n if the base
                  stream (in the default case) does  not  support
                  seek and tell operations of _S_t_r_e_a_m_s_(_3_).
       _n_o_L_e_n_g_t_h   _J_o_i_n  was  unable to determine the length of _s_1
                  or _s_2.
       All other error  events  are  generated  by  the  specific
       implementations or _S_t_r_e_a_m_s_(_3_).

       _R_e_g_i_s_t_e_r  checks  its  parameter  for  validity in form of
       assertions.

SSEEEE AALLSSOO
       _F_o_r_w_a_r_d_e_r_s_(_3_)        general support of filter objects
       _M_a_p_s_(_3_)              more general stream mapping support
       _M_e_m_S_t_r_e_a_m_s_(_3_)        stream implementation which is  suit­
                            able  as  substream implementation if
                            the stream contents resides in a con­
                            tiguous buffer
       _S_e_r_v_i_c_e_s_(_3_)          type system (as first class objects)
       _S_t_r_e_a_m_s_(_3_)           stream operations




















Release 0.5        Last change: 9 December 1996                 2


