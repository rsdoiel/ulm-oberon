


SysResource(3)         Ulm's Oberon System         SysResource(3)


NNAAMMEE
       SysResource - control maximum system resource consumption

SSYYNNOOPPSSIISS
       (* type of resource *)
       CONST cpu = 0;     (* maximum amount of cpu time *)
       CONST fsize = 1;   (* largest size of a single file that may be created*)
       CONST data = 2;    (* maximum size of the data segment *)
       CONST stack = 3;   (* maximum size of the stack segment *)
       CONST core = 4;    (* maximal core file size *)
       CONST rss = 5;     (* maximum size of resident set size *)
       CONST nofile = 6;  (* maximal number of open file descriptors *)
       TYPE Resource = INTEGER; (* cpu..nofile *)
       TYPE
          Limit =
             RECORD
                current: INTEGER; (* current soft limit *)
                max: INTEGER;     (* hard limit *)
             END;
       CONST infinity = MAX(INTEGER);

       PROCEDURE GetLimit(resource: Resource; VAR limit: Limit);
       PROCEDURE SetLimit(resource: Resource; limit: Limit;
                          errors: RelatedEvents.Object) : BOOLEAN;


DDEESSCCRRIIPPTTIIOONN
       _G_e_t_L_i_m_i_t  and  _S_e_t_L_i_m_i_t allow to retrieve and modify a set
       of system per process resource  limits.   These  resources
       and  their  associated  limits  are explained in detail in
       _g_e_t_r_l_i_m_i_t_(_2_).  Signals are sent to the  offending  process
       when soft limits are exceeded while hard limits cause some
       kind of failure (or even  termination  in  case  of  _c_p_u).
       Limits are inherited to child processes.

DDIIAAGGNNOOSSTTIICCSS
       _S_e_t_L_i_m_i_t  returns FFAALLSSEE in error case (e.g. if a non-supe­
       ruser tries to raise the hard limit).  The _e_r_r_o_r_s  parame­
       ter is passed to _S_y_s_E_r_r_o_r_s_._R_a_i_s_e.

SSEEEE AALLSSOO
       _g_e_t_r_l_i_m_i_t_(_2_)    _G_e_t_L_i_m_i_t and _S_e_t_L_i_m_i_t
       _E_v_e_n_t_s_(_3_)       event handling
       _S_y_s_E_r_r_o_r_s_(_3_)    handling of failed system calls
       _S_y_s_S_i_g_n_a_l_s_(_3_)   UNIX signals












Release 0.5         Last change: 24 March 1992                  1


