IPv4Addresses(3)              Ulm's Oberon System             IPv4Addresses(3)



[1mNAME[0m
       IPv4Addresses - support of IPv4 addresses

[1mSYNOPSIS[0m
       TYPE PortNumber = Types.Int16;    (* 2-byte-integer *)
       TYPE Address = Types.Int32;       (* 4-byte-integer *)
       TYPE SocketAddress =
             RECORD
                (Objects.ObjectRec)
                (* in network order *)
                host: Address;
                portnum: PortNumber;
             END;

       CONST addrlen = 16; (* size of struct sockaddr in <sys/socket.h> *)
       TYPE SysAddress = ARRAY addrlen OF BYTE;

       PROCEDURE GetPort(address: SocketAddress) : INTEGER;
       PROCEDURE SetPort(VAR address: SocketAddress; portnum: INTEGER);

       PROCEDURE ConvertToSys(address: SocketAddress; VAR sysaddr: SysAddress);
       PROCEDURE ConvertFromSys(sysaddr: SysAddress; VAR address: SocketAddress);

       PROCEDURE ReadText(s: Streams.Stream; VAR ipaddr: Address) : BOOLEAN;
       PROCEDURE WriteText(s: Streams.Stream; ipaddr: Address);
       PROCEDURE CreateAddress(VAR ipaddr: Address; dotteddec: ARRAY OF CHAR);


[1mDESCRIPTION[0m
       [4mIPv4Addresses[24m provides support for IPv4 addresses. [4mSocketAddress[24m repre-
       sents IPv4 addresses in an easily accessible way.  Note  however,  that
       the  fields  [4mhost[24m  and [4mportnum[24m must be kept or are to be interpreted in
       network order, i.e. in big-endian byte order. The routines [4mGetPort[24m  and
       [4mSetPort[24m  can  be  used  to  convert the port number from and to network
       order.

       [4mSysAddress[24m represents IPv4 addresses in an internal form which  can  be
       passed  to  the operations of [4mSysSockets(3)[24m.  [4mConvertToSys[24m and [4mConvert-[0m
       [4mFromSys[24m allow IPv4 addresses to be converted to and from  the  internal
       form.

       IPv4 addresses in a textual so-called ``dotted decimal'' representation
       (for example ``127.0.0.1'') can be read by [4mReadText[24m.  [4mWriteText[24m  prints
       [4mipaddr[24m  in  ``dotted  decimal'' notation to [4ms[24m.  [4mCreateAddress[24m allows to
       create an IPv4 address directly from a string which begins with a valid
       dotted decimal.

[1mDIAGNOSTICS[0m
       [4mIPv4Addresses[24m  does  not  generate  error  events  by itself.  [4mReadText[0m
       returns [1mFALSE [22min case of input or syntax errors.  [4mCreateAddress[24m asserts
       that [4mdotteddec[24m is a syntactically valid ``dotted decimal'' number.

[1mSEE ALSO[0m
       [4mIPv6Addresses(3)[24m   support of IPv6 addresses
       [4mIPv4TCPSockets(3)[24m  TCP sockets with IPv4 addresses
       [4mSysSockets(3)[24m      system calls for sockets



Release 0.5                Last change: 4 March 2004          IPv4Addresses(3)
