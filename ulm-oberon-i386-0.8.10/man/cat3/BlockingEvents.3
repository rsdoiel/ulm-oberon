


BlockingEvents(3)      Ulm's Oberon System      BlockingEvents(3)


NNAAMMEE
       BlockingEvents - blocking distribution of events

SSYYNNOOPPSSIISS
       TYPE EventType = POINTER TO EventTypeRec;
       TYPE EventTypeRec = RECORD (Events.EventTypeRec) END;

       PROCEDURE Define(VAR type: EventType);
       PROCEDURE Register(type: EventType; VAR condition: Conditions.Condition);
       PROCEDURE Unregister(condition: Conditions.Condition);
       PROCEDURE TestAndGet(condition: Conditions.Condition;
                            VAR event: Events.Event) : BOOLEAN;
       PROCEDURE Done(condition: Conditions.Condition);
       PROCEDURE Raise(event: Events.Event);


DDEESSCCRRIIPPTTIIOONN
       _B_l_o_c_k_i_n_g_E_v_e_n_t_s allows to block the distributor of an event
       until all recipients have seen it.  _B_l_o_c_k_i_n_g_E_v_e_n_t_s  is  to
       be seen in comparison to _E_v_e_n_t_C_o_n_d_i_t_i_o_n_s_(_3_) which does not
       block the task which raises an event.

       _R_e_g_i_s_t_e_r allows a task to register its  interest  for  all
       events  of an event type which has been earlier created by
       _D_e_f_i_n_e.  _R_e_g_i_s_t_e_r returns  like  _E_v_e_n_t_C_o_n_d_i_t_i_o_n_s_._C_r_e_a_t_e  a
       condition which allows to wait until an event of the given
       event type is raised.  The registration may be  undone  by
       calling  _U_n_r_e_g_i_s_t_e_r.  _T_e_s_t_A_n_d_G_e_t returns TTRRUUEE and the next
       event if there are any events in the event queue of _c_o_n_d_i_­
       _t_i_o_n.   _D_o_n_e must be called for processed events which has
       been returned by _T_e_s_t_A_n_d_G_e_t.

       _E_v_e_n_t_s_._R_a_i_s_e does not necessarily block the caller due  to
       the   priority   system.   Therefore  _B_l_o_c_k_i_n_g_E_v_e_n_t_s_._R_a_i_s_e
       should    be    called    instead.     But    note    that
       _B_l_o_c_k_i_n_g_E_v_e_n_t_s_._R_a_i_s_e  does  not call _E_v_e_n_t_s_._R_a_i_s_e and thus
       does not cause other handlers to be called.

       Blocking events are not  without  danger.   If  registered
       parties  ``forget''  to  call  _T_e_s_t_A_n_d_G_e_t  and/or _D_o_n_e the
       event raising task will be deadlocked.   For  this  reason
       all  registered  tasks should _a_l_w_a_y_s include the condition
       returned by _R_e_g_i_s_t_e_r into  the  condition  set  passed  to
       _T_a_s_k_s_._W_a_i_t_F_o_r_O_n_e_O_f.   It  is  not  necessary,  however, to
       check for events  immediately  before  calling  _U_n_r_e_g_i_s_t_e_r
       because  _U_n_r_e_g_i_s_t_e_r  calls  _D_o_n_e for all not yet processed
       events of the associated event queue.

DDIIAAGGNNOOSSTTIICCSS
       _B_l_o_c_k_i_n_g_E_v_e_n_t_s does not generate itself  any  diagnostics.
       _T_e_s_t_A_n_d_G_e_t returns always FFAALLSSEE if the given condition has
       not been returned by _R_e_g_i_s_t_e_r previously.





Release 0.5        Last change: 26 October 1995                 1





BlockingEvents(3)      Ulm's Oberon System      BlockingEvents(3)


SSEEEE AALLSSOO
       _C_o_n_d_i_t_i_o_n_s_(_3_)        definition of waiting conditions
       _E_v_e_n_t_C_o_n_d_i_t_i_o_n_s_(_3_)   non-blocking      alternative      to
                            _B_l_o_c_k_i_n_g_E_v_e_n_t_s
       _E_v_e_n_t_s_(_3_)            general event handling
       _T_a_s_k_s_(_3_)             task management



















































Release 0.5        Last change: 26 October 1995                 2


