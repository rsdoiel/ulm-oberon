TranslucentNames(3)           Ulm's Oberon System          TranslucentNames(3)



[1mNAME[0m
       TranslucentNames - translucent layering of name hierarchies

[1mSYNOPSIS[0m
       CONST mergesort = 0;
       CONST unsorted = 1;
       TYPE DirMode = SHORTINT; (* mergesort or unsorted *)

       PROCEDURE Create(VAR node: Names.Node;
                        readonly, writable: Names.Node;
                        rauth, wauth: Shards.Lid;
                        status: Names.Status;
                        dirmode: DirMode);

       PROCEDURE CreateFactory(VAR factory: NodeFactories.Factory;
                               readonly, writable: ARRAY OF CHAR;
                               rauth, wauth: Shards.Lid;
                               status: Names.Status;
                               dirmode: DirMode);


[1mDESCRIPTION[0m
       [4mTranslucentNames[24m  allows  to  combine  two  name hierarchies into a new
       hierarchy where

       ·      all nodes of the second hierarchy are to be seen,

       ·      all nodes of the first hierarchy can be seen as long as they are
              not in conflict to those of the second hierarchy, and

       ·      all modifying [4mNames(3)[24m operations on nodes with the domain capa-
              bility are effective in the second  hierarchy  only.   (If  this
              requires  the  creation of paths that were so far visible in the
              first hierarchy only, they are recreated in the  second  hierar-
              chy).

       In  other words: We are operating on the second hierarchy but the first
       hierarchy is seen through the second hierarchy as long it is  not  cov-
       ered by existing entries of the second hierarchy.

       Whenever  a  node of the translucent system is asked for a list of mem-
       bers ([4mNames.GetMembers[24m) a list of names is returned which  consists  of
       entries  of  the  second  hierarchy and, as long as their names are not
       present in the second hierarchy, of entries of the first hierarchy. The
       order  in  which  these  names  are  presented  depends on the selected
       [4mdirmode[24m:
       [4mmergesort[24m   Assume that both hierarchies return  alphabetically  sorted
                   member lists.  Then this directory mode causes the translu-
                   cent hierarchy to return sorted member lists as well. Note,
                   however,  that  if  this assumption does not hold, the same
                   name can be returned twice in a member listing.
       [4munsorted[24m    Do not assume the hierarchies to be sorted and do not  gen-
                   erate  a sorted member list either. Instead, the members of
                   the second hierarchy are returned in their original  order,
                   followed  by the members of the first hierarchy whose names
                   are not present in the second  hierarchy,  again  in  their
                   original order.

       [4mTranslucentNames[24m  supports  the  proxy framework of [4mProxies(3)[24m and uses
       the directory nodes of the second hierarchy as heirs for  the  creation
       of  translucent directory nodes. This means that if a directory node of
       the second hierarchy is of an  extended  type  of  [4mNames.Node[24m  that  is
       supported  by  [4mProxies(3)[24m,  the  corresponding  node of the translucent
       hierarchy will be of this extended type as well.

       [4mCreate[24m returns a newly created translucent hierarchy in [4mnode[24m that  com-
       bines  [4mreadonly[24m  (as  first hierarchy) with [4mwritable[24m (as second hierar-
       chy). On all operations delegated to [4mreadonly[24m, [4mrauth[24m will be passed  on
       as  authorization. Likewise [4mwauth[24m will be passed to all operations for-
       warded to [4mwritable[24m. The access to directory nodes  of  the  translucent
       system itself must be authorized according to the [4mstatus[24m parameter. The
       directory mode [4mdirmode[24m determines how member listings are composed  out
       of the listings from the two underlying hierarchies (see above).

       [4mCreateFactory[24m  takes  the parameters as [4mCreate[24m and returns a newly cre-
       ated factory that generates translucent  hierarchies  as  specified  by
       these parameters.

[1mDIAGNOSTICS[0m
       [4mTranslucentNames[24m  generates  some  error  events using [4mNames.Error[24m with
       following error  codes:  [4mNames.nodeNotFound[24m,  [4mNames.nodeDestroyed[24m,  and
       [4mNames.noPermission[24m.   More  events  can  be generated by the underlying
       implementations.

[1mSEE ALSO[0m
       [4mNames(3)[24m     general abstraction for name hierarchies
       [4mProxies(3)[24m   framework for proxy objects



Release 0.5             Last change: 20 September 2004     TranslucentNames(3)
