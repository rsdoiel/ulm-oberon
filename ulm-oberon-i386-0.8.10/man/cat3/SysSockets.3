SysSockets(3)                 Ulm's Oberon System                SysSockets(3)



[1mNAME[0m
       SysSockets - BSD interprocess communication

[1mSYNOPSIS[0m
       TYPE Socket = SysTypes.File;
       (* protocol families *)
       CONST pfUNSPEC    = 0;   (* unspecified *)
       CONST pfUNIX      = 1;   (* local to host (pipes, portals) *)
       CONST pfINET      = 2;   (* internetwork: UDP, TCP, etc. *)
       CONST pfIMPLINK   = 3;   (* arpanet imp addresses *)
       CONST pfPUP       = 4;   (* pup protocols: e.g. BSP *)
       CONST pfCHAOS     = 5;   (* mit CHAOS protocols *)
       CONST pfNS        = 6;   (* XEROX NS protocols *)
       CONST pfNBS       = 7;   (* nbs protocols *)
       CONST pfECMA      = 8;   (* european computer manufacturers *)
       CONST pfDATAKIT   = 9;   (* datakit protocols *)
       CONST pfCCITT     = 10;  (* CCITT protocols, X.25 etc *)
       CONST pfSNA       = 11;  (* IBM SNA *)
       CONST pfDECnet    = 12;  (* DECnet *)
       CONST pfDLI       = 13;  (* Direct data link interface *)
       CONST pfLAT       = 14;  (* LAT *)
       CONST pfHYLINK    = 15;  (* NSC Hyperchannel *)
       CONST pfAPPLETALK = 16;  (* Apple Talk *)
       CONST pfNIT       = 17;  (* Network Interface Tap *)
       CONST pf802       = 18;  (* IEEE 802.2, also ISO 8802 *)
       CONST pfOSI       = 19;  (* umbrella for all families used by OSI *)
       CONST pfX25       = 20;  (* CCITT X.25 in particular *)
       CONST pfOSINET    = 21;  (* AFI = 47, IDI = 4 *)
       CONST pfGOSIP     = 22;  (* U.S. Government OSI *)
       CONST pfIPX       = 23;  (* Novell Internet Protocol *)
       CONST pfROUTE     = 24;  (* Internal Routing Protocol *)
       CONST pfLINK      = 25;  (* Link-layer interface *)
       CONST pfINET6     = 26;  (* Internet Protocol, Version 6 *)
       CONST pfKEY       = 27;  (* Security Association DB socket *)
       CONST pfNCA       = 28;  (* NCA socket *)
       CONST pfPOLICY    = 29;  (* Security Policy DB socket *)
       (* socket types *)
       CONST dgram     = 1;     (* datagram socket *)
       CONST stream    = 2;     (* stream socket *)
       CONST raw       = 4;     (* raw-protocol interface *)
       CONST rdm       = 5;     (* reliably-delivered message *)
       CONST seqpacket = 6;     (* sequenced packet stream *)
       (* address families *)
       CONST afUNSPEC    = pfUNSPEC;
       CONST afUNIX      = pfUNIX;
       CONST afINET      = pfINET;
       CONST afIMPLINK   = pfIMPLINK;
       CONST afPUP       = pfPUP;
       CONST afCHAOS     = pfCHAOS;
       CONST afNS        = pfNS;
       CONST afNBS       = pfNBS;
       CONST afECMA      = pfECMA;
       CONST afDATAKIT   = pfDATAKIT;
       CONST afCCITT     = pfCCITT;
       CONST afSNA       = pfSNA;
       CONST afDECnet    = pfDECnet;
       CONST afDLI       = pfDLI;
       CONST afLAT       = pfLAT;
       CONST afHYLINK    = pfHYLINK;
       CONST afAPPLETALK = pfAPPLETALK;
       CONST afNIT       = pfNIT;
       CONST af802       = pf802;
       CONST afOSI       = pfOSI;
       CONST afX25       = pfX25;
       CONST afOSINET    = pfOSINET;
       CONST afGOSIP     = pfGOSIP;
       CONST afIPX       = pfIPX;
       CONST afROUTE     = pfROUTE;
       CONST afLINK      = pfLINK;
       CONST afINET6     = pfINET6;
       CONST afKEY       = pfKEY;
       CONST afNCA       = pfNCA;
       CONST afPOLICY    = pfPOLICY;
       (* socket message flags *)
       CONST msgOutOfBand = 1;  (* process out-of-band data *)
       CONST msgPeek = 2;       (* peek at incoming message *)
       CONST msgDontRoute = 4;  (* send without using routing tables *)
       (* shutdown options *)
       CONST shutReceive  = 0;
       CONST shutSend = 1;
       CONST shutBoth = 2;
       (* socket options at socket level -- see <sys/socket.h> *)
       CONST socketLevel = 0FFFFH;     (* options for socket level *)
       CONST optDebug = 1;             (* turn on debugging info recording *)
       CONST optAcceptConn = 2;        (* socket has had listen() *)
       CONST optReuseAddr = 4;         (* allow local address reuse *)
       CONST optKeepAlive = 8;         (* keep connections alive *)
       CONST optDontRoute = 10H;       (* just use interface addresses *)
       CONST optBroadcast = 20H;       (* permit sending of broadcast msgs *)
       CONST optUseLoopBack = 40H;     (* bypass hardware when possible *)
       CONST optLinger = 80H;          (* linger on close if data present *)
       CONST optOOBinline = 100H;      (* leave received OOB data in line *)
       CONST optSndBuf = 1001H;        (* send buffer size *)
       CONST optRcvBuf = 1002H;        (* receive buffer size *)
       CONST optSndLoWat = 1003H;      (* send low-water mark *)
       CONST optRcvLoWat = 1004H;      (* receive low-water mark *)
       CONST optSndTimeO = 1005H;      (* send timeout *)
       CONST optRcvTimeO = 1006H;      (* receive timeout *)
       CONST optError = 1007H;         (* get error status and clear *)
       CONST optType = 1008H;          (* get socket type *)
       CONST optProtocol = 1009H;      (* get/set protocol type *)
       TYPE LingerVal =
          RECORD
             onoff: INTEGER;
             linger: SysTypes.Time;
          END;
       TYPE BoolVal = RECORD bool: INTEGER END;

       PROCEDURE Create(VAR socket: Socket;
                        domain, type, protocol: INTEGER;
                        errors: RelatedEvents.Object) : BOOLEAN;
       PROCEDURE Bind(s: Socket; name: ARRAY OF BYTE;
                      errors: RelatedEvents.Object) : BOOLEAN;
       PROCEDURE Bind3(s: Socket; name: ARRAY OF BYTE;
                       namelen: LONGINT;
                       errors: RelatedEvents.Object) : BOOLEAN;
       PROCEDURE Listen(s: Socket; backlog: INTEGER;
                        errors: RelatedEvents.Object) : BOOLEAN;
       PROCEDURE Accept(VAR fd: SysTypes.File;
                        s: Socket; VAR addr: ARRAY OF BYTE;
                        errors: RelatedEvents.Object) : BOOLEAN;
       PROCEDURE Connect(s: Socket; name: ARRAY OF BYTE;
                         errors: RelatedEvents.Object) : BOOLEAN;
       PROCEDURE Connect3(s: Socket; name: ARRAY OF BYTE;
                          namelen: LONGINT;
                          errors: RelatedEvents.Object) : BOOLEAN;
       PROCEDURE GetName(s: Socket; VAR name: ARRAY OF BYTE;
                         errors: RelatedEvents.Object) : BOOLEAN;
       PROCEDURE GetPeerName(s: Socket; VAR name: ARRAY OF BYTE;
                             errors: RelatedEvents.Object) : BOOLEAN;
       PROCEDURE GetSockOpt(s: Socket; level, optname: INTEGER;
                            VAR optval: ARRAY OF BYTE;
                            errors: RelatedEvents.Object) : BOOLEAN;
       PROCEDURE SetSockOpt(s: Socket; level, optname: INTEGER;
                            optval: ARRAY OF BYTE;
                            errors: RelatedEvents.Object) : BOOLEAN;
       PROCEDURE Shutdown(s: Socket; how: INTEGER;
                          errors: RelatedEvents.Object) : BOOLEAN;
          (* how = shutReceive, shutSend or shutBoth *)

       (* message operations for sockets *)
       PROCEDURE Receive(s: Socket;
                         buf: SysTypes.Address; buflen: SysTypes.Count;
                         flags: INTEGER;
                         errors: RelatedEvents.Object;
                         retry: BOOLEAN; VAR interrupted: BOOLEAN) : SysTypes.Count;
       PROCEDURE ReceiveFrom(s: Socket;
                             buf: SysTypes.Address; buflen: SysTypes.Count;
                             flags: INTEGER;
                             VAR from: ARRAY OF BYTE;
                             VAR fromlen: LONGINT;
                             errors: RelatedEvents.Object;
                             retry: BOOLEAN; VAR interrupted: BOOLEAN) : LONGINT;
       PROCEDURE Send(s: Socket;
                      buf: SysTypes.Address; buflen: SysTypes.Count;
                      flags: INTEGER;
                      errors: RelatedEvents.Object;
                      retry: BOOLEAN; VAR interrupted: BOOLEAN) : BOOLEAN;
       PROCEDURE SendTo(s: Socket;
                        buf: SysTypes.Address; buflen: SysTypes.Count;
                        flags: INTEGER;
                        name: ARRAY OF BYTE; namelen: LONGINT;
                        errors: RelatedEvents.Object;
                        retry: BOOLEAN; VAR interrupted: BOOLEAN) : BOOLEAN;


[1mDESCRIPTION[0m
       [4mSysSockets[24m  interfaces  the  system calls which are related to sockets.
       Sockets are endpoints of interprocess communication.

       Many different communication protocols and networks are  accessible  as
       sockets.   The  main  differences  between  them are the parameters and
       addresses which are necessary to establish a connection.  Once  a  con-
       nection  has  been established, sockets behave like other file descrip-
       tors and are opened for reading and writing.

       [4mSysSockets[24m provides a raw access to  the  system  calls.   There  exist
       other  modules  which  offers more convenient ways to establish connec-
       tions for specific protocols and networks, e.g.  [4mIPv4TCPSockets(3)[24m  and
       [4mInetTCP(3)[24m.

       A  [4mdomain[24m specifies a communication domain which uses a common protocol
       family which shares a address family.  Until now,  all  implementations
       restrict  protocol families to one member which uses one unique address
       type.  Protocol families and address types are given  by  integer  con-
       stants:  [4mpf[24mXXX  specifies a protocol family and [4maF[24mXXX the corresponding
       address family.  Currently, both values are equal for all protocols.

       In widespread use are three protocols only:
       [4mpfUNIX[24m   local connection on one UNIX-machine
       [4mpfINET[24m   IPv4 protocol
       [4mpfINET6[24m  IPv6 protocol

       There exist different types of sockets, the most important  are  [4mstream[0m
       which  provides  a  reliable and sequenced two-way connection and [4mdgram[0m
       which allows to send unreliable messages (datagrams).  [4mseqpacket[24m  works
       like [4mstream[24m but preserves packet boundaries.

       [4mCreate[24m  creates  a new socket for the communication domain [4mdomain[24m (e.g.
       [4mpfINET[24m) which is of type [4mtype[24m  (e.g.  [4mstream[24m).   If  the  communication
       domain supports more than one protocol, the protocol may be selected by
       [4mprotocol[24m.  Normally, only one protocol is available which can be speci-
       fied  as [1m0[22m.  Sockets which have been just created by [4mCreate[24m are unnamed
       and unconnected.  Consequently, they are not ready  for  any  input  or
       output  operation.   Newly created sockets should be either prepared to
       accept connections ([4mBind[24m, [4mListen[24m and [4mAccept[24m) or being  connected  ([4mCon-[0m
       [4mnect[24m)  to  another  socket  by  giving the address of a peer (the other
       socket we want to communicate with).

       [4mBind[24m assigns [4mname[24m to an unnamed socket.  [4mname[24m should be of the appropi-
       ate  address  type.   Usually,  address types have a length of 16 bytes
       (some bytes may be unused) where the first 2 bytes are used select  the
       address  family (e.g. [4mafINET[24m).  [4mBind3[24m works like [4mBind[24m but [4mnamelen[24m over-
       rides [1mLEN[22m([4mname[24m).

       [4mListen[24m prepares a socket for the acceptance of connections.  Connection
       requests  are  queued  and  [4mbacklog[24m allows to specify the maximal queue
       length.  [4mAccept[24m waits for an incoming connection related to  the  given
       socket.   The  socket must have been named by [4mBind[24m and prepared by [4mLis-[0m
       [4mten[24m.  If successful, a file descriptor is returned  together  with  the
       address  of  the  peer.   Typically, [4mAccept[24m is executed in a loop which
       forks for every incoming connection.

       [4mConnect[24m tries to establish a connection to a peer with the given  name.
       [4mConnect3[24m works like [4mConnect[24m but [4mnamelen[24m overrides [1mLEN[22m([4mname[24m).

       [4mGetName[24m  returns  the  current  name  of the given socket.  [4mGetPeerName[0m
       returns the name of the peer connected to socket [4ms[24m.

       [4mGetSockOpt[24m and [4mSetSockOpt[24m allow to retrieve and modify  socket  options
       at  various  levels  of the protocol hierarchy.  Some of the options at
       the socket level ([4mlevel[24m = [4msocketLevel[24m) may be useful in  some  applica-
       tions:
       [4moptKeepAlive[24m   asks the system to periodically check the connection for
                      being alive even when no data is exchanged.  A record of
                      type [4mBoolVal[24m has to be given as [4moptval[24m.
       [4moptLinger[24m      some  applications  produce  output  data for other pro-
                      cesses without waiting for confirmation.  In  this  case
                      it  may  be useful to increase the linger time to assure
                      that the system still tries  to  transmit  the  yet  not
                      received  data  even  after  [4mSysIO.Close[24m or [4mShutdown[24m.  A
                      record of type [4mLingerVal[24m has to be given as [4moptval[24m.

       [4mShutdown[24m allows to partially shut down a connection.

       [4mReceive[24m, [4mReceiveFrom[24m, [4mSend[24m and [4mSendTo[24m  interface  UDP,  the  unreliable
       datagram transmission protocol (socket type [4mdgram[24m).

[1mDIAGNOSTICS[0m
       System call failures lead to events of [4mSysErrors(3)[24m.  The [4merrors[24m param-
       eter is passed to [4mSysErrors.Raise[24m.   All  procedures  return  [1mFALSE  [22min
       error case.

[1mSEE ALSO[0m
       [4maccept(2)[24m        [4mAccept[0m
       [4mbind(2)[24m          [4mBind[0m
       [4mconnect(2)[24m       [4mConnect[0m
       [4mgetpeername(2)[24m   [4mGetPeerName[0m
       [4mgetsockname(2)[24m   [4mGetName[0m
       [4mgetsockopt(2)[24m    [4mGetSockOpt[24m and [4mSetSockOpt[0m
       [4mlisten(2)[24m        [4mListen[0m
       [4mreceive(2)[24m       [4mReceive[24m and [4mReceiveFrom[0m
       [4msend(2)[24m          [4mSend[24m and [4mSendTo[0m
       [4mshutdown(2)[24m      [4mShutdown[0m
       [4msocket(2)[24m        [4mCreate[0m
       [4mSysErrors(3)[24m     error handling
       [4mSysIO(3)[24m         input and output operations



Release 0.5              Last change: 24 February 2005           SysSockets(3)
