


NetIO(3)               Ulm's Oberon System               NetIO(3)


NNAAMMEE
       NetIO - exchange of Oberon base types

SSYYNNOOPPSSIISS
       TYPE ReadByteProc =
          PROCEDURE (s: Streams.Stream; VAR byte: BYTE) : BOOLEAN;
       TYPE ReadCharProc =
          PROCEDURE (s: Streams.Stream; VAR char: CHAR) : BOOLEAN;
       TYPE ReadBooleanProc =
          PROCEDURE (s: Streams.Stream; VAR boolean: BOOLEAN) : BOOLEAN;
       TYPE ReadShortIntProc =
          PROCEDURE (s: Streams.Stream; VAR shortint: SHORTINT) : BOOLEAN;
       TYPE ReadIntegerProc =
          PROCEDURE (s: Streams.Stream; VAR integer: INTEGER) : BOOLEAN;
       TYPE ReadLongIntProc =
          PROCEDURE (s: Streams.Stream; VAR longint: LONGINT) : BOOLEAN;
       TYPE ReadRealProc =
          PROCEDURE (s: Streams.Stream; VAR real: REAL) : BOOLEAN;
       TYPE ReadLongRealProc =
          PROCEDURE (s: Streams.Stream; VAR longreal: LONGREAL) : BOOLEAN;
       TYPE ReadSetProc =
          PROCEDURE (s: Streams.Stream; VAR set: SET) : BOOLEAN;
       TYPE ReadStringProc =
          PROCEDURE (s: Streams.Stream; VAR string: ARRAY OF CHAR) : BOOLEAN;
       TYPE ReadConstStringProc =
          PROCEDURE (s: Streams.Stream; domain: ConstStrings.Domain;
                     VAR string: ConstStrings.String) : BOOLEAN;

       TYPE WriteByteProc =
          PROCEDURE (s: Streams.Stream; byte: BYTE) : BOOLEAN;
       TYPE WriteCharProc =
          PROCEDURE (s: Streams.Stream; char: CHAR) : BOOLEAN;
       TYPE WriteBooleanProc =
          PROCEDURE (s: Streams.Stream; boolean: BOOLEAN) : BOOLEAN;
       TYPE WriteShortIntProc =
          PROCEDURE (s: Streams.Stream; shortint: SHORTINT) : BOOLEAN;
       TYPE WriteIntegerProc =
          PROCEDURE (s: Streams.Stream; integer: INTEGER) : BOOLEAN;
       TYPE WriteLongIntProc =
          PROCEDURE (s: Streams.Stream; longint: LONGINT) : BOOLEAN;
       TYPE WriteRealProc =
          PROCEDURE (s: Streams.Stream; real: REAL) : BOOLEAN;
       TYPE WriteLongRealProc =
          PROCEDURE (s: Streams.Stream; longreal: LONGREAL) : BOOLEAN;
       TYPE WriteSetProc =
          PROCEDURE (s: Streams.Stream; set: SET) : BOOLEAN;
       TYPE WriteStringProc =
          PROCEDURE (s: Streams.Stream; string: ARRAY OF CHAR) : BOOLEAN;
       TYPE WriteConstStringProc =
          PROCEDURE (s: Streams.Stream;
                     string: ConstStrings.String) : BOOLEAN;

       TYPE Interface = POINTER TO InterfaceRec;
       TYPE InterfaceRec =



Release 0.5         Last change: 15 April 1999                  1





NetIO(3)               Ulm's Oberon System               NetIO(3)


          RECORD
             readByte: ReadByteProc;
             readChar: ReadCharProc;
             readBoolean: ReadBooleanProc;
             readShortInt: ReadShortIntProc;
             readInteger: ReadIntegerProc;
             readLongInt: ReadLongIntProc;
             readReal: ReadRealProc;
             readLongReal: ReadLongRealProc;
             readSet: ReadSetProc;
             readString: ReadStringProc;
             readConstString: ReadConstStringProc;
             writeByte: WriteByteProc;
             writeChar: WriteCharProc;
             writeBoolean: WriteBooleanProc;
             writeShortInt: WriteShortIntProc;
             writeInteger: WriteIntegerProc;
             writeLongInt: WriteLongIntProc;
             writeReal: WriteRealProc;
             writeLongReal: WriteLongRealProc;
             writeSet: WriteSetProc;
             writeString: WriteStringProc;
             writeConstString: WriteConstStringProc;
          END;

       PROCEDURE AttachInterface(s: Streams.Stream; if: Interface);
       PROCEDURE CopyInterface(from, to: Streams.Stream);

       PROCEDURE ReadByte(s: Streams.Stream; VAR byte: BYTE) : BOOLEAN;
       PROCEDURE ReadChar(s: Streams.Stream; VAR char: CHAR) : BOOLEAN;
       PROCEDURE ReadBoolean(s: Streams.Stream; VAR boolean: BOOLEAN) : BOOLEAN;
       PROCEDURE ReadShortInt(s: Streams.Stream; VAR shortint: SHORTINT) : BOOLEAN;
       PROCEDURE ReadInteger(s: Streams.Stream; VAR integer: INTEGER) : BOOLEAN;
       PROCEDURE ReadLongInt(s: Streams.Stream; VAR longint: LONGINT) : BOOLEAN;
       PROCEDURE ReadReal(s: Streams.Stream; VAR real: REAL) : BOOLEAN;
       PROCEDURE ReadLongReal(s: Streams.Stream; VAR longreal: LONGREAL) : BOOLEAN;
       PROCEDURE ReadSet(s: Streams.Stream; VAR set: SET) : BOOLEAN;
       PROCEDURE ReadString(s: Streams.Stream; VAR string: ARRAY OF CHAR) : BOOLEAN;
       PROCEDURE ReadConstString(s: Streams.Stream;
                                 VAR string: ConstStrings.String) : BOOLEAN;
       PROCEDURE ReadConstStringD(s: Streams.Stream;
                                  domain: ConstStrings.Domain;
                                  VAR string: ConstStrings.String) : BOOLEAN;

       PROCEDURE WriteByte(s: Streams.Stream; byte: BYTE) : BOOLEAN;
       PROCEDURE WriteChar(s: Streams.Stream; char: CHAR) : BOOLEAN;
       PROCEDURE WriteBoolean(s: Streams.Stream; boolean: BOOLEAN) : BOOLEAN;
       PROCEDURE WriteShortInt(s: Streams.Stream; shortint: SHORTINT) : BOOLEAN;
       PROCEDURE WriteInteger(s: Streams.Stream; integer: INTEGER) : BOOLEAN;
       PROCEDURE WriteLongInt(s: Streams.Stream; longint: LONGINT) : BOOLEAN;
       PROCEDURE WriteReal(s: Streams.Stream; real: REAL) : BOOLEAN;
       PROCEDURE WriteLongReal(s: Streams.Stream; longreal: LONGREAL) : BOOLEAN;
       PROCEDURE WriteSet(s: Streams.Stream; set: SET) : BOOLEAN;
       PROCEDURE WriteString(s: Streams.Stream; string: ARRAY OF CHAR) : BOOLEAN;



Release 0.5         Last change: 15 April 1999                  2





NetIO(3)               Ulm's Oberon System               NetIO(3)


       PROCEDURE WriteConstString(s: Streams.Stream;
                                  string: ConstStrings.String) : BOOLEAN;


DDEESSCCRRIIPPTTIIOONN
       _N_e_t_I_O  provides  an abstraction for the exchange of Oberon
       base types which are components of persistent data  struc­
       tures.   Possible implementations may take care of differ­
       ent compilers and  machine  architectures.   Additionally,
       they could improve safety by the use of tag fields.

       _N_e_t_I_O  itself  provides  a default interface which is used
       when _A_t_t_a_c_h_I_n_t_e_r_f_a_c_e has not been called yet for the given
       stream  or  is  called  with  _i_f  set to NNIILL.  The default
       interface uses binary I/O which does not take care of dif­
       ferent implementations.  _C_o_p_y_I_n_t_e_r_f_a_c_e may be used instead
       of _A_t_t_a_c_h_I_n_t_e_r_f_a_c_e to attach the set of  interface  proce­
       dures  to  _t_o  which  has  been formerly attached to _f_r_o_m.
       Note that _N_e_t_I_O supports _F_o_r_w_a_r_d_e_r_s, i.e.  _F_o_r_w_a_r_d_e_r_s_._F_o_r_­
       _w_a_r_d  calls  _C_o_p_y_I_n_t_e_r_f_a_c_e implicitly.  If _A_t_t_a_c_h_I_n_t_e_r_f_a_c_e
       or _C_o_p_y_I_n_t_e_r_f_a_c_e is called,  the  new  interface  will  be
       installed  for  all  dependent streams of _s or _t_o, respec­
       tively.

DDIIAAGGNNOOSSTTIICCSS
       All input and output  procedures  return  FFAALLSSEE  in  error
       case.   With the exception of reaching an end of file con­
       dition, they  should  generate  appropriate  events  which
       indicate the problem.

SSEEEE AALLSSOO
       _F_o_r_w_a_r_d_e_r_s_(_3_)          general forwarding operation
       _P_e_r_s_i_s_t_e_n_t_E_v_e_n_t_s_(_3_)    input  and  output  of  events  and
                              error queues
       _P_e_r_s_i_s_t_e_n_t_O_b_j_e_c_t_s_(_3_)   input  and  output  of   persistent
                              objects





















Release 0.5         Last change: 15 April 1999                  3


