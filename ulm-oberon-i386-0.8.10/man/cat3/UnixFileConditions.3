


UnixFileConditions(3)  Ulm's Oberon System  UnixFileConditions(3)


NNAAMMEE
       UnixFileConditions - conditions for UNIX file descriptors

SSYYNNOOPPSSIISS
       (* operations *)
       CONST read = StreamConditions.read;
       CONST write = StreamConditions.write;
       CONST exception = 2;

       PROCEDURE Create(VAR condition: Conditions.Condition;
                        stream: Streams.Stream;
                        fd: SysTypes.File; operation: SHORTINT);
       PROCEDURE Test(stream: Streams.Stream; fd: SysTypes.File;
                      operation: SHORTINT;
                      errors: RelatedEvents.Object) : BOOLEAN;


DDEESSCCRRIIPPTTIIOONN
       _U_n_i_x_F_i_l_e_C_o_n_d_i_t_i_o_n_s   interfaces  _S_y_s_S_e_l_e_c_t_(_3_)  for  _C_o_n_d_i_­
       _t_i_o_n_s_(_3_).  It is mainly  used  by  file  descriptor  based
       stream  implementations which support _S_t_r_e_a_m_C_o_n_d_i_t_i_o_n_s_(_3_).

       _C_r_e_a_t_e creates a condition which evaluates to TTRRUUEE if  the
       given  file descriptor _f_d is ready for _o_p_e_r_a_t_i_o_n, i.e. the
       operation would not  block.   Additionaly,  _U_n_i_x_F_i_l_e_C_o_n_d_i_­
       _t_i_o_n_s  is  able to check the buffering state of _s_t_r_e_a_m (if
       it is non-NNIILL).

       _T_e_s_t performs a similar check without blocking and relates
       all errors to _e_r_r_o_r_s.

SSEEEE AALLSSOO
       _C_o_n_d_i_t_i_o_n_s_(_3_)         general interface for conditions
       _S_t_r_e_a_m_C_o_n_d_i_t_i_o_n_s_(_3_)   interface for stream conditions
       _S_y_s_S_e_l_e_c_t_(_3_)          system call interface for _s_e_l_e_c_t_(_2_)






















Release 0.5         Last change: 17 March 1992                  1


