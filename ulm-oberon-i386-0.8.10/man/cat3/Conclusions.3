


Conclusions(3)         Ulm's Oberon System         Conclusions(3)


NNAAMMEE
       Conclusions - convert errors and events into conclusions

SSYYNNOOPPSSIISS
       VAR handlerSet: Errors.HandlerSet;
       VAR errors: INTEGER; (* number of errors *)
       VAR fatalcode: INTEGER; (* exit code on fatal events *)

       PROCEDURE CatchEvent(type: Events.EventType; kind: Errors.Kind);
       PROCEDURE Conclude(object: RelatedEvents.Object; kind: Errors.Kind;
                          text: ARRAY OF CHAR);
       PROCEDURE ConcludeS(s: Streams.Stream;
                           object: RelatedEvents.Object; kind: Errors.Kind;
                           text: ARRAY OF CHAR);


DDEESSCCRRIIPPTTIIOONN
       _C_o_n_c_l_u_s_i_o_n_s  provides  a  handler  set (see _E_r_r_o_r_s_(_3_)) for
       error events and  printing  routines  for  object  related
       event queues.  Further, _C_o_n_c_l_u_s_i_o_n_s installs an abort han­
       dler for _E_v_e_n_t_s which prints  out  the  message  text  and
       calls _P_r_o_c_e_s_s_._A_b_o_r_t.

       Beside  message printing following actions are being taken
       in dependence of the event classification:
       _e_r_r_o_r   Causes _e_r_r_o_r_s to be incremented.
       _f_a_t_a_l   Causes program termination with an  exit  code  of
               _f_a_t_a_l_c_o_d_e.
       _b_u_g     Causes the program to be aborted.

       _C_a_t_c_h_E_v_e_n_t  installs  the appropiate error handler of _C_o_n_­
       _c_l_u_s_i_o_n_s for _t_y_p_e in dependence of _k_i_n_d.  This is  equiva­
       lent to _E_r_r_o_r_s_._C_a_t_c_h_E_v_e_n_t(_h_a_n_d_l_e_r_S_e_t, _k_i_n_d, _t_y_p_e).

       _C_o_n_c_l_u_d_e_S  prints the queue of events which are related to
       _o_b_j_e_c_t to _s in LIFO-order.  _C_o_n_c_l_u_d_e_S adds the basename of
       the  command  (see  _U_n_i_x_A_r_g_u_m_e_n_t_s_(_3_)),  the classification
       (except for _m_e_s_s_a_g_e) and _t_e_x_t (if non-empty) to the  first
       message.   Further  messages  are  printed  in  subsequent
       lines.  "*no messages found*" is printed for empty queues.
       _C_o_n_c_l_u_d_e calls _C_o_n_c_l_u_d_e_S with _s = _S_t_r_e_a_m_s_._s_t_d_e_r_r.

EEXXAAMMPPLLEE
       Following  example  demonstrates _C_o_n_c_l_u_d_e for usual situa­
       tions like failed _O_p_e_n operation:

       VAR errors: RelatedEvents.Object; s: Streams.Stream;
       (* ... *)
       NEW(errors); RelatedEvents.QueueEvents(errors);
       IF ~UnixFiles.Open(s, filename, "r", Streams.onebuf, errors) THEN
          (* print message and terminate *)
          Conclusions.Conclude(errors, Errors.fatal, filename);
       END;




Release 0.5       Last change: 16 September 1996                1





Conclusions(3)         Ulm's Oberon System         Conclusions(3)


SSEEEE AALLSSOO
       _E_r_r_o_r_s_(_3_)          general error handler interface
       _P_r_o_c_e_s_s_(_3_)         process termination and abortion
       _R_e_l_a_t_e_d_E_v_e_n_t_s_(_3_)   object related events





















































Release 0.5       Last change: 16 September 1996                2


