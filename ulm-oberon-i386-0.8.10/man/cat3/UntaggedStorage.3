


UntaggedStorage(3)     Ulm's Oberon System     UntaggedStorage(3)


NNAAMMEE
       UntaggedStorage  -  interface  for storage not affected by
       garbage collection

SSYYNNOOPPSSIISS
       TYPE Address = Types.UntracedAddress;
       TYPE Size = Types.Size;
       CONST Nil = SYSTEM.VAL(Address, NIL);
       TYPE Status = POINTER TO StatusRec;
       TYPE StatusRec =
          RECORD
             (Objects.ObjectRec)
             allocated: Size;
             consumed: Size;
             chunksize: Size;
          END;

       TYPE NewProc = PROCEDURE (size: Size) : Address;
       TYPE DisposeProc = PROCEDURE (ptr: Address);
       TYPE UseProc = PROCEDURE (ptr: Address; size: Size);
       TYPE GetStatusProc = PROCEDURE (VAR status: Status);
       TYPE ChunkSizeProc = PROCEDURE (size: Size) : Size;
       TYPE Interface =
          RECORD
             new: NewProc;
             dispose: DisposeProc;
             use: UseProc;
             getStatus: GetStatusProc;
             chunkSize: ChunkSizeProc;
          END;

       PROCEDURE New(size: Size) : Address;
       PROCEDURE Dispose(ptr: Address);

       PROCEDURE Use(ptr: Address; size: Size);

       PROCEDURE GetStatus(VAR status: Status);
       PROCEDURE ChunkSize(size: Size) : Size;

       PROCEDURE Init(if: Interface);



DDEESSCCRRIIPPTTIIOONN
       _U_n_t_a_g_g_e_d_S_t_o_r_a_g_e provides an interface  for  storage  unaf­
       fected  by  a garbage collection.  Objects allocated using
       _U_n_t_a_g_g_e_d_S_t_o_r_a_g_e remain fixed in the address space  and  do
       not  belong to the memory regions controlled by _S_t_o_r_a_g_e_(_3_)
       and the garbage collector.  As a consequence, the  garbage
       collector must not be aware of pointers pointing onto such
       objects. On the other side, that objects should  not  con­
       tain  pointers originating from NNEEWW or SSYYSSTTEEMM..NNEEWW, because
       the garbage collector will not update them. In addition to
       that,  objects  created  with _U_n_t_a_g_g_e_d_S_t_o_r_a_g_e have no type



Release 0.5       Last change: 17 November 1995                 1





UntaggedStorage(3)     Ulm's Oberon System     UntaggedStorage(3)


       tag and should be considered just as an interval of bytes.
       The  compiler  options  PP and/or OO have to be switched off
       for pointer types pointing to such objects. This makes  it
       possible  for  the compiler not to trace these pointers in
       pointer lists and to reject type tests.

       _I_n_i_t is to be called during startup by the module which is
       implementing  this  interface.   All  interface procedures
       have to follow the semantics described below.

       _N_e_w tries to allocate an interval with the length of  _s_i_z_e
       bytes.  On success, a reference to the requested region is
       returned.  Otherwise, _S_t_o_r_a_g_e_._G_a_r_b_a_g_e_C_o_l_l_e_c_t_i_o_n is  called
       and  _N_e_w  retries the allocation. Finally, NNiill is returned
       when not enough memory is available.

       _D_i_s_p_o_s_e releases a memory region which  has  been  created
       earlier  by  _N_e_w.  The parameter _p_t_r is expected to repre­
       sent the start of the interval.

       _U_s_e puts the interval [[_p_t_r, _p_t_r+_s_i_z_e)) into the  free  list
       of  _N_e_w for further consumption. This interval must not be
       allocated earlier using _N_e_w, NNEEWW or SSYYSSTTEEMM..NNEEWW, but it can
       be  every  piece  of memory which the garbage collector is
       not aware of. This example reuses a global static array:

       CONST size = 1024;
       VAR globalArray: ARRAY size OF BYTE;
       (* ... *)
       UntaggedStorage.Use(SYSTEM.VAL(UntaggedStorage.Address,
                                      SYSTEM.ADR(globalArray)),
                           SYSTEM.SIZE(globalArray));


       _G_e_t_S_t_a_t_u_s returns a pointer to  a  record  which  contains
       information  about the current storage status.  The _c_h_u_n_k_­
       _s_i_z_e component contains the size  of  new  memory  regions
       which  will  be  requested  from the operating system when
       more memory is needed.  The value  returned  in  _a_l_l_o_c_a_t_e_d
       represents  the  total number of bytes which are currently
       under control of _U_n_t_a_g_g_e_d_S_t_o_r_a_g_e, while _c_o_n_s_u_m_e_d  contains
       the  number  of  bytes  which  are  currently in use (_c_o_n_­
       _s_u_m_e_d<=_a_l_l_o_c_a_t_e_d).

       _C_h_u_n_k_S_i_z_e allows to change the  current  chunk  size.  The
       chunk size is the size of new memory chunks when the stor­
       age allocator requests more memory from the system.  There
       may  be  several  system-dependent  requirements which the
       chunk size has to meet, such as concerning  address  space
       utilization  or  the  system's page size: _C_h_u_n_k_S_i_z_e rounds
       _s_i_z_e to the next  higher  possible  value,  if  the  given
       parameter can not be used as new chunk size (generally, it
       should be a good idea when  _s_i_z_e  is  a  power  of  2  and
       greater  than  the  page  size).   As result, the computed



Release 0.5       Last change: 17 November 1995                 2





UntaggedStorage(3)     Ulm's Oberon System     UntaggedStorage(3)


       value is returned.  In case of _s_i_z_e =  00,  _C_h_u_n_k_S_i_z_e  only
       returns the current chunk size and no change is made.
       Especially,  when  allocating  objects  with sizes greater
       than the page size, changing the chunk size can reduce the
       amount  of  memory  needed  from  the operating system and
       increase performance.

DDIIAAGGNNOOSSTTIICCSS
       Calls to all interface  procedures  before  _I_n_i_t  lead  to
       immediate  program termination via _P_r_o_c_e_s_s_._E_x_i_t (exit code
       225555).

SSEEEE AALLSSOO
       _P_r_o_c_e_s_s_(_3_)      process termination
       _S_t_o_r_a_g_e_(_3_)      storage allocating interface for the  com­
                       piler
       _S_y_s_S_t_o_r_a_g_e_(_3_)   storage  allocator  with  copying  garbage
                       collection.
       _o_c_(_1_)           compiler options

AAUUTTHHOORR
       Hansjörg Nägele, University of Ulm



































Release 0.5       Last change: 17 November 1995                 3


