


Shards(3)              Ulm's Oberon System              Shards(3)


NNAAMMEE
       Shards - abstraction for authorization protocols

SSYYNNOOPPSSIISS
       TYPE Pot = POINTER TO PotRec;
       TYPE PotRec = RECORD (PersistentDisciplines.ObjectRec) END;
       TYPE Lid = POINTER TO LidRec;
       TYPE LidRec = RECORD (PersistentDisciplines.ObjectRec) END;
       TYPE FitsProc = PROCEDURE (pot: Pot; lid: Lid): BOOLEAN;
       TYPE SupplyProc = PROCEDURE (pot: Pot; VAR lid: Lid): BOOLEAN;
       TYPE Interface = POINTER TO InterfaceRec;
       TYPE InterfaceRec =
          RECORD
             (Objects.ObjectRec)
             fits: FitsProc;
             supply: SupplyProc; (* may be NIL *)
          END;

       PROCEDURE Fits(pot: Pot; lid: Lid): BOOLEAN;
       PROCEDURE Supply(pot: Pot; VAR lid: Lid): BOOLEAN;
       PROCEDURE Init(pot: Pot; if: Interface);
       PROCEDURE CombineLids(VAR lid: Lid; lid1, lid2: Lid);
       PROCEDURE CreateSimplePot(VAR pot: Pot; permissive: BOOLEAN);


DDEESSCCRRIIPPTTIIOONN
       _S_h_a_r_d_s  come in two types, _P_o_t and _L_i_d_, to serve as tokens
       in authorization protocols.  A pot is an object  that  can
       tell  whether  a  given  lid  object fits to it.  Some pot
       objects can also supply new  lids  guaranteed  to  fit  to
       them.

       Both  of  the most trivial cases of pots (either accepting
       any or no lid at all) can be obtained using  _C_r_e_a_t_e_S_i_m_p_l_e_­
       _P_o_t.

       By  convention,  it  is  always legal to use NNIILL for a lid
       that is supposed to fit to none but  simple  pots  of  the
       permissive kind.

       _C_o_m_b_i_n_e_L_i_d_s  creates a new lid fitting to any pot at least
       one of _l_i_d_1 or _l_i_d_2 fits to.  Note that _l_i_d_1  will  always
       be considered first.

       Implementors  of  other  shard types must initialize their
       pots using _I_n_i_t.  The _i_f_._f_i_t_s method will be  called  with
       lids  of any type, but not NNIILL.  Thus it should in general
       perform a type test on _l_i_d prior  to  its  implementation-
       specific verification procedure.

       Note that the Boolean result of _F_i_t_s is not an error indi­
       cator.  If _i_f_._s_u_p_p_l_y is NNIILL,  _S_u_p_p_l_y  will  always  return
       FFAALLSSEE.




Release 0.5         Last change: 10 April 1998                  1





Shards(3)              Ulm's Oberon System              Shards(3)


SSEEEE AALLSSOO
       _P_r_i_v_a_t_e_S_h_a_r_d_s_(_3_)       standard  nontrivial  shards imple­
                              mentation
       _P_e_r_s_i_s_t_e_n_t_O_b_j_e_c_t_s_(_3_)   abstraction for persistent objects

AAUUTTHHOORR
       Martin Hasch, University of Ulm


















































Release 0.5         Last change: 10 April 1998                  2


