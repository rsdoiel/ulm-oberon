Assertions(3)                 Ulm's Oberon System                Assertions(3)



[1mNAME[0m
       Assertions - event handling for failed assertions

[1mSYNOPSIS[0m
       TYPE Identifier = ARRAY 32 OF CHAR;
       TYPE Event = POINTER TO EventRec;
       TYPE EventRec =
          RECORD
             (Events.EventRec)
             object: RelatedEvents.Object;
             module: Identifier;
             proc: Identifier;
          END;
       TYPE EventType = POINTER TO EventTypeRec;
       TYPE EventTypeRec = RECORD (Events.EventTypeRec) END;

       VAR failedAssertion: Events.EventType;

       PROCEDURE Define(VAR type: Events.EventType; module: ARRAY OF CHAR);
       PROCEDURE Raise(object: RelatedEvents.Object;
                       type: Events.EventType;
                       proc: ARRAY OF CHAR;
                       text: ARRAY OF CHAR);


[1mDESCRIPTION[0m
       [4mAssertions[24m  generates  events  for failed assertions.  These events are
       intended for programming errors either in the library  or  the  calling
       module.

       [4mDefine[24m  creates an event type for the given module and should be called
       during initialization time.  Initially, the priority is set to  [4mPriori-[0m
       [4mties.assertions[24m.

       [4mRaise[24m  raises  [4mfailedAssertion[24m with priority [4mPriority.assertions[24m.  Fur-
       ther, an event of the given type  is  passed  to  [4mRelatedEvents[24m.   Both
       events  contain  all paramters of [4mRaise[24m and the module identifier which
       has been passed to [4mDefine[24m.  By default, [4mfailedAssertion[24m is ignored.

[1mSEE ALSO[0m
       [4mEvents(3)[24m          error handling if [4mobject[24m = [1mNIL[0m
       [4mRelatedEvents(3)[24m   error handling if [4mobject[24m # [1mNIL[0m

[1mBUGS[0m
       [4mAssertions[24m is now obsolete due to new standard procedure [1mASSERT [22mof  the
       Oberon  programming  language.   Therefore it is recommended to replace
       constructions like

       IF (* failure detected? *) THEN
          Assertions.Raise(...);
       END;

       by

       ASSERT( ~(* failure detected? *) );

       [1mASSERT [22mcalls in case of  failures  [4mRTErrors.FailedAssertion[24m  which,  in
       turn,  raises  an  event of the type [4mRTErrors.error[24m[[4mRTErrors.assertion[24m]
       (see [4mRTErrors(3)[24m).



Release 0.5                Last change: 10 July 2003             Assertions(3)
