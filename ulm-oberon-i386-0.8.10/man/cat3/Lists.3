


Lists(3)               Ulm's Oberon System               Lists(3)


NNAAMMEE
       Lists - management of linear lists

SSYYNNOOPPSSIISS
       TYPE List = POINTER TO ListRec;
       TYPE ListRec = RECORD (Objects.ObjectRec) END;
       TYPE Element = POINTER TO ElementRec;
       TYPE ElementRec = RECORD (Objects.ObjectRec) END;
       TYPE CompareProc = PROCEDURE (e1: Element; e2: Element) : INTEGER;

       PROCEDURE CreateList(VAR list: List);
       PROCEDURE CreateSortedList(VAR list: List; compare: CompareProc);
       PROCEDURE Add(list: List; element: Element);
       PROCEDURE Insert(list: List; element: Element);
       PROCEDURE First(list: List);
       PROCEDURE Next(list: List; VAR element: Element) : BOOLEAN;
       PROCEDURE Last(list: List);
       PROCEDURE Previous(list: List; VAR element: Element) : BOOLEAN;


DDEESSCCRRIIPPTTIIOONN
       _L_i_s_t_s  supports double linked lists.  Lists may be option­
       ally maintained in sorted order.  Sorted lists need a com­
       parison  procedure of type _C_o_m_p_a_r_e_P_r_o_c.  Comparison proce­
       dures compare _e_1 against _e_2 and return a negative  integer
       value  if  _e_1 is less than _e_2, zero if _e_1 equals _e_2, and a
       positive integer value if _e_1 is greater than _e_2.

       List elements are of type _E_l_e_m_e_n_t.  This datatype is to be
       extended with the informations to be stored into the list.

       _C_r_e_a_t_e_L_i_s_t creates a (unsorted) list.  _l_i_s_t serves as ref­
       erence  for future operations.  _C_r_e_a_t_e_S_o_r_t_e_d_L_i_s_t creates a
       sorted list.

       _A_d_d adds the given _e_l_e_m_e_n_t to  _l_i_s_t_.   _e_l_e_m_e_n_t  is  either
       appended  or in case of sorted lists inserted according to
       the order defined by _c_o_m_p_a_r_e.  _I_n_s_e_r_t works like  _A_d_d  but
       inserts  the  given  _e_l_e_m_e_n_t  prior to the head in case of
       unsorted lists.

       _N_e_x_t and _P_r_e_v_i_o_u_s  allow  sequential  access  of  _l_i_s_t  in
       ascending  resp.   descending order.  Each call of _N_e_x_t or
       _P_r_e_v_i_o_u_s works relative to  the  element  returned  previ­
       ously.   _F_i_r_s_t causes _N_e_x_t or _P_r_e_v_i_o_u_s to return the first
       element of _l_i_s_t.  This is the historically  first  element
       for  unsorted  lists (if the list was built up by calls of
       _A_d_d) or the lowest element in case of sorted lists.  Like­
       wise,  _L_a_s_t positions to the last element.  _F_i_r_s_t and _L_a_s_t
       return FFAALLSSEE at the end of the list.

EEXXAAMMPPLLEE
       Following code  fragment  examines  a  list  in  ascending
       order:



Release 0.5       Last change: 12 February 1994                 1





Lists(3)               Ulm's Oberon System               Lists(3)


       VAR
          list: Lists.List;
          element: Lists.Element;

       (* ... *)

       Lists.First(list);
       WHILE Lists.Next(list, element) DO
          (* ... *)
       END;


BBUUGGSS
       _L_i_s_t_s will be replaced by a more general set of modules in
       the future.










































Release 0.5       Last change: 12 February 1994                 2


