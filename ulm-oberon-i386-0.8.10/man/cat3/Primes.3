


Primes(3)              Ulm's Oberon System              Primes(3)


NNAAMMEE
       Primes  -  general abstraction for primality testing algo­
       rithms

SSYYNNOOPPSSIISS
       CONST composite = 0; prime = 1; indefinite = 2;
       TYPE Test = POINTER TO TestRec;
       TYPE TestRec = RECORD (Disciplines.ObjectRec) END;
       TYPE PerformTestProc = PROCEDURE(test: Test;
                                        value: IntOperations.Operand;
                                        VAR p: REAL): INTEGER;
       TYPE Interface = POINTER TO InterfaceRec;
       TYPE InterfaceRec =
          RECORD
             (Objects.ObjectRec)
             performTest: PerformTestProc;
          END;

       PROCEDURE Init(test: Test; if: Interface);
       PROCEDURE PerformTest(test: Test; value: IntOperations.Operand;
                             VAR p: REAL): INTEGER;


DDEESSCCRRIIPPTTIIOONN
       _P_r_i_m_e_s defines a general abstraction for primality testing
       algorithms.  For probabilistic algorithms additionally the
       probability of the tested value being prime is given  (see
       _L_e_h_m_a_n_n_(_3_) or _R_a_b_i_n_M_i_l_l_e_r_(_3_)) instead of an absolute pred­
       ication.

       The interface procedure should meet the specification fol­
       lowing:

       _p_e_r_f_o_r_m_T_e_s_t:   PPRROOCCEEDDUURREE(_t_e_s_t:   _T_e_s_t;   _v_a_l_u_e:  _I_n_t_O_p_e_r_a_­
            _t_i_o_n_s._O_p_e_r_a_n_d; VVAARR _p: RREEAALL) : IINNTTEEGGEERR;
            test given _v_a_l_u_e and return  _c_o_m_p_o_s_i_t_e  if  _v_a_l_u_e  is
            definitely not prime, return _p_r_i_m_e if _v_a_l_u_e is surely
            prime and return _i_n_d_e_f_i_n_i_t_e if _v_a_l_u_e may be prime. In
            this  case, _p in (0..1) should indicate the probabil­
            ity of _v_a_l_u_e being prime if _t_e_s_t is  a  probabilistic
            primality  testing  algorithm and the tests should be
            independent.  Otherwise _p is to be set to 0.

       _I_n_i_t is called by modules which implement a primality test
       algorithm  to  connect  the interface _i_f to the prime test
       _t_e_s_t.

       _P_e_r_f_o_r_m_T_e_s_t tests the given _v_a_l_u_e and returns _c_o_m_p_o_s_i_t_e if
       _v_a_l_u_e  is  definitely not prime, returns _p_r_i_m_e if _v_a_l_u_e is
       surely prime and returns _i_n_d_e_f_i_n_i_t_e if _v_a_l_u_e may be prime.
       If  a  probabilistic  primality testing algorithm is used,
       then _p in (0..1) indicates the probability of _v_a_l_u_e  being
       prime.  Then  reiterations of the test improve the result,
       because the tests are independent.  If  the  test  returns



Release 0.5         Last change: 3 April 1997                   1





Primes(3)              Ulm's Oberon System              Primes(3)


       _i_n_d_e_f_i_n_i_t_e  and  _p  is 0, then really no prediction can be
       made and it is recommended to use  another  testing  algo­
       rithm.


DDIIAAGGNNOOSSTTIICCSS
       _P_r_i_m_e_s asserts that the test and the variable to be tested
       are given.

AAUUTTHHOORR
       Frank B.J. Fischer

SSEEEE AALLSSOO
       _I_n_t_O_p_e_r_a_t_i_o_n_s_(_3_)    generic interface for arithmetic inte­
                           ger operations
       _Q_u_i_c_k_P_r_i_m_e_T_e_s_t_(_3_)   quick test for small primes
       _R_a_b_i_n_M_i_l_l_e_r_(_3_)      implementation   of  the  Rabin-Miller
                           primality test algorithm
       _L_e_h_m_a_n_n_(_3_)          implementation of the Lehmann  primal­
                           ity test algorithm





































Release 0.5         Last change: 3 April 1997                   2


