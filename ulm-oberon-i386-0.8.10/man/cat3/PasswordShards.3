


PasswordShards(3)      Ulm's Oberon System      PasswordShards(3)


NNAAMMEE
       PasswordShards - authorization based on knowing a secret

SSYYNNOOPPSSIISS
       TYPE Pot = POINTER TO PotRec;
       TYPE PotRec = RECORD (Shards.PotRec) END;
       TYPE Lid = POINTER TO LidRec;
       TYPE LidRec = RECORD (Shards.LidRec) END;

       PROCEDURE CreatePot(VAR pot: Shards.Pot; password: OneWayHashes.Value);
       PROCEDURE CreateLid(VAR lid: Shards.Lid; password: OneWayHashes.Value);


DDEESSCCRRIIPPTTIIOONN
       _P_a_s_s_w_o_r_d_S_h_a_r_d_s provides lids that can be reproduced at any
       time from some secret  information,  traditionally  called
       password,  and pots that can verify these without actually
       storing the original information.

       For practical  reasons,  fixed-length,  high-entropy  hash
       values  are  preferred  over arbitrary-length, low-entropy
       messages users might  have  typed  in  for  pass  phrases.
       Applications should perform a suitable hash function, such
       as _M_D_5_(_3_), on these phrases and  use  the  generated  hash
       values with procedures of this module.

       _C_r_e_a_t_e_L_i_d  creates a lid containing the given information.
       Note that secure transmission of  lids  is  not  an  issue
       addressed by this particular implementation.

       _C_r_e_a_t_e_P_o_t  creates  a  pot  accepting  lids with the given
       information while denying any other one almost  certainly.
       Additional  salting and hashing steps are employed to hide
       the original information, so  that  matching  lids  cannot
       feasibly  be  derived  from pots alone.  As a consequence,
       _S_h_a_r_d_s_._S_u_p_p_l_y is of course not supported.

SSEEEE AALLSSOO
       _S_h_a_r_d_s_(_3_)              abstraction for authorization  pro­
                              tocols
       _O_n_e_W_a_y_H_a_s_h_e_s_(_3_)        abstraction  for one-way hash func­
                              tions
       _R_a_n_d_o_m_G_e_n_e_r_a_t_o_r_s_(_3_)    abstraction for pseudo random  num­
                              ber generation
       _P_e_r_s_i_s_t_e_n_t_O_b_j_e_c_t_s_(_3_)   abstraction for persistent objects

AAUUTTHHOORR
       Martin Hasch, University of Ulm









Release 0.5         Last change: 10 April 1998                  1


