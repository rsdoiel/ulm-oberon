


BBS(3)                 Ulm's Oberon System                 BBS(3)


NNAAMMEE
       BBS  -  implementation  of the Blum, Blum, and Shub pseudo
       random number generator

SSYYNNOOPPSSIISS
       PROCEDURE CreateSequence(VAR sequence: RandomGenerators.Sequence;
                                blumInt: IntOperations.Operand;
                                seed: IntOperations.Operand);


DDEESSCCRRIIPPTTIIOONN
       _B_B_S offers a cryptographically  secure  implementation  of
       _R_a_n_d_o_m_(_3_).  The  implementation  uses  a quadratic residue
       generator developed by Blum, Blum, and  Shub.  For  refer­
       ences look at SIAM Journal on Computing, v. 15,n. 2, 1986,
       pp.  364-383: L. Blum, M. Blum,  and  M.  Shub,  _A  _S_i_m_p_l_e
       _U_n_p_r_e_d_i_c_t_a_b_l_e  _P_s_e_u_d_o_-_R_a_n_d_o_m _N_u_m_b_e_r _G_e_n_e_r_a_t_o_r or RFC 1750,
       6.3.2. This pseudo random generator is the most simple and
       efficient  one  for  the  generation  of cryptographically
       secure random values. It is comparatively  slow  and  less
       useful  for stream ciphers, but for high security applica­
       tions, like key generation,  the  generator  is  the  best
       known.  _B_B_S  does not replace the predefined sequence _R_a_n_­
       _d_o_m_G_e_n_e_r_a_t_o_r_s_._s_t_d.

       _C_r_e_a_t_e_S_e_q_u_e_n_c_e creates and initializes a new  sequence  of
       pseudo  random  numbers.  The  sequence  of random numbers
       depends on _s_e_e_d and on the given Blum integer _b_l_u_m_I_n_t.

       A Blum integer is defined as  the  product  of  two  large
       prime numbers which are congruent to 3 modulo 4. For cryp­
       tographically secure applications the  Blum  integer  must
       have  an  appropriate length because the security rests on
       the difficulty of factoring the Blum integer.  In  Douglas
       R.  Stinson,  _C_r_y_p_t_o_g_r_a_p_h_y, 4.4 and 4.8 at least 200 deci­
       mals (about 650 bit) are recommended but  the  larger  the
       better.  If  _b_l_u_m_I_n_t  is not given, then a default 128 bit
       Blum integer is used.

       _s_e_e_d is expected to be a random  integer  which  is  rela­
       tively  prime  to _b_l_u_m_I_n_t. Relatively prime means that the
       greatest common divisor of _s_e_e_d and _b_l_u_m_I_n_t  is  1.  Good,
       hardly  reproducible  seed values are available in _R_a_n_d_o_m_­
       _G_e_n_e_r_a_t_o_r_s_._s_e_e_d, for example by using _U_n_i_x_S_e_e_d_s_(_3_).

DDIIAAGGNNOOSSTTIICCSS
       _B_B_S asserts _s_e_e_d to be not NNIILL and checks whether _s_e_e_d  is
       relatively  prime  to _b_l_u_m_I_n_t or not. If not, then _s_e_e_d is
       slightly corrected.

SSEEEE AALLSSOO
       _I_n_t_O_p_e_r_a_t_i_o_n_s_(_3_)      generic  interface  for   arithmetic
                             integer operations




Release 0.5         Last change: 16 April 1997                  1





BBS(3)                 Ulm's Oberon System                 BBS(3)


       _R_a_n_d_o_m_G_e_n_e_r_a_t_o_r_s_(_3_)   general  abstraction for pseudo ran­
                             dom number generators
       _U_n_i_x_S_e_e_d_s_(_3_)          generation of  seed  values  in  the
                             UNIX operating system

AAUUTTHHOORR
       Frank B.J. Fischer


















































Release 0.5         Last change: 16 April 1997                  2


