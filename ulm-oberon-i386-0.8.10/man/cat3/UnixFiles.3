UnixFiles(3)                  Ulm's Oberon System                 UnixFiles(3)



[1mNAME[0m
       UnixFiles - stream implementation for UNIX files

[1mSYNOPSIS[0m
       CONST illegalMode = 0; (* mode doesn't equal one of legal modes given below *)
       CONST invalidFd = 1; (* invalid file descriptor given to OpenFd *)
       CONST errorcodes = 2;
       TYPE ErrorCode = SHORTINT;
       TYPE ErrorEvent = POINTER TO ErrorEventRec;
       TYPE ErrorEventRec =
          RECORD
             (Events.EventRec)
             errorcode: ErrorCode;
          END;
       VAR error: Events.EventType;
       VAR errormsg: ARRAY errorcodes OF Events.Message;

       CONST read = 0; write = 1; rdwr = 2; create = 4; condcreate = 8;
       TYPE Mode = SHORTINT; (* read, write, rdwr,
                                read+create, write+create, rdwr+create,
                                read+condcreate, write+condcreate, rdwr+condcreate
                             *)
       TYPE Stream = POINTER TO StreamRec;
       TYPE StreamRec =
          RECORD
             (Streams.StreamRec)
             file: SysTypes.File; (* readonly *)
             interrupted: BOOLEAN; (* EINTR for last operation? *)
             retry: BOOLEAN; (* retry on interrupts? *)
          END;

       PROCEDURE Open(VAR s: Streams.Stream; filename: ARRAY OF CHAR;
                      mode: Mode; bufmode: Streams.BufMode;
                      errors: RelatedEvents.Object) : BOOLEAN;
       PROCEDURE OpenFd(VAR s: Streams.Stream; fd: SysTypes.File;
                        mode: Mode; bufmode: Streams.BufMode;
                        errors: RelatedEvents.Object) : BOOLEAN;


[1mDESCRIPTION[0m
       [4mUnixFiles[24m  provides  a stream interface to UNIX files and file descrip-
       tors.  The stream implementation supports the messages of  [4mStreamCondi-[0m
       [4mtions(3)[24m.   [4mOpen[24m opens the given 0X-terminated [4mfilename[24m for access mode
       [4mmode[24m.  Valid accessing modes are [4mread[24m (read-only access), [4mwrite[24m (write-
       only  access)  and  [4mrdwr[24m  (read and write access).  [4mcreate[24m, if added to
       [4mmode[24m, causes [4mfilename[24m to be created (or to  be  truncated  if  [4mfilename[0m
       exists  already).  Alternatively, [4mcondcreate[24m may be added to [4mmode[24m which
       only causes [4mfilename[24m to be created when it doesn't exist.

       The buffering mode [4mbufmode[24m should  be  one  of  [4mStreams.onebuf[24m  (normal
       buffering),  [4mStreams.bufpool[24m  (buffer cache), [4mStreams.nobuf[24m (unbuffered
       and thus very inefficient), and [4mStreams.linebuf[24m (suitable for line ori-
       ented  terminal  input  and output).  [4mOpenFd[24m opens a stream for a given
       file descriptor.  The [4mmode[24m of the stream must be compatible to the mode
       of  [4mfd[24m.   Streams  returned  by  [4mOpen[24m  and  [4mOpenFd[24m  are  of  type [4mUnix-[0m
       [4mFiles.Stream[24m.

       [4mUnixFiles[24m connects the standard streams [4mStreams.stdin[24m,  [4mStreams.stdout[24m,
       and  [4mStreams.stderr[24m to the file descriptors 0, 1, and 2 during initial-
       ization.  The buffering mode of  [4mStreams.stdin[24m  and  [4mStreams.stdout[24m  is
       [4mStreams.linebuf[24m  in case of terminal devices and [4mStreams.onebuf[24m for all
       other files.  [4mStreams.stderr[24m is unbuffered.  The access  mode  is  [4mrdwr[0m
       for [4mStreams.stdin[24m and [4mStreams.stdout[24m and [4mwrite[24m for [4mStreams.stderr[24m.

[1mDIAGNOSTICS[0m
       [4mOpen[24m  and [4mOpenFd[24m pass the [4merrors[24m parameter together with an error event
       to [4mRelatedEvents[24m in case of errors.   Further,  they  return  [1mFALSE  [22mon
       failure.  Following errors are generated by [4mUnixFiles[24m itself:
       [4millegalMode[24m   An  unknown  mode was given to [4mOpen[24m or [4mOpenFd[24m.  Note that
                     [4mOpenFd[24m doesn't accept the modifiers [4mcreate[24m or [4mcondcreate[24m.
       [4minvalidFd[24m     [4mOpenFd[24m  checks  the given file descriptor for validity by
                     executing an [4mstat(2)[24m system call and returns  this  error
                     on failure.

       Errors  during  the  access  of the stream are converted into events of
       [4mRelatedEvents[24m.  By default, these events are being queued.

       [4mUnixFiles[24m uses some interruptible system calls.  By default, operations
       are  retried in case of interruptions.  Optionally, the [4mretry[24m field may
       be set to [1mFALSE[22m.  In this case interruptions may lead to error  events.
       The  [4minterrupt[24m  field  indicates  whether the last operation was inter-
       rupted or not.

[1mSEE ALSO[0m
       [4mRelatedEvents(3)[24m   error event handling
       [4mStreams(3)[24m         stream operations
       [4mSysIO(3)[24m           UNIX system calls for input and output

[1mBUGS[0m
       Some UNIX versions offer an [4mappend[24m mode: each write access is  appended
       to the file independent of the current position.  [4mUnixFiles[24m cannot sup-
       port this access mode on base  of  [4mStreams[24m  because  implicit  position
       changes would clash with the buffering system.

       [4mUnixFiles[24m  checks  the opened file for being seekable.  In case of spe-
       cial devices this cannot be examined in all cases without trying a seek
       operation.   This,  however,  is  not  done  to avoid unnecessary error
       events.



Release 0.5                Last change: 10 July 2003              UnixFiles(3)
