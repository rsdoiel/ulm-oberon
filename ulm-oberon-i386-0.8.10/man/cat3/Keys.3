


Keys(3)                Ulm's Oberon System                Keys(3)


NNAAMMEE
       Keys - key-based total order relations

SSYYNNOOPPSSIISS
       TYPE Key = POINTER TO KeyRec;
       TYPE KeyRec = RECORD (PersistentDisciplines.ObjectRec) END;
       TYPE Value = POINTER TO ValueRec;
       TYPE ValueRec = RECORD (PersistentDisciplines.ObjectRec) END;
       ExtractProc = PROCEDURE (object: Services.Object;
                                key: Key; VAR keyval: Value);
       CompareProc = PROCEDURE (key: Key; keyval1, keyval2: Value) : INTEGER;

       PROCEDURE DefineService(name: ARRAY OF CHAR;
                               type: Services.Type;
                               compare: CompareProc;
                               VAR service: Services.Service);
       PROCEDURE Init(key: Key; service: Services.Service);
       PROCEDURE GetService(key: Key; VAR service: Services.Service);
       PROCEDURE Support(service: Services.Service;
                         for: Services.Type;
                         extract: ExtractProc);
       PROCEDURE Supported(object: Services.Object; key: Key) : BOOLEAN;
       PROCEDURE Compare(key: Key; object1, object2: Services.Object) : INTEGER;
       PROCEDURE Extract(object: Services.Object; key: Key; VAR keyval: Value);
       PROCEDURE Compatible(keyval: Value; key: Key) : BOOLEAN;
       PROCEDURE CompareKeyValues(key: Key; keyval1, keyval2: Value) : INTEGER;


DDEESSCCRRIIPPTTIIOONN
       A key consists of

       ·      a  set  of  attributes  which can be extracted from
              various kinds of objects, and

       ·      the definition of a total order relation for values
              of that key.

       A key allows to sort a set of heterogeneous objects if the
       specific key is supported for all kinds of objects in  the
       set.   Note  that  keys are not necessarily identifying in
       the sense of the relational database theory and that  more
       than  one  key  may  be supported for one kind of objects.
       Using the mechanism of  _S_e_r_v_i_c_e_s_(_3_),  it  is  possible  to
       define  and support keys for objects types without modify­
       ing their associated modules.

       Both, keys and key values, are  persistent  objects,  i.e.
       extensions of _P_e_r_s_i_s_t_e_n_t_D_i_s_c_i_p_l_i_n_e_s_._O_b_j_e_c_t.

   CClliieenntt rroolleess
       There  are  four  types  of modules in the context of _K_e_y_s
       (_X_X_X, _Y_Y_Y, and _Z_Z_Z are place holders for arbitrary names):
       _X_X_X_s             a  module  which  defines an extension of
                        _S_e_r_v_i_c_e_s_._O_b_j_e_c_t named _X_X_X_s_._X_X_X but  needs



Release 0.5       Last change: 16 September 1996                1





Keys(3)                Ulm's Oberon System                Keys(3)


                        not to be aware of _K_e_y_s.
       _Y_Y_Y_K_e_y_s          defines  a key, i.e. an attribute set and
                        a total order relation.  Note  that  this
                        type  of  modules  does  not need to know
                        anything about the later to be  supported
                        object  types  (e.g.  _X_X_X_s).   _Y_Y_Y_K_e_y_s is
                        responsible for providing  the  interface
                        procedures  of  _P_e_r_s_i_s_t_e_n_t_O_b_j_e_c_t_s for its
                        extensions of _K_e_y and _V_a_l_u_e.
       _Y_Y_Y_K_e_y_F_o_r_X_X_X_s    defines how to  extract  a  specific  key
                        (e.g.  _Y_Y_Y_K_e_y_s_._K_e_y)  from a specific kind
                        of objects (e.g. _X_X_X_s_._X_X_X).
       _Z_Z_Z              is a module which compares  heterogeneous
                        objects by using a key.  This module does
                        not need to know any  object-specific  or
                        key-specific details.

   DDeeffiinniittiioonn ooff aa kkeeyy
       Modules  of  the  type  _Y_Y_Y_K_e_y_s have to call _D_e_f_i_n_e_S_e_r_v_i_c_e
       during their initialization.   The  name  of  the  service
       should be that of the module (e.g. "YYYKeys"), _t_y_p_e is the
       _S_e_r_v_i_c_e_s_._T_y_p_e  of  the   associated   key   values   (e.g.
       _Y_Y_Y_K_e_y_s_._V_a_l_u_e).   The  _c_o_m_p_a_r_e  interface procedure has to
       define a total order relation for the key  values  defined
       by  _Y_Y_Y_K_e_y_s.   _D_e_f_i_n_e_S_e_r_v_i_c_e creates and returns a service
       which has later to be passed to _I_n_i_t for each created  key
       (of type _Y_Y_Y_K_e_y_s_._K_e_y).

       Note that _K_e_y_s guarantees that the key value parameters of
       the  _c_o_m_p_a_r_e  interface  procedure   are   extensions   of
       _Y_Y_Y_K_e_y_s_._V_a_l_u_e.  The returned integer value of _c_o_m_p_a_r_e must
       be less than, equal to, or greater than zero if _k_e_y_v_a_l_1 is
       found, respectively, to be less than, equal to, or greater
       than _k_e_y_v_a_l_2.

       _G_e_t_S_e_r_v_i_c_e allows to retrieve the associated service of  a
       key.

   SSuuppppoorrttiinngg aa kkeeyy
       Modules  which  support a specific key for a specific kind
       of objects (e.g. _Y_Y_Y_K_e_y_F_o_r_X_X_X_s) have to call _S_u_p_p_o_r_t  dur­
       ing their initialization time to pass their _e_x_t_r_a_c_t inter­
       face procedure.  The  _s_e_r_v_i_c_e  parameter  is  the  service
       named  after  that  module  which  defines  the  key (e.g.
       "YYYKeys"), and _f_o_r is the _S_e_r_v_i_c_e_s_._T_y_p_e of _X_X_X_s_._X_X_X.  The
       _e_x_t_r_a_c_t  interface procedure gets an object which is guar­
       anteed to be an extension of _X_X_X_s_._X_X_X, a key which  is  an
       extension  of  _Y_Y_Y_K_e_y_s_._K_e_y,  and has to return a key value
       which must be an extension of _Y_Y_Y_K_e_y_s_._V_a_l_u_e.

       Note that _K_e_y_s supports  implicitly  all  keys  for  their
       associated key values.





Release 0.5       Last change: 16 September 1996                2





Keys(3)                Ulm's Oberon System                Keys(3)


   UUssiinngg kkeeyyss
       _C_o_m_p_a_r_e  allows  to  compare  two objects by using _k_e_y and
       returns an integer value which is less than, equal to,  or
       greater than zero if _o_b_j_e_c_t_1 is found, respectively, to be
       less than, equal to, or  greater  than  _o_b_j_e_c_t_2  regarding
       _k_e_y.   Note  that _C_o_m_p_a_r_e requires _k_e_y to be supported for
       the types of _o_b_j_e_c_t_1 and _o_b_j_e_c_t_2.  This may be checked for
       by _S_u_p_p_o_r_t_e_d.

       Key  values  may  be compared not only by _C_o_m_p_a_r_e but also
       (somewhat faster) directly by _C_o_m_p_a_r_e_K_e_y_V_a_l_u_e_s.  Note that
       both key values must be compatible to the given key.  This
       may be checked for by _C_o_m_p_a_t_i_b_l_e.

       _E_x_t_r_a_c_t allows to extract a key value for _k_e_y from _o_b_j_e_c_t.
       NNIILL  is  returned  if _k_e_y is not supported for the type of
       _o_b_j_e_c_t.

DDIIAAGGNNOOSSTTIICCSS
       All kinds of errors lead to failed  assertions  (with  the
       exception of _E_x_t_r_a_c_t which returns NNIILL):

       ·      _D_e_f_i_n_e_S_e_r_v_i_c_e  checks  _t_y_p_e  and  _c_o_m_p_a_r_e for being
              non-NNIILL.

       ·      _I_n_i_t asserts that _s_e_r_v_i_c_e is non-NNIILL.

       ·      _G_e_t_S_e_r_v_i_c_e requires _k_e_y to be initialized by  _I_n_i_t.

       ·      _S_u_p_p_o_r_t  asserts that _s_e_r_v_i_c_e originates from _K_e_y_s,
              i.e. that _s_e_r_v_i_c_e is the return value of  a  former
              call of _D_e_f_i_n_e_S_e_r_v_i_c_e.

       ·      _C_o_m_p_a_r_e  requires  that  _k_e_y  is  supported for the
              types of _o_b_j_e_c_t_1 and _o_b_j_e_c_t_2.

       ·      _C_o_m_p_a_r_e_K_e_y_V_a_l_u_e_s checks that both key values,  _k_e_y_­
              _v_a_l_1 and _k_e_y_v_a_l_2, are compatible to _k_e_y.

       ·      The return value of the _e_x_t_r_a_c_t interface procedure
              is always checked to be an extension of the  corre­
              sponding key value type (e.g. _Y_Y_Y_K_e_y_s_._V_a_l_u_e).

SSEEEE AALLSSOO
       _P_e_r_s_i_s_t_e_n_t_O_b_j_e_c_t_s_(_3_)   definition of persistent objects
       _S_e_r_v_i_c_e_s_(_3_)            type system and services











Release 0.5       Last change: 16 September 1996                3


