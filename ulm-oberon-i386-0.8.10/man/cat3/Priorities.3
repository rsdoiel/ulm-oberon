


Priorities(3)          Ulm's Oberon System          Priorities(3)


NNAAMMEE
       Priorities - priority system for events

SSYYNNOOPPSSIISS
       CONST region = 10;
       CONST gap = 10;

       TYPE Priority = INTEGER;

       VAR base: Priority;
       VAR default: Priority;
       VAR message: Priority;
       VAR syserrors: Priority;
       VAR liberrors: Priority;
       VAR assertions: Priority;
       VAR error: Priority;
       VAR interrupts: Priority;
       VAR storage: Priority;
       VAR rtserrors: Priority;
       VAR fatal: Priority;
       VAR fatalsignals: Priority;
       VAR bug: Priority;
       VAR taskswitch: Priority;
       VAR exit: Priority;


DDEESSCCRRIIPPTTIIOONN
       _P_r_i_o_r_i_t_i_e_s  defines  the  priority  system  of  the Oberon
       library per initialized variables.   The  original  module
       can  be  copied  and modified to match the needs of a spe­
       cific application.  This is necessary in cases where  e.g.
       library  errors  should  get  higher  priority  than asyn­
       chronous interrupts.

       The priority values are not consecutive  to  be  open  for
       extensions.   Each  priority  given  below  defines a base
       value of a priority region.  The region size is defined by
       _r_e_g_i_o_n, e.g. library error priorities range from _l_i_b_e_r_r_o_r_s
       to _l_i_b_e_r_r_o_r_s_+_r_e_g_i_o_n_-_1.  To allow insertion of new priority
       levels  there  is  a minimum distance between two priority
       regions (_g_a_p).

       Some rules for ordering priority values:

       (1)    Events with higher severity should have higher pri­
              ority  levels,  e.g. segmentation violations should
              be at higher level than the interrupts (break key).

       (2)    Some  events  allow  a  level-oriented  generalized
              error handling (_E_r_r_o_r_s_(_3_)).  These events  must  be
              at  higher priority than those events which lead to
              errors.  E.g. _e_r_r_o_r should be  at  higher  priority
              than _l_i_b_e_r_r_o_r_s, _f_a_t_a_l at higher priority than _s_t_o_r_­
              _a_g_e, and _b_u_g at higher priority than  _f_a_t_a_l_s_i_g_n_a_l_s.



Release 0.5       Last change: 13 September 1996                1





Priorities(3)          Ulm's Oberon System          Priorities(3)


       (3)    Events raised at an higher abstraction level should
              have higher priority than low-level  events.   E.g.
              _l_i_b_e_r_r_o_r_s  should be at higher priority than _s_y_s_e_r_­
              _r_o_r_s.





















































Release 0.5       Last change: 13 September 1996                2





Priorities(3)          Ulm's Oberon System          Priorities(3)


       The following list of prioritities is in ascending  order.
       _b_a_s_e           Current  priority at beginning of execution
                      (after initialization of _E_v_e_n_t_s).  This  is
                      the  lowest priority possible during execu­
                      tion.  Every event with priority less  than
                      _b_a_s_e is ignored automatically.
       _d_e_f_a_u_l_t        Default  priority  of events.  The priority
                      of  an   event   can   be   changed   using
                      _E_v_e_n_t_s_._S_e_t_P_r_i_o_r_i_t_y.
       _m_e_s_s_a_g_e        Priority  of messages which do not indicate
                      an error.
       _s_y_s_e_r_r_o_r_s      Priority of system call errors.  It is con­
                      vention  in  the Oberon system library that
                      events are raised for failed  system  calls
                      (which are ignored by default).
       _l_i_b_e_r_r_o_r_s      Priority  of  library  errors,  e.g.  usage
                      errors or  failed  system  calls.   Library
                      errors  should  have  higher  priority than
                      _s_y_s_e_r_r_o_r_s.
       _a_s_s_e_r_t_i_o_n_s     Priority  of   failed   assertions   inside
                      library.  Conventionally, failed assertions
                      are handled by _A_s_s_e_r_t_i_o_n_s_(_3_).
       _e_r_r_o_r          Priority of (application) error messages or
                      warnings.
       _i_n_t_e_r_r_u_p_t_s     Priority  of  asynchronous  interrupts like
                      break key, alarm clock, etc.
       _s_t_o_r_a_g_e        Priority of "out of space" events (_S_y_s_S_t_o_r_­
                      _a_g_e_(_3_))
       _r_t_s_e_r_r_o_r_s      Priority of runtime errors.
       _f_a_t_a_l          Priority  of  fatal errors which lead to an
                      error message and program termination.
       _f_a_t_a_l_s_i_g_n_a_l_s   Priority of fatal signals.  These are  UNIX
                      signals  where  return would cause an infi­
                      nite  loop,  e.g.  segmentation  violation,
                      alignment fault, and illegal instruction.
       _b_u_g            Priority  of  bugs and (failed) assertions.
                      Bugs are error messages followed by program
                      termination (with core dump if possible).
       _t_a_s_k_s_w_i_t_c_h     This priority was used formerly by _T_a_s_k_s_(_3_)
                      but is now obsolete.
       _e_x_i_t           Priority  of  exit  (_S_y_s_P_r_o_c_e_s_s_._E_x_i_t)   and
                      abort  (_S_y_s_P_r_o_c_e_s_s_._A_b_o_r_t).  Actions on this
                      priority level should be minimized and  (if
                      possible) error-free.

SSEEEE AALLSSOO
       _A_s_s_e_r_t_i_o_n_s_(_3_)   handling of failed assertions
       _C_o_n_c_l_u_s_i_o_n_s_(_3_)  standardized handling of error events
       _E_v_e_n_t_s_(_3_)       priority driven event handler
       _S_y_s_P_r_o_c_e_s_s_(_3_)   handling of program termination (_e_x_i_t)
       _R_T_E_r_r_o_r_s_(_3_)     raise of runtime errors (_r_t_s_e_r_r_o_r_s)
       _S_y_s_E_r_r_o_r_s_(_3_)    standardized  handling  of  system  errors
                       (_s_y_s_e_r_r_o_r_s)




Release 0.5       Last change: 13 September 1996                3





Priorities(3)          Ulm's Oberon System          Priorities(3)


       _S_y_s_S_i_g_n_a_l_s_(_3_)   UNIX signals (_i_n_t_e_r_r_u_p_t_s and _f_a_t_a_l_s_i_g_n_a_l_s)
       _S_y_s_S_t_o_r_a_g_e_(_3_)   memory management (_s_t_o_r_a_g_e)
       _T_a_s_k_s_(_3_)        task management

FFIILLEESS
       _/_u_s_r_/_l_o_c_a_l_/_l_i_b_/_o_b_e_r_o_n_/_d_e_f_/_P_r_i_o_r_i_t_i_e_s_._o_d   definition    of
                                                 _P_r_i_o_r_i_t_i_e_s
       _/_u_s_r_/_l_o_c_a_l_/_l_i_b_/_o_b_e_r_o_n_/_d_e_f_/_P_r_i_o_r_i_t_i_e_s_._o_m   module of _P_r_i_o_r_­
                                                 _i_t_i_e_s
















































Release 0.5       Last change: 13 September 1996                4


