UnixDomainSockets(3)          Ulm's Oberon System         UnixDomainSockets(3)



[1mNAME[0m
       UnixDomainSockets - create and access UNIX domain sockets

[1mSYNOPSIS[0m
       TYPE Socket = POINTER TO SocketRec;
       TYPE SocketRec = RECORD (UnixSockets.SocketRec) END;

       PROCEDURE Open(VAR s: Streams.Stream; pathname: ARRAY OF CHAR;
                      bufmode: Streams.BufMode;
                      errors: RelatedEvents.Object) : BOOLEAN;
       PROCEDURE CreateOpenCondition(VAR condition: Conditions.Condition;
                                     pathname: ARRAY OF CHAR);
       PROCEDURE TestAndOpen(VAR s: Streams.Stream;
                             condition: Conditions.Condition;
                             bufmode: Streams.BufMode;
                             errors: RelatedEvents.Object) : BOOLEAN;

       PROCEDURE CreateSomeSocket(VAR socket: Socket;
                                  VAR pathname: ARRAY OF CHAR;
                                  errors: RelatedEvents.Object) : BOOLEAN;
       PROCEDURE Listen(VAR socket: Socket; pathname: ARRAY OF CHAR;
                        errors: RelatedEvents.Object) : BOOLEAN;
       PROCEDURE Remove(socket: Socket) : BOOLEAN;

       PROCEDURE Accept(socket: Socket;
                        VAR s: Streams.Stream; bufmode: Streams.BufMode) : BOOLEAN;
       PROCEDURE CreateAcceptCondition(VAR condition: Conditions.Condition;
                                       socket: Socket);

       PROCEDURE CreateAddress(VAR address: Networks.Address; path: ARRAY OF CHAR);
       PROCEDURE ConvertAddress(address: Networks.Address; VAR path: ARRAY OF CHAR);
       PROCEDURE SetAddress(address: Networks.Address; path: ARRAY OF CHAR);


[1mDESCRIPTION[0m
       [4mUnixDomainSockets[24m  supports  [4mStreams(3)[24m and [4mNetworks(3)[24m for UNIX domain
       sockets.  UNIX domain addresses are pathnames.   Two  independent  pro-
       cesses on the same machine can communicate by specifying the same path-
       name (comparable to named pipes).

       [4mOpen[24m tries to connect to an already created socket which is  associated
       to [4mpathname[24m.  [4mCreateOpenCondition[24m and [4mTestAndOpen[24m my be used like their
       counterparts of [4mNetworks(3)[24m for non-blocking openings.

       [4mListen[24m creates a socket which may be later used to  wait  for  incoming
       connections.   [4mListen[24m  creates  [4mpathname[24m as a special entry in the file
       system of type [4mSysStat.socket[24m.  [4mCreateSomeSocket[24m works like [4mListen[24m  but
       selects an unique pathname (which is returned by [4mUnixTmpNames(3)[24m).

       [4mRemove[24m  removes  the pathname which is associated with [4msocket[24m.  [4mUnixDo-[0m
       [4mmainSockets[24m removes all sockets on termination (see [4mProcess(3)[24m).

       [4mAccept[24m waits for incoming connections for [4msocket[24m.  The socket must have
       been created and prepared by [4mListen[24m or [4mCreateSomeSocket[24m.  The resulting
       stream [4ms[24m is connected with the new communication partner.

       [4mAcceptCondition[24m creates a condition which evaluates to [1mTRUE [22mif a subse-
       quent [4mAccept[24m would not block for [4msocket[24m.

       [4mUnixDomainSockets[24m  supports the interface of [4mNetworks(3)[24m: [4mCreateAddress[0m
       takes a path name and converts it into a newly created general  network
       address.   [4mConvertAddress[24m  allows  the  reverse conversion but requires
       [4maddress[24m to be returned earlier by [4mCreateAddress[24m.  [4mSetAddress[24m allows  to
       change  a  network address.  Again, [4maddress[24m must originate from [4mUnixDo-[0m
       [4mmainSockets[24m.  General network addresses are  persistent  objects  which
       allow the interface of [4mNetworks(3)[24m to be used which is independent from
       a particular network implementation.

[1mDIAGNOSTICS[0m
       All procedures return [1mFALSE [22mand relate their error events to [4merrors[24m  in
       error case.

       Errors  are converted into events of [4mRelatedEvents[24m.  [4mAccept[24m relates its
       errors to [4msocket[24m.  By default, these events are being queued.

       Passing an invalid general network address (i.e. an address which  does
       not  originate  from [4mUnixDomainSockets[24m) to [4mConvertAddress[24m or [4mSetAddress[0m
       causes a type guard to fail.

[1mSEE ALSO[0m
       [4munix(4F)[24m               UNIX domain protocol family
       [4mConditions(3)[24m          interface for conditions
       [4mNetworks(3)[24m            general abstraction for network connections
       [4mPersistentObjects(3)[24m   input and output of persistent objects
       [4mRelatedEvents(3)[24m       handling of error events
       [4mStreams(3)[24m             stream operations
       [4mUnixSockets(3)[24m         generic stream interface for sockets

[1mBUGS[0m
       Path names are limited to 108 characters due to a limit of the  operat-
       ing system.  Longer path names are truncated silently.



Release 0.5                Last change: 10 July 2003      UnixDomainSockets(3)
