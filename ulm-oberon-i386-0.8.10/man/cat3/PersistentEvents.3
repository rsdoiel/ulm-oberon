


PersistentEvents(3)    Ulm's Oberon System    PersistentEvents(3)


NNAAMMEE
       PersistentEvents - support of persistent events

SSYYNNOOPPSSIISS
       TYPE WriteProc = PROCEDURE (s: Streams.Stream; event: Events.Event) : BOOLEAN;
       TYPE ReadProc = PROCEDURE (s: Streams.Stream;
                                  VAR event: Events.Event) : BOOLEAN;
       TYPE Interface = POINTER TO InterfaceRec;
       TYPE InterfaceRec =
          RECORD
             (Objects.ObjectRec)
             write: WriteProc;
             read: ReadProc;
          END;

       CONST bogusInput = 0; unknownEventType = 1; errors = 2;
       TYPE ErrorEvent = POINTER TO ErrorEventRec;
       TYPE ErrorEventRec =
          RECORD
             (Events.EventRec)
             code: SHORTINT;
             typeName: ARRAY 80 OF CHAR; (* in case of unknownEventType *)
          END;
       VAR errormsg: ARRAY errors OF Events.Message;
       VAR error: Events.EventType;

       PROCEDURE Init(eventType: Events.EventType;
                      name: ARRAY OF CHAR; if: Interface);
       PROCEDURE Write(s: Streams.Stream; event: Events.Event) : BOOLEAN;
       PROCEDURE Read(s: Streams.Stream; VAR event: Events.Event) : BOOLEAN;
       PROCEDURE WriteErrors(s: Streams.Stream;
                             errors: RelatedEvents.Object) : BOOLEAN;
       PROCEDURE ReadErrors(s: Streams.Stream;
                            VAR errors: RelatedEvents.Object) : BOOLEAN;


DDEESSCCRRIIPPTTIIOONN
       _P_e_r_s_i_s_t_e_n_t_E_v_e_n_t_s supports the exchange of events and error
       lists through  _P_e_r_s_i_s_t_e_n_t_O_b_j_e_c_t_s_(_3_)  or  similar  methods.
       Events  are not persistent objects in the sense of _P_e_r_s_i_s_­
       _t_e_n_t_O_b_j_e_c_t_s_(_3_)  but  in  cases  of  a  close  relationship
       between  event record types and event types it is possible
       to attach the associated  marshalling  procedures  at  the
       event  type.  In cases where no support for persistence is
       given, only texts of error messages (including the  output
       of _E_r_r_o_r_s_._W_r_i_t_e) are preserved.

       _I_n_i_t  allows  to attach marshalling procedures to an event
       type which will be later used if this event type is  given
       in  the _t_y_p_e component of the event record.  The interface
       is expected to meet following specification:
       _w_r_i_t_e: PPRROOCCEEDDUURREE(_s: _S_t_r_e_a_m_s_._S_t_r_e_a_m; _e_v_e_n_t: _E_v_e_n_t_s_._E_v_e_n_t) :
            BBOOOOLLEEAANN;
            convert  the  given  event  record into a sequence of



Release 0.5       Last change: 13 December 1995                 1





PersistentEvents(3)    Ulm's Oberon System    PersistentEvents(3)


            bytes.  Note that the basic components of  the  event
            record  (i.e.  _m_e_s_s_a_g_e and _t_y_p_e) are not saved by the
            calling environment and that there  is  no  guarantee
            about  the type of _e_v_e_n_t.  FFAALLSSEE is to be returned in
            case of errors.
       _r_e_a_d:    PPRROOCCEEDDUURREE(_s:    _S_t_r_e_a_m_s_._S_t_r_e_a_m;    VVAARR     _e_v_e_n_t:
            _E_v_e_n_t_s_._E_v_e_n_t) : BBOOOOLLEEAANN;
            create and restore the event from the input.

       _W_r_i_t_e  outputs  the  given event to the stream _s in a form
       which may be later read by _R_e_a_d.

       _W_r_i_t_e_E_r_r_o_r_s is intended for error objects  which  have  an
       event  queue (see _R_e_l_a_t_e_d_E_v_e_n_t_s_(_3_)) and writes the list of
       queued error events which is attached  to  _e_r_r_o_r_s  to  the
       given  stream.   Despite  to  _C_o_n_c_l_u_s_i_o_n_s, the error queue
       gets not removed afterwards.   A  error  list  written  by
       _W_r_i_t_e_E_r_r_o_r_s may be later read by _R_e_a_d_E_r_r_o_r_s.

DDIIAAGGNNOOSSTTIICCSS
       All  procedures  return FFAALLSSEE in case of failures.  Errors
       are related to the given streams.
       _b_o_g_u_s_I_n_p_u_t         is raised by _R_e_a_d  (or  _R_e_a_d_E_r_r_o_r_s)  in
                          case  of  invalid input (which does not
                          look as it would have been generated by
                          the corresponding _W_r_i_t_e operation).
       _u_n_k_n_o_w_n_E_v_e_n_t_T_y_p_e   is  raised  by  _R_e_a_d (or _R_e_a_d_E_r_r_o_r_s) if
                          the event type is not supported by  the
                          reading  side even after trying to load
                          the necessary modules dynamically.

SSEEEE AALLSSOO
       _E_r_r_o_r_s_(_3_)              support of event  specific  format­
                              ting procedures
       _E_v_e_n_t_s_(_3_)              general abstraction for events
       _P_e_r_s_i_s_t_e_n_t_O_b_j_e_c_t_s_(_3_)   input   and  output  of  persistent
                              objects
       _R_e_l_a_t_e_d_E_v_e_n_t_s_(_3_)       object oriented error handling  and
                              error lists
       _R_e_m_o_t_e_E_v_e_n_t_s_(_3_)        allows  event  types to be exported
                              and imported
       _S_t_r_e_a_m_s_(_3_)             abstraction for byte oriented input
                              and output

BBUUGGSS
       Unlike  _P_e_r_s_i_s_t_e_n_t_O_b_j_e_c_t_s_(_3_), _P_e_r_s_i_s_t_e_n_t_E_v_e_n_t_s is not able
       to skip events in the input correctly if it is  unable  to
       read  it (error _u_n_k_n_o_w_n_E_v_e_n_t_T_y_p_e).  Thus, events should be
       embedded in persistent objects (in the sense of _P_e_r_s_i_s_t_e_n_­
       _t_O_b_j_e_c_t_s_(_3_)) if error recovery is a concern.







Release 0.5       Last change: 13 December 1995                 2


