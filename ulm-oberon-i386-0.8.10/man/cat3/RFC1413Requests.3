RFC1413Requests(3)            Ulm's Oberon System           RFC1413Requests(3)



[1mNAME[0m
       RFC1413Requests - request identification from RFC 1413 servers

[1mSYNOPSIS[0m
       CONST connectFailed = 0;
       CONST sendFailed = 1;
       CONST gotNoResponse = 2;
       CONST invalidResponse = 3;
       CONST invalidPort = 4;
       CONST noUser = 5;
       CONST unknownError = 6;
       CONST hiddenUser = 7;
       CONST otherError = 8;
       CONST timeoutConnect = 9;
       CONST timeoutResponse = 10;
       CONST errors = 11;
       TYPE ErrorCode = SHORTINT;
       TYPE ErrorEvent = POINTER TO ErrorEventRec;
       TYPE ErrorEventRec =
          RECORD
             (Events.EventRec)
             errorcode: ErrorCode;
             foreignAddress: IPv4Addresses.SocketAddress;
             localAddress: IPv4Addresses.SocketAddress;
             response: ARRAY 512 OF CHAR;
          END;
       VAR error: Events.EventType;
       VAR errormsg: ARRAY errors OF Events.Message;

       PROCEDURE GetIdent(foreignAddress: IPv4Addresses.SocketAddress;
                          localAddress: IPv4Addresses.SocketAddress;
                          timelimit: Times.Time;
                          VAR opsys, charset: ARRAY OF CHAR;
                          VAR ident: ARRAY OF CHAR;
                          VAR errors: RelatedEvents.Object) : BOOLEAN;


[1mDESCRIPTION[0m
       [4mRFC1413Requests[24m  support  client  queries  to RFC 1413 servers. A query
       specifies the foreign and local port number of an IPv4  TCP  connection
       and  is  directed  to port 113 at the IP address of the foreign server.
       If supported by the foreign server and successful, an identification is
       returned,  consisting of an operating system, character set, and a user
       identification.

       [4mGetIdent[24m sends a query to the host specified  in  [4mforeignAddress[24m  using
       the  port numbers out of [4mforeignAddress[24m and [4mlocalAddress[24m. The [4mtimelimit[0m
       parameter specifies how long [4mGetIdent[24m will wait until it gives up.  [1mNIL[0m
       may  be passed to [4mtimelimit[24m. In this case, a default value of 5 seconds
       is taken.

       A successful response from an RFC 1413 server  includes  three  fields:
       the  specification  of an operating system (e.g. ``UNIX''), a character
       set (e.g. ``US-ASCII''), and an identification string which  is  repre-
       sented in the character set specified by [4mcharset[24m.

       In  case  of  failures,  [1mFALSE  [22mis  returned, and error events are made
       available through [4merrors[24m.

[1mDIAGNOSTICS[0m
       Following error codes are generated by [4mRFC1413Requests[24m beside the error
       events returned by the underlying modules:
       [4mconnectFailed[24m     The  connect  operation to the remote RFC 1413 server
                         failed.  Most likely no RFC 1413 server is running on
                         the given server.
       [4msendFailed[24m        A  connection was successful but it was impossible to
                         send a request.
       [4mgotNoResponse[24m     A request was successfully sent but no  response  was
                         received.
       [4minvalidResponse[24m   A  request was successfully sent but the response did
                         not conform to the response syntax specified  in  RFC
                         1413.
       [4minvalidPort[24m       The remote RFC 1413 server complained that either the
                         local or foreign port was improperly specified.
       [4mnoUser[24m            The remote RFC 1413 server complained that  the  con-
                         nection  specified  by the port pair is not currently
                         in use or currently  not  owned  by  an  identifiable
                         entity.
       [4munknownError[24m      The  remote  RFC  1413  returned  another unspecified
                         error.
       [4mhiddenUser[24m        The remote RFC 1413 server complained that the server
                         was  able  to identify the user of this port, but the
                         information was not returned at the  request  of  the
                         user.
       [4motherError[24m        The  remote  RFC  1413  returned a non-standard error
                         message.
       [4mtimeoutConnect[24m    A timeout occurred during the connection phase.  This
                         is most likely due to a firewall that dropped the SYN
                         packet.
       [4mtimeoutResponse[24m   A timeout occurred while waiting for the response.

[1mEXAMPLE[0m
       Following code snippets assume following variables:

       VAR
          errors: RelatedEvents.Object;
          port: INTEGER;
          socket: IPv4TCPSockets.Socket;
          s: Streams.Stream;
          local, peer: IPv4Addresses.SocketAddress;
          opsys, charset, ident: ARRAY 65 OF CHAR;

       The listening socket is set up as usual.  Note  that  we  retrieve  the
       local address by [4mIPv4TCPSockets.GetName[24m:

       NEW(errors); RelatedEvents.QueueEvents(errors);
       IF ~IPv4TCPSockets.Listen(socket, port, errors) OR
             ~IPv4TCPSockets.GetName(socket, local, errors) THEN
          Conclusions.Conclude(errors, Errors.fatal, "");
       END;

       In  case  of  an incoming connection we can attempt to retrieve the RFC
       1413 information:

       IF IPv4TCPSockets.Accept(socket, s, Streams.onebuf, peer) THEN
          IF RFC1413Requests.GetIdent(peer, local, NIL,
             opsys, charset, ident, errors) THEN
             (* got RFC 1413 identification *)
          ELSE
             (* unable to retrieve RFC 1413 identification *)
          END;
          (* ... *)
       END;


[1mSEE ALSO[0m
       [4mIPv4Addresses[24m    address types for IPv4 sockets.
       [4mIPv4TCPSockets[24m   interfaces IPv4 TCP sockets.



Release 0.5              Last change: 24 January 2005       RFC1413Requests(3)
