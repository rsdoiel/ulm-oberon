


CompilerErrors(3)      Ulm's Oberon System      CompilerErrors(3)


NNAAMMEE
       CompilerErrors   -  standardized  events  for  compilation
       errors

SSYYNNOOPPSSIISS
       TYPE ErrorEvent = POINTER TO ErrorEventRec;
       TYPE ErrorEventRec =
          RECORD
             (Events.EventRec)
             loc1, loc2, reference: CompilerObjects.Location;
             longmsg: Streams.Stream;
          END;
       VAR error: Events.EventType;

       PROCEDURE Raise(errors: RelatedEvents.Object;
                       at: CompilerObjects.Location;
                       message: ARRAY OF CHAR);

       PROCEDURE Open(VAR s: Streams.Stream);
       PROCEDURE At1(s: Streams.Stream; location: CompilerObjects.Location);
       PROCEDURE At2(s: Streams.Stream; location: CompilerObjects.Location);
       PROCEDURE Ref(s: Streams.Stream; location: CompilerObjects.Location);
       PROCEDURE AtObject1(s: Streams.Stream; object: CompilerObjects.Object);
       PROCEDURE AtObject2(s: Streams.Stream; object: CompilerObjects.Object);
       PROCEDURE RefObject(s: Streams.Stream; object: CompilerObjects.Object);
       PROCEDURE Close(s: Streams.Stream; errors: RelatedEvents.Object);

       PROCEDURE GetSortedErrors(errors: RelatedEvents.Object;
                                 VAR it: Iterators.Iterator);


DDEESSCCRRIIPPTTIIOONN
       _C_o_m_p_i_l_e_r_E_r_r_o_r_s provides standardized events  for  compila­
       tion errors that allow modules like _L_i_s_t_e_r_s_(_3_) to generate
       integrated error listings.

       As all error events generated by _C_o_m_p_i_l_e_r_E_r_r_o_r_s are passed
       to  _R_e_l_a_t_e_d_E_v_e_n_t_s_(_3_),  an error object is needed that col­
       lects all  error  events,  i.e.  _R_e_l_a_t_e_d_E_v_e_n_t_s_._Q_u_e_u_e_E_v_e_n_t_s
       must  be  called  for  it. This object may be an otherwise
       empty  object  or  any  other   extension   of   _R_e_l_a_t_e_d_E_­
       _v_e_n_t_s_._O_b_j_e_c_t  that  is  permitted  to  receive other error
       events as well.

       Error events are created in a  short  and  simple  way  by
       _R_a_i_s_e,  or,  in  case of more elaborate messages, by _O_p_e_n,
       various  location  referencing  procedures,   and   _C_l_o_s_e.
       Finally, _G_e_t_S_o_r_t_e_d_E_r_r_o_r_s may be called to extract all com­
       pilation error events from _e_r_r_o_r_s (but leaving  all  other
       events), sorted by their primary location.

       All  error events generated by _C_o_m_p_i_l_e_r_E_r_r_o_r_s have follow­
       ing components:




Release 0.5          Last change: 28 May 2000                   1





CompilerErrors(3)      Ulm's Oberon System      CompilerErrors(3)


       _t_y_p_e        Shared event type that is always set  to  _C_o_m_­
                   _p_i_l_e_r_E_r_r_o_r_s_._e_r_r_o_r.
       _m_e_s_s_a_g_e     Abbreviated  error message of type _E_v_e_n_t_s_._M_e_s_­
                   _s_a_g_e.
       _l_o_c_1        Primary location, always non-NNIILL.  Used as key
                   by _G_e_t_S_o_r_t_e_d_E_r_r_o_r_s.
       _l_o_c_2        Is  set  if  two  items  belong  to this error
                   event.  May be NNIILL.  _l_o_c_2 is  expected  to  be
                   close  to  _l_o_c_1  and  must  belong to the same
                   source.  Example: Two expressions combined  by
                   an  operator  that  are not compatible to each
                   other.
       _r_e_f_e_r_e_n_c_e   A more distant location that is given as  ref­
                   erence.   It may even belong to another source
                   as _l_o_c_1.  May be NNIILL.  Example: First declara­
                   tion in case of multiple declarations.
       _l_o_n_g_m_s_g     Non-abbreviated error message.

       _R_a_i_s_e  creates  a  simple error event referencing just one
       location and giving a message.

       _O_p_e_n creates a stream where the error message may be writ­
       ten  to  and which, in addition, supports following opera­
       tions: _A_t_1, _A_t_2, and _R_e_f set the primary,  secondary,  and
       reference  location,  respectively.  _A_t_O_b_j_e_c_t_1, _A_t_O_b_j_e_c_t_2,
       and _R_e_f_O_b_j_e_c_t work similarly but take  the  location  from
       _o_b_j_e_c_t_._l_o_c  instead.   Note  that  either _A_t_1 or _A_t_O_b_j_e_c_t_1
       must be called.  If the error message has been printed  to
       _s and all locations are defined, _C_l_o_s_e generates the error
       event and relates it to _e_r_r_o_r_s.

       _G_e_t_S_o_r_t_e_d_E_r_r_o_r_s removes all error events that  are  exten­
       sions of _C_o_m_p_i_l_e_r_E_r_r_o_r_s_._E_r_r_o_r_E_v_e_n_t from _e_r_r_o_r_s and returns
       them in sorted order (by their primary  location)  through
       _i_t.

DDIIAAGGNNOOSSTTIICCSS
       _C_o_m_p_i_l_e_r_E_r_r_o_r_s  does  not  generate  any  additional error
       events on its own.  Assertions fail in case of

       ·      multiple definitions of a location,

       ·      missing source  references  or  source  headers  in
              locations,

       ·      overlapping locations,

       ·      empty error messages,

       ·      missing definition of the primary location, and

       ·      foreign  streams  that  are  passed  to _A_t_1 and all
              other location-defining operations.




Release 0.5          Last change: 28 May 2000                   2





CompilerErrors(3)      Ulm's Oberon System      CompilerErrors(3)


SSEEEE AALLSSOO
       _C_o_m_p_i_l_e_r_O_b_j_e_c_t_s_(_3_)   base type of locations
       _L_i_s_t_e_r_s_(_3_)           general interface for error listers
       _R_e_l_a_t_e_d_E_v_e_n_t_s_(_3_)     object-oriented event handling

BBUUGGSS
       _C_o_m_p_i_l_e_r_E_r_r_o_r_s does not offer a pretty-printing  interface
       procedure     using    _E_r_r_o_r_s_._A_s_s_i_g_n_W_r_i_t_e_P_r_o_c_e_d_u_r_e    (see
       _E_r_r_o_r_s_(_3_)) as this task is better left to listing  genera­
       tors.















































Release 0.5          Last change: 28 May 2000                   3


