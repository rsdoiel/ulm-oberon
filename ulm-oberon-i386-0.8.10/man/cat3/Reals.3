


Reals(3)               Ulm's Oberon System               Reals(3)


NNAAMMEE
       Reals - conversions from/to real numbers

SSYYNNOOPPSSIISS
       CONST maxexp = 309;
       CONST minexp = -323;
       CONST maxdignum = 16;
       CONST maxlongexp = 4932;
       CONST minlongexp = -4951;
       CONST maxlongdignum = 19;

       PROCEDURE ExpAndMan(r: LONGREAL; long: BOOLEAN; base: INTEGER;
                        VAR exponent: INTEGER; VAR mantissa: LONGREAL);
       PROCEDURE Power(base: LONGREAL; exp: INTEGER) : LONGREAL;
       PROCEDURE Digits(mantissa: LONGREAL; base: INTEGER;
                        VAR buf: ARRAY OF CHAR;
                        VAR neg: BOOLEAN;
                        force: BOOLEAN; VAR ndigits: INTEGER);
       PROCEDURE Convert(digits: ARRAY OF CHAR; base: INTEGER; neg: BOOLEAN;
                         VAR mantissa: LONGREAL);


DDEESSCCRRIIPPTTIIOONN
       _R_e_a_l_s offers some base routines for converting from and to
       real numbers.  Valid _b_a_s_e values are 2, 8, 10, and 16.

       Some constants are exported for real numbers of type  RREEAALL
       and LLOONNGGRREEAALL:
       _m_a_x_e_x_p          maximal exponent of RREEAALL numbers
       _m_i_n_e_x_p          minimal exponent of RREEAALL numbers
       _m_a_x_d_i_g_n_u_m       maximal  number  of  significant digits in
                       decimal representation
       _m_a_x_l_o_n_g_e_x_p      maximal exponent of LLOONNGGRREEAALL numbers
       _m_i_n_l_o_n_g_e_x_p      minimal exponent of LLOONNGGRREEAALL numbers
       _m_a_x_l_o_n_g_d_i_g_n_u_m   maximal number of  significant  digits  in
                       decimal representation

       _E_x_p_A_n_d_M_a_n  divides  _r into _e_x_p_o_n_e_n_t and _m_a_n_t_i_s_s_a according
       to following rules:

       (1)    (1.0 <= AABBSS(_m_a_n_t_i_s_s_a)) & (AABBSS(_m_a_n_t_i_s_s_a) < _b_a_s_e)

       (2)    _r = _m_a_n_t_i_s_s_a * _b_a_s_e^_e_x_p_o_n_e_n_t

       _l_o_n_g should be FFAALLSSEE if a RREEAALL-value is passed to _r.

       _D_i_g_i_t_s converts _m_a_n_t_i_s_s_a into a sequence of digits ("0" to
       "9"  and  "A"  to "F" (if _b_a_s_e = 16)).  _m_a_n_t_i_s_s_a must hold
       (1) of _E_x_p_A_n_d_M_a_n.  In normal case (_n_d_i_g_i_t_s = 0)  all  sig­
       nificant  digits  are  generated  into _b_u_f.  If _n_d_i_g_i_t_s is
       positive it specifies the number of digits  to  be  stored
       into _b_u_f.  _n_d_i_g_i_t_s is diminished to the number of signifi­
       cant digits if _f_o_r_c_e is FFAALLSSEE.  Trailing  zeroes  are  cut
       and  the  actual  number  of  digits  stored  into  _b_u_f is



Release 0.5       Last change: 16 September 1996                1





Reals(3)               Ulm's Oberon System               Reals(3)


       returned in _n_d_i_g_i_t_s.  _b_u_f is guaranteed  to  be  0X-termi­
       nated.  _n_e_g is set to TTRRUUEE if _m_a_n_t_i_s_s_a is negative.

       _C_o_n_v_e_r_t converts normalized _d_i_g_i_t_s (implicit decimal point
       after first digit) into _m_a_n_t_i_s_s_a.

       _P_o_w_e_r returns _b_a_s_e^_e_x_p.

EEXXAAMMPPLLEE
       Following procedure writes a  RREEAALL-number  in  exponential
       format:

       PROCEDURE WriteReal(r: REAL);
          CONST
             base = 10;
          VAR
             exponent: INTEGER;
             mantissa: LONGREAL;
             digits: ARRAY Reals.maxdignum+1 OF CHAR;
             ndigits: INTEGER;
             neg: BOOLEAN;
             index: INTEGER;
       BEGIN
          Reals.ExpAndMan(r, (* long = *) FALSE, base, exponent, mantissa);
          ndigits := 0; (* all significant digits *)
          Reals.Digits(mantissa, base, digits, neg,
                       (* force = *) FALSE, ndigits);
          IF neg THEN
             Write.Char("-");
          END;
          Write.Char(digits[0]);
          IF ndigits > 1 THEN
             Write.Char(".");
             index := 1;
             WHILE index < ndigits DO
                Write.Char(digits[index]);
                INC(index);
             END;
          END;
          Write.Char("E"); Write.Int(exponent, 0);
       END WriteReal;


SSEEEE AALLSSOO
       _R_e_a_d_(_3_)    formatted input of real numbers
       _W_r_i_t_e_(_3_)   formatted output of real numbers











Release 0.5       Last change: 16 September 1996                2


