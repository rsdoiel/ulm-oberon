


Paths(3)               Ulm's Oberon System               Paths(3)


NNAAMMEE
       Paths - resolving string constants into name paths

SSYYNNOOPPSSIISS
       CONST separator = "/";
       TYPE Path = POINTER TO PathRec;
       TYPE PathRec =
          RECORD
             (Objects.ObjectRec)
             component: Names.Name;
             next: Path;
          END;
       TYPE ErrorCode = SHORTINT;
       TYPE ErrorEvent = POINTER TO ErrorEventRec;
       TYPE ErrorEventRec =
          RECORD
             (Events.EventRec)
             errorcode: ErrorCode;
          END;
       VAR errormsg: ARRAY errorcodes OF Events.Message;
       VAR error: Events.EventType;

       PROCEDURE Convert(path: ARRAY OF CHAR): Path;
       PROCEDURE GetNode(path: ARRAY OF CHAR;
                   auth: Shards.Lid; errors: RelatedEvents.Object;
                   VAR subnode: Names.Node): BOOLEAN;
       PROCEDURE GetNodeN(node: Names.Node; path: ARRAY OF CHAR;
                   auth: Shards.Lid; errors: RelatedEvents.Object;
                   VAR subnode: Names.Node): BOOLEAN;
       PROCEDURE Insert(path: ARRAY OF CHAR; subnode: Names.Node;
                   auth: Shards.Lid; errors: RelatedEvents.Object): BOOLEAN;
       PROCEDURE InsertN(node: Names.Node; path: ARRAY OF CHAR;
                   subnode: Names.Node;
                   auth: Shards.Lid; errors: RelatedEvents.Object): BOOLEAN;
       PROCEDURE Delete(path: ARRAY OF CHAR;
                   auth: Shards.Lid; errors: RelatedEvents.Object): BOOLEAN;
       PROCEDURE DeleteN(node: Names.Node; path: ARRAY OF CHAR;
                   auth: Shards.Lid; errors: RelatedEvents.Object): BOOLEAN;


DDEESSCCRRIIPPTTIIOONN
       _P_a_t_h_s  provides  an interface to _N_a_m_e_s_(_3_) resolving string
       constants into name paths.  For each procedure in _N_a_m_e_s_(_3_)
       with  an  argument  of  type _N_a_m_e_s_._N_o_d_e and another one of
       type _N_a_m_e_s_._N_a_m_e there are  two  equivalent  procedures  in
       _P_a_t_h_s  with either an absolute or a relative path instead.
       In all cases _p_a_t_h is a 00XX-terminated array  of  characters
       containing  path components.  Within _p_a_t_h, two consecutive
       _s_e_p_a_r_a_t_o_r characters are replaced by a single one, whereas
       a single _s_e_p_a_r_a_t_o_r character is replaced by nothing, sepa­
       rating path components.

       Paths are evaluated from left to right as  a  sequence  of
       _N_a_m_e_s_._G_e_t_N_o_d_e  calls  until  exactly one component remains



Release 0.5         Last change: 22 July 1996                   1





Paths(3)               Ulm's Oberon System               Paths(3)


       unresolved,  which  becomes  the  _n_a_m_e  argument  to   the
       requested procedure.

       _C_o_n_v_e_r_t simply converts a string to a _P_a_t_h structure.

EEXXAAMMPPLLEE
       success := Paths.Insert("etc/example", subnode, auth, errors)

       is essentially equivalent to:

       ConstStrings.Create(etcString, "etc");
       ConstStrings.Create(exampleString, "example");
       success :=
          Names.GetNode(Names.root, etcString, auth, tmpnode) &
          Names.Insert(tmpnode, subnode, exampleString, auth)

       except for the redirection of error events.

DDIIAAGGNNOOSSTTIICCSS
       All  procedures  return  TTRRUUEE on success, otherwise FFAALLSSEE.
       Error events, usually raised in the  context  of  _N_a_m_e_s_(_3_)
       procedures, are forwarded to _e_r_r_o_r_s.  If not stated other­
       wise, their priority is _P_r_i_o_r_i_t_i_e_s_._l_i_b_e_r_r_o_r_s.  In case  of
       an  inappropriate  _p_a_t_h  argument  an  error event of type
       _E_r_r_o_r_E_v_e_n_t is related to _e_r_r_o_r_s with following error  code
       and message:
       _z_e_r_o_P_a_t_h_L_e_n        insert/delete need a nonempty path

SSEEEE AALLSSOO
       _N_a_m_e_s_(_3_)           abstraction for name hierarchies
       _C_o_n_s_t_S_t_r_i_n_g_s_(_3_)    handling of arbitrarily long strings
       _S_e_r_v_i_c_e_s_(_3_)        type-independent  definition  of exten­
                          sions
       _R_e_l_a_t_e_d_E_v_e_n_t_s_(_3_)   error event handling

AAUUTTHHOORR
       Martin Hasch, University of Ulm




















Release 0.5         Last change: 22 July 1996                   2


