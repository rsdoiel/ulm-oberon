SysCoroutines(3)              Ulm's Oberon System             SysCoroutines(3)



[1mNAME[0m
       SysCoroutines - system-dependent coroutine layout

[1mSYNOPSIS[0m
       Implementation on the SPARCv8/Solaris architecture:

       TYPE (* $O- $P- coroutine structure *)
          Coroutine = POINTER TO CoroutineRec;
          CoroutineRec = RECORD
             interrupts: INTEGER;
             started: INTEGER; (* 0, 1, or 2 *)
             ucontext: ARRAY 448 OF BYTE;
          END;
          (* $O= $P= *)


       Implementation on the I386/Linux architecture:

       TYPE (* $O- $P- coroutine structure *)
          Coroutine = POINTER TO CoroutineRec;
          CoroutineRec = RECORD
             interrupts: INTEGER;
             started: INTEGER; (* 0, 1, or 2 *)
             ucontext: ARRAY 24 OF BYTE;
          END;
          (* $O= $P= *)


[1mDESCRIPTION[0m
       [4mSysCoroutines[24m  declares  the system-dependent structures of coroutines.
       This is intended for modules like [4mSysStorage(3)[24m or [4mSysInterrupts(3)[24m.

       Following fields are included:
       [4minterrupts[24m   counts the number of asynchronous interrupts whose handler
                    have  not been finished yet. This counter is maintained by
                    [4mSysInterrupts(3)[24m.   Coroutines  with  non-zero   interrupt
                    counters  are  considered  as  non-tracable by the garbage
                    collection.
       [4mstarted[24m      has a value of 0 for coroutines  whose  [4mucontext[24m  has  not
                    been  initialized  yet, 1 for coroutines with a saved con-
                    text but that were never switched  to,  and  2  after  the
                    first activation of a coroutine.
       [4mucontext[24m     contains the system-dependent context that is either main-
                    tained by inline architecture (on the  I386  architecture,
                    for  example)  or  by system calls (on the SPARC architec-
                    ture).

[1mEXAMPLE[0m
       PROCEDURE Started(cr: Coroutines.Coroutine) : INTEGER;
          VAR
             scr: SysCoroutines.Coroutine;
       BEGIN
          scr := SYSTEM.VAL(SysCoroutines.Coroutine, cr);
          RETURN scr.started
       END Started;


[1mSEE ALSO[0m
       [4mCoroutines(3)[24m      opaque type [4mCoroutines.Coroutine[0m
       [4mSysInterrupts(3)[24m   maintenance of interrupt nest level of coroutines



Release 0.5               Last change: 25 August 2005         SysCoroutines(3)
