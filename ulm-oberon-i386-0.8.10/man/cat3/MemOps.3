


MemOps(3)              Ulm's Oberon System              MemOps(3)


NNAAMMEE
       MemOps - memory operations

SSYYNNOOPPSSIISS
       PROCEDURE Copy(source, dest: Types.Address; nbytes: Types.Count);
       PROCEDURE CopyU(source, dest: Types.UntracedAddress; nbytes: Types.Count);
       PROCEDURE Clear(addr: Types.Address; nbytes: Types.Count);
       PROCEDURE ClearU(addr: Types.UntracedAddress; nbytes: Types.Count);


DDEESSCCRRIIPPTTIIOONN
       This  module  serves  as portable interface to a hopefully
       very efficient implementation  of  operations  for  memory
       areas.   All  operations  came  in  two  variants: one for
       addresses  which  are  traced  by  the  garbage  collector
       (_T_y_p_e_s_._A_d_d_r_e_s_s),   and   one   with   untraced   addresses
       (_T_y_p_e_s_._U_n_t_r_a_c_e_d_A_d_d_r_e_s_s) with suffix _U.

       _C_o_p_y and _C_o_p_y_U copy  _n_b_y_t_e_s  bytes  from  _s_o_u_r_c_e  to  _d_e_s_t
       (which must not overlap).

       _C_l_e_a_r and _C_l_e_a_r_U fill the given memory area with zeros.

DDIIAAGGNNOOSSTTIICCSS
       None  of  the procedures checks the parameters or provides
       any kind of error handling.

AAUUTTHHOORRSS
       Werner Stanglow and Andreas Borchert

SSEEEE AALLSSOO
       _T_y_p_e_s_(_3_)   difference    between     _T_y_p_e_s_._A_d_d_r_e_s_s     and
                  _T_y_p_e_s_._U_n_t_r_a_c_e_d_A_d_d_r_e_s_s.
























Release 0.5       Last change: 17 February 1999                 1


