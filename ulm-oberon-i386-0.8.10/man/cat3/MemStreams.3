MemStreams(3)                 Ulm's Oberon System                MemStreams(3)



[1mNAME[0m
       MemStreams - streams representing a memory area

[1mSYNOPSIS[0m
       CONST read = 0; write = 1; rdwr = 2;
       TYPE Mode = SHORTINT; (* read..rdwr *)

       CONST beyondEndOfStream = 0;
       CONST posOutOfRange = 1;
       CONST invalidRange = 2;
       CONST errors = 3;
       TYPE ErrorCode = SHORTINT; (* illegalMode..beyondEndOfStream *)
       TYPE ErrorEvent = POINTER TO ErrorEventRec;
       TYPE ErrorEventRec =
          RECORD
             (Events.EventRec)
             errorcode: ErrorCode;
          END;
       VAR error: Events.EventType;
       VAR errormsg: ARRAY errors OF Events.Message;

       PROCEDURE Open(VAR s: Streams.Stream;
                      addr: Types.Address; length: Types.Size;
                      mode: Mode);

       PROCEDURE OpenU(VAR s: Streams.Stream;
                       addr: Types.UntracedAddress; length: Types.Size;
                       mode: Mode);


[1mDESCRIPTION[0m
       [4mMemStreams[24m allows to access a memory area by stream operations.  Memory
       streams may be created for any allocated area of  the  virtual  address
       space of the current process.  Areas which are under the control of the
       garbage collector (see [4mSysStorage(3)[24m) are to be passed to [4mOpen[24m,  other-
       wise [4mOpenU[24m is to be taken for untraced addresses.

       [4mMemStreams[24m  may be particularly useful for other stream implementations
       which keep their stream contents in-memory in a  contiguous  buffer  as
       substream  implementation  (see [4mSubStreams(3)[24m).  [4mMemStreams[24m itself sup-
       ports [4mSubStreams(3)[24m as well.

       It is in the responsibility of the stream creator to  assure  that  the
       validity  of  the  memory  area  is associated with the validity of the
       stream, i.e. if the memory area should become deallocated (no matter by
       which  method),  the  stream should terminate (see [4mResources(3)[24m).  Note
       that this link will be established automatically if [4mMemStreams[24m is  used
       as a substream implementation (see [4mSubStreams(3)[24m and [4mForwarders(3)[24m).

       Besides the read and write operations, seek and tell, also trunc opera-
       tions are permitted which allow to reduce the length of the stream.

[1mDIAGNOSTICS[0m
       Following error events may be generated by [4mMemStreams[24m:
       [4mposOutOfRange[24m       Seek operations outside the valid range from  [1m0  [22mto
                           [4mlength[24m are not valid. Trunc operations are not per-
                           mitted which are outside the valid range  or  which
                           exclude the current position.
       [4mbeyondEndOfStream[24m   A  write  operation was attempted beyond the stream
                           length.  In this case, even a  partial  write  will
                           not  be  done,  and  [1m0  [22mor  [1mFALSE  [22mwill be returned
                           instead.
       [4minvalidRange[24m        This error will be returned  on  creation  of  sub-
                           streams   with   a   range   which  is  not  inside
                           [1m[0[22m..[4mlength[24m[1m][22m.

       Note that passing an invalid mode to [4mOpen[24m or [4mOpenU[24m  will  result  in  a
       runtime error.

[1mSEE ALSO[0m
       [4mForwarders(3)[24m   filter objects
       [4mResources(3)[24m    termination of objects and inter-object dependencies
       [4mStreams(3)[24m      general stream operations
       [4mSubStreams(3)[24m   general interface for substreams
       [4mTypes(3)[24m        base types including address types



Release 0.5              Last change: 19 February 2004           MemStreams(3)
