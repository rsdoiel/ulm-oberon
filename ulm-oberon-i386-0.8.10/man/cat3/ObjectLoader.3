ObjectLoader(3)               Ulm's Oberon System              ObjectLoader(3)



[1mNAME[0m
       ObjectLoader  - load and possibly generate compilation results from the
       compiler database

[1mSYNOPSIS[0m
       (* log levels *)
       CONST logLoading = 0;
       CONST logLoadingResult = 1;
       CONST logCompiling = 2; (* includes 3 and 4 *)
       CONST logStoring = 5;
       CONST logChecks = 6;
       CONST logErrors = 7;

       CONST noSrcFound = 0;
       CONST compilationFailed = 1;
       CONST loadFailed = 2;
       CONST refCycle = 3;
       CONST errors = 4;
       TYPE ErrorCode = SHORTINT; (* noSrcFound ... *)
       TYPE ErrorEvent = POINTER TO ErrorEventRec;
       TYPE ErrorEventRec =
          RECORD
             (Events.EventRec)
             code: ErrorCode;
             modname: ConstStrings.String;
          END;
       VAR error: Events.EventType;
       VAR errormsg: ARRAY errors OF Events.Message;

       PROCEDURE UpToDate(context: Compilers.Context;
                          header: CompilerObjects.Header) : BOOLEAN;

       PROCEDURE LoadObject(compiler: Compilers.Compiler;
                            context: Compilers.Context;
                            modname: ConstStrings.String;
                            type: CompilerObjects.ObjectType;
                            arch: Architectures.Architecture;
                            VAR header: CompilerObjects.Header;
                            VAR object: CompilerObjects.Object;
                            errors: RelatedEvents.Object) : BOOLEAN;

       PROCEDURE LoadText(compiler: Compilers.Compiler;
                          context: Compilers.Context;
                          modname: ConstStrings.String;
                          type: CompilerObjects.ObjectType;
                          arch: Architectures.Architecture;
                          VAR header: CompilerObjects.Header;
                          VAR text: PersistentTexts.Text;
                          errors: RelatedEvents.Object) : BOOLEAN;

       PROCEDURE LoadHeader(compiler: Compilers.Compiler;
                            context: Compilers.Context;
                            modname: ConstStrings.String;
                            type: CompilerObjects.ObjectType;
                            arch: Architectures.Architecture;
                            VAR header: CompilerObjects.Header;
                            errors: RelatedEvents.Object) : BOOLEAN;


[1mDESCRIPTION[0m
       [4mObjectLoader[24m attempts to load specified targets from the database asso-
       ciated  with  [4mcontext[24m  (see [4mCompilers(3)[24m and [4mCompilerDatabases(3)[24m), and
       generates them using [4mcompiler[24m if they are missing or no  longer  up-to-
       date.  Newly  generated compilation results may be stored back into the
       database in dependence of the [4mcachemode[24m field of the [4mcontext[24m parameter.

       Targets  are specified by a module name ([4mmodname[24m), an object type ([4mCom-[0m
       [4mpilerObjects.public[24m or [4mCompilerObjects.private[24m), and  the  architecture
       [4march[24m which may be [1mNIL [22mfor architecture-independent targets.

       All  compilation  results within the database consist of a header and a
       persistent text (see [4mPersistentTexts(3)[24m).  The  latter  encapsulates  a
       module object that is part of a modularized structure (see [4mModularized-[0m
       [4mStructures(3)[24m).  The header (of type  [4mCompilerObjects.Header[24m)  provides
       meta  informations  of a compilation result including all its dependen-
       cies (see [4mCompilerKeys(3)[24m).

       [4mLoadHeader[24m just loads the header of a target, [4mLoadText[24m loads both,  the
       header  and the persistent text, and [4mLoadObject[24m works like [4mLoadText[24m but
       unpacks the encapsulated object out of the persistent text.

       [4mUpToDate[24m allows to check whether a target of the database whose  header
       is given is up-to-date.

[1mDIAGNOSTICS[0m
       All  error  events are related to [4merrors[24m. This includes all events that
       are generated by the compiler (see [4mCompilerErrors(3)[24m) and the  underly-
       ing  compiler  database  (see  [4mCompilerDatabases(3)[24m).   Following error
       events are possibly raised by this module:
       [4mnoSrcFound[24m          The desired compilation result is not available and
                           cannot  be generated because source texts are miss-
                           ing. Please note that the name of the module  whose
                           source  is  missing is included in the event record
                           type.
       [4mcompilationFailed[24m   A compilation failed. More detailed error  messages
                           may  be  found  in  the collected compilation error
                           events (see [4mCompilerErrors(3)[24m).
       [4mloadFailed[24m          Final error event that is generated if load  opera-
                           tions fail for whatever reason.
       [4mrefCycle[24m            A  reference  cycle  among  interfaces was detected
                           which lead to  conflicting  compilation  keys  (see
                           [4mCompilerKeys(3)[24m). One member of the reference cycle
                           is named by the [4mmodname[24m field of the error event.

       A log object of type [4mCompilerLogs.Log[24m is part of the  context  objects.
       The  log  allows  to follow the recursion of the loading algorithm. The
       nesting level of the recursion is reflected by the nesting level of the
       log.  The  amount  of  log messages depends on the log levels which are
       given in ascending order:
       [4mlogLoading[24m         Tells the parameters [4mmodname[24m, [4mtype[24m, and  [4march[24m  of  a
                          loading operation.
       [4mlogLoadingResult[24m   Tells  whether  a  load  operation was successful or
                          not.
       [4mlogCompiling[24m       Tells when the compiler is invoked. Note that a  log
                          level  of  at least [4mlogCompiling+1[24m provides the time
                          stamp of the source, and that beginning with [4mlogCom-[0m
                          [4mpiling+2[24m the source ids are provided as well.
       [4mlogStoring[24m         Tells which compilation results are stored back into
                          the database.
       [4mlogChecks[24m          Documents all  the  checks  that  are  performed  to
                          determine  the  up-to-date status of a module object
                          in the database.
       [4mlogErrors[24m          Includes all compilation errors within the log.

[1mSEE ALSO[0m
       [4mCompilers(3)[24m               general interface for two-pass compilers
       [4mCompilerDatabases(3)[24m       interface to  a  persistent  database  where
                                  sources  and  compilation  results are found
                                  and stored to
       [4mCompilerErrors(3)[24m          standardized events for compilation errors
       [4mCompilerKeys(3)[24m            keys that identify dependencies of compiler-
                                  generated objects
       [4mCompilerLogs(3)[24m            provides  log  about loading and compilation
                                  processes
       [4mCompilerObjects(3)[24m         base type for compiler objects  that  repre-
                                  sent compiler results and header structures
       [4mModularizedStructures(3)[24m   modularized  byte  sequences  of  persistent
                                  objects
       [4mPersistentTexts(3)[24m         encapsulation of persistent objects



Release 0.5               Last change: 25 August 2004          ObjectLoader(3)
