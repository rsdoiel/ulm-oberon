


RabinMiller(3)         Ulm's Oberon System         RabinMiller(3)


NNAAMMEE
       RabinMiller - implementation of the Rabin-Miller primality
       testing algorithm

SSYYNNOOPPSSIISS
       VAR test: Primes.Test;


DDEESSCCRRIIPPTTIIOONN
       _R_a_b_i_n_M_i_l_l_e_r offers the  implementation  of  the  primality
       testing algorithm developed by M. O.  Rabin, based in part
       on the ideas of G. L. Miller. Look at  Journal  of  Number
       Theory,  v.  12, n. 1, Feb 1980, pp. 128-138: M. O. Rabin,
       _P_r_o_b_a_b_i_l_i_s_t_i_c _A_l_g_o_r_i_t_h_m _f_o_r _T_e_s_t_i_n_g _P_r_i_m_a_l_i_t_y as a  refer­
       ence.  The  test  wrongly declares a none-prime a prime in
       1/4 of the cases. The tests  are  independent  and  conse­
       quently  _n  tests  wrongly declare a none-prime a prime in
       1/4_n of the cases. The Rabin-Miller testing algorithm con­
       verges faster than the algorithm implemented in _L_e_h_m_a_n_n_(_3_)

       During its initialization, _R_a_b_i_n_M_i_l_l_e_r creates  an  inter­
       face  of  the type defined in _P_r_i_m_e_s_(_3_) and connects it to
       _t_e_s_t.

       _R_a_b_i_n_M_i_l_l_e_r must have the  possibility  to  create  random
       numbers  of  the  type  specified by the given value to be
       tested. Consequently, a module importing _R_a_b_i_n_M_i_l_l_e_r  must
       also  import a service provider for the generation of ran­
       dom numbers of the specified type (see, for example, _R_a_n_d_­
       _C_a_r_d_1_0_2_4_s_(_3_)).

AAUUTTHHOORR
       Frank B.J. Fischer

SSEEEE AALLSSOO
       _P_r_i_m_e_s_(_3_)           general   abstraction   for  primality
                           testing algorithm
       _Q_u_i_c_k_P_r_i_m_e_T_e_s_t_(_3_)   a quick test for small primes
       _L_e_h_m_a_n_n_(_3_)          implementation of the Lehmann  primal­
                           ity testing algorithm
       _P_r_i_m_e_G_e_n_(_3_)         implementation  of a prime number gen­
                           erator















Release 0.5         Last change: 3 April 1997                   1


