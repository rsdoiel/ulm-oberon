


CopyingStreams(3)      Ulm's Oberon System      CopyingStreams(3)


NNAAMMEE
       CopyingStreams  -  provide  seek  capability on pure input
       streams

SSYYNNOOPPSSIISS
       CONST cannotAllocMemory = 0;
       CONST invalidInputStream = 1;
       CONST outOfMemory = 2;
       CONST posOutOfRange = 3;
       CONST errors = 4;
       TYPE ErrorCode = SHORTINT; (* cannotAllocMemory..posOutOfRange *)
       TYPE ErrorEvent = POINTER TO ErrorEventRec;
       TYPE ErrorEventRec =
          RECORD
             (Events.EventRec)
             errorcode: ErrorCode;
          END;
       VAR error: Events.EventType;
       VAR errormsg: ARRAY errors OF Events.Message;

       PROCEDURE Open(VAR s: Streams.Stream; input: Streams.Stream;
                      errors: RelatedEvents.Object) : BOOLEAN;


DDEESSCCRRIIPPTTIIOONN
       _C_o_p_y_i_n_g_S_t_r_e_a_m_s offers streams with seek and tell  capabil­
       ity  on base of pure input streams which do not have these
       capabilities.  This is achieved by copying the input  into
       memory.   The  length  of  the stream equals the number of
       bytes read from the underlying input stream.   The  stream
       is  extended  by  reading from the end position but not by
       seeking beyond the current stream length.

       _C_o_p_y_i_n_g_S_t_r_e_a_m_s keeps the whole input in an contiguous  and
       extensible  area  (see _M_e_m_o_r_y_(_3_)).  This implementation is
       hence very efficient but memory-intensive  because  memory
       will  be  allocated  in  chunks  of  the page size.  Input
       streams that are known for their  small  size  are  better
       copied  into  in-memory  streams  of  _T_e_x_t_s_(_3_)  or  _L_a_r_g_e_­
       _T_e_x_t_s_(_3_).

       Copying streams support _S_u_b_S_t_r_e_a_m_s_(_3_) directly and provide
       therefore  an  efficient  base  for substreams of previous
       input data (e.g. for command line histories).

       _O_p_e_n creates a copying stream on base of _i_n_p_u_t.  Note that
       _i_n_p_u_t must not be used otherwise to avoid gaps in the copy
       of _s.  The returned stream is linked with the input stream
       by _F_o_r_w_a_r_d_e_r_s_(_3_).

DDIIAAGGNNOOSSTTIICCSS
       Errors  may  result  from the stream implementation of the
       input stream and the associated memory  management.   Fol­
       lowing errors may be generated by _C_o_p_y_i_n_g_S_t_r_e_a_m_s itself:



Release 0.5          Last change: 27 May 2000                   1





CopyingStreams(3)      Ulm's Oberon System      CopyingStreams(3)


       _c_a_n_n_o_t_A_l_l_o_c_M_e_m_o_r_y    Due to a fatal problem at initializa­
                            tion time, _C_o_p_y_i_n_g_S_t_r_e_a_m_s is in  gen­
                            eral unable to allocate memory.
       _i_n_v_a_l_i_d_I_n_p_u_t_S_t_r_e_a_m   The  input  stream which was given to
                            _O_p_e_n    does    not    support    the
                            _S_t_r_e_a_m_s_._r_e_a_d capability.
       _o_u_t_O_f_M_e_m_o_r_y          _C_o_p_y_i_n_g_S_t_r_e_a_m_s is unable to read fur­
                            ther from the  input  stream  because
                            the internal copy cannot be extended.
                            The problem may result from  lack  of
                            virtual  memory of the operating sys­
                            tem or from a problem of the  address
                            space management because the internal
                            copy must be kept contiguous.
       _p_o_s_O_u_t_O_f_R_a_n_g_e        Seek positions are valid only if they
                            range from 00 to the end of the inter­
                            nal copy.   It  is  not  possible  to
                            enforce  reading  from the underlying
                            stream by seeking beyond the  current
                            stream length.

SSEEEE AALLSSOO
       _F_o_r_w_a_r_d_e_r_s_(_3_)   support of filter objects
       _M_e_m_o_r_y_(_3_)       address space management
       _S_t_r_e_a_m_s_(_3_)      general stream operations
       _S_u_b_S_t_r_e_a_m_s_(_3_)   streams   representing   an   interval  of
                       another stream
       _T_e_x_t_s_(_3_)        memory-efficient  in-memory  streams  (see
                       _L_a_r_g_e_T_e_x_t_s_(_3_) as well)

BBUUGGSS
       Because the in-memory copy of the underlying stream is not
       allocated by  the  garbage  collector,  streams  of  _C_o_p_y_­
       _i_n_g_S_t_r_e_a_m_s  must  be  closed explicitly to allow the allo­
       cated memory to be reclaimed.

       The interface is portable but not the current  implementa­
       tion because portability was traded against efficiency.



















Release 0.5          Last change: 27 May 2000                   2


