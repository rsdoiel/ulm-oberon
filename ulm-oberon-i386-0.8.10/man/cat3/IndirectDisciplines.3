


IndirectDisciplines(3) Ulm's Oberon System IndirectDisciplines(3)


NNAAMMEE
       IndirectDisciplines - shared disciplines

SSYYNNOOPPSSIISS
       TYPE Object = Disciplines.Object;
       TYPE ObjectRec = Disciplines.ObjectRec;
       TYPE Discipline = Disciplines.Discipline;
       TYPE DisciplineRec = Disciplines.DisciplineRec;
       TYPE Identifier = Disciplines.Identifier;

       PROCEDURE Add(object: Object; discipline: Discipline);
       PROCEDURE Remove(object: Object; id: Identifier);
       PROCEDURE Seek(object: Object; id: Identifier;
                      VAR discipline: Discipline) : BOOLEAN;
       PROCEDURE Unique() : Identifier;

       PROCEDURE Forward(from, to: Object);


DDEESSCCRRIIPPTTIIOONN
       Not all kinds of disciplines are valid only in the context
       of a specific object.  Disciplines which carries parameter
       sets  like _S_t_r_e_a_m_D_i_s_c_i_p_l_i_n_e_s, for instance, need not to be
       tied to one object only and are good candidates for  shar­
       ing.   _I_n_d_i_r_e_c_t_D_i_s_c_i_p_l_i_n_e_s offers all declarations of _D_i_s_­
       _c_i_p_l_i_n_e_s and is, in fact, plug-compatible.  Thus,  modules
       which  don't  care  about the carrier of their disciplines
       are free to  use  _I_n_d_i_r_e_c_t_D_i_s_c_i_p_l_i_n_e_s  instead  of  _D_i_s_c_i_­
       _p_l_i_n_e_s:

       IMPORT Disciplines := IndirectDisciplines;


       _F_o_r_w_a_r_d  causes all discipline related operations of _I_n_d_i_­
       _r_e_c_t_D_i_s_c_i_p_l_i_n_e_s for _f_r_o_m to be forwarded to _t_o:
       _A_d_d               causes all disciplines to be added at _t_o
                         instead of _f_r_o_m.
       _R_e_m_o_v_e _a_n_d _S_e_e_k   first check for the presence of the dis­
                         cipline at _f_r_o_m, and,  if  not  present,
                         forward the request to _t_o.
       Transitive  connections (i.e. a chain of forwarding refer­
       ences) are legal.

       Usually _F_o_r_w_a_r_d needs not to be  called  directly  because
       _I_n_d_i_r_e_c_t_D_i_s_c_i_p_l_i_n_e_s   supports  _F_o_r_w_a_r_d_e_r_s_(_3_),  i.e.  _F_o_r_­
       _w_a_r_d_e_r_s_._F_o_r_w_a_r_d will call _F_o_r_w_a_r_d implicitly.

       Note that, if necessary,  operations  of  _D_i_s_c_i_p_l_i_n_e_s  and
       _I_n_d_i_r_e_c_t_D_i_s_c_i_p_l_i_n_e_s may be freely intermixed because _I_n_d_i_­
       _r_e_c_t_D_i_s_c_i_p_l_i_n_e_s relies upon _D_i_s_c_i_p_l_i_n_e_s.

SSEEEE AALLSSOO
       _D_i_s_c_i_p_l_i_n_e_s_(_3_)   discipline operations without indirection




Release 0.5         Last change: 20 March 1995                  1





IndirectDisciplines(3) Ulm's Oberon System IndirectDisciplines(3)


       _F_o_r_w_a_r_d_e_r_s_(_3_)    general forwarding mechanism
























































Release 0.5         Last change: 20 March 1995                  2


