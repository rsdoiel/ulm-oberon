Types(3)                      Ulm's Oberon System                     Types(3)



[1mNAME[0m
       Types - collection of compiler-dependent base types

[1mSYNOPSIS[0m
       TYPE Address = SYSTEM.ADDRESS;
       TYPE UntracedAddress = SYSTEM.UNTRACEDADDRESS;
       TYPE IntAddress = LONGINT;
       TYPE Count = LONGINT;
       TYPE Size = Count;
       TYPE Byte = BYTE;

       CONST bigEndian = 0; littleEndian = 1;
       CONST byteorder = bigEndian; (* machine-dependent constant *)
       TYPE ByteOrder = SHORTINT; (* bigEndian or littleEndian *)

       TYPE Int8 = SHORTINT;
       TYPE Int16 = SYSTEM.INT16;
       TYPE Int32 = LONGINT;

       TYPE Real32 = REAL;
       TYPE Real64 = REAL;
       TYPE Real128 = LONGREAL;

       CONST bigEndian = 0;    (* SPARC, M68K etc *)
       CONST littleEndian = 1; (* Intel 80x86, VAX etc *)
       CONST byteorder = bigEndian; (* machine-dependent constant *)
       TYPE ByteOrder = SHORTINT; (* bigEndian or littleEndian *)

       (* relationship between SET and INTEGER *)
       TYPE SetInt = INTEGER; (* INTEGER type that corresponds to SET *)
       CONST msb = SYS.VAL(SET, MIN(SetInt));
       CONST msbIsMax = SYS.VAL(SHORTINT, (msb = {MAX(SET)}));
       CONST msbIs0 = SYS.VAL(SHORTINT, (msb = {0}));
       CONST msbindex = msbIsMax * MAX(SET);
       CONST lsbindex = MAX(SET) - msbindex;
       CONST nofbits = MAX(SET) + 1;

       PROCEDURE ToInt8(int: LONGINT) : Int8;
       PROCEDURE ToInt16(int: LONGINT) : Int16;
       PROCEDURE ToInt32(int: LONGINT) : Int32;

       PROCEDURE ToReal32(real: LONGREAL) : Real32;
       PROCEDURE ToReal64(real: LONGREAL) : Real64;
       PROCEDURE ToReal128(real: LONGREAL) : Real128;


[1mDESCRIPTION[0m
       [4mTypes[24m  exports some base type definitions which are compiler-dependent.
       The Oberon Report assumes that [1mLONGINT  [22mis  the  appropriate  type  for
       address  arithmetic  (e.g. [1mSYSTEM.ADR [22mis defined to return [1mLONGINT[22m) but
       this is not necessarily true for  all  Oberon  implementations.   Ulm's
       Oberon compiler, for example, distinguishes between addresses which are
       to be traced by the  garbage  collector  and  those  which  are  to  be
       ignored.   For  this to work, [1mSYSTEM(3) [22mexports [1mADDRESS [22mand [1mUNTRACEDAD-[0m
       [1mDRESS[22m.  Both are compatible to [1mLONGINT [22mbut not identical.  [4mTypes[24m allows
       to  reduce  the  dependency  from  Ulm's  version  of  [1mSYSTEM [22mby use of
       [4mTypes.Address[24m and [4mTypes.UntracedAddress[24m instead of  [1mSYSTEM.ADDRESS  [22mand
       [1mSYSTEM.UNTRACEDADDRESS[22m.

       [4mCount[24m  is  expected  to  be the return type of [1mLEN[22m, and consequently an
       appropriate type for array indices.  [4mSize[24m should be compatible  to  the
       return  type  of  [1mSYSTEM.SIZE[22m.   Some  Oberon  compilers define [1mBYTE [22mas
       standard type, others export [1mBYTE [22mfrom [1mSYSTEM[22m.  [4mByte[24m  allows  to  avoid
       this compiler dependency.

       The  numeric  types  [1mInt8  [22m.. [1mReal128 [22mare expected to be defined to the
       best-fitting base type respectively, that is

       ·      the base type that has exactly the size specified,  or,  if  not
              available,

       ·      the  smallest  base type that is larger than the size specified,
              or, if not available,

       ·      the largest supported base type.

       Some constants and a type are provided to make conversions between  SET
       and  a corresponding integer type more portable.  [4mSetInt[24m is the integer
       type whose size is  identical  to  that  of  [1mSET[22m.   The  correspondence
       between  set  elements (ranging from [1m0 [22mto [1mMAX[22m([1mSET[22m)) and individual bits
       of an integer value that is  represented  as  2-complement  depends  on
       endianess  and  the discretion of the compiler writer.  [4mmsbindex[24m is the
       set element that corresponds to  the  most  significant  bit;  likewise
       [4mlsbindex[24m  designates the set element representing the least significant
       bit.  Both constants depend on following auxiliary constants:
       [4mmsb[24m        represents the set converted from an  integer  value  having
                  only the most-significant bit set ([1mMIN[22m([1mINTEGER[22m))
       [4mmsbIsMax[24m   is  1, if the most-significant bit is represented by element
                  [1mMAX[22m([1mSET[22m), and 0 otherwise.
       [4mmsbIs0[24m     is 1, if the most-significant bit is represented by  element
                  0, and 0 otherwise.
       Exactly  one of the constants [4mmsbIsMax[24m and [4mmsbIs0[24m is 1.  This assertion
       is included in the initialization part.

[1mSEE ALSO[0m
       [4mSYSTEM(3)[24m   compiler-dependent address types  [1mADDRESS  [22mand  [1mUNTRACEDAD-[0m
                   [1mDRESS[0m
       [4mReport[24m [4mof[24m [4mUlm's[24m [4mOberon[24m [4mCompiler[0m



Release 0.5               Last change: 11 March 2005                  Types(3)
