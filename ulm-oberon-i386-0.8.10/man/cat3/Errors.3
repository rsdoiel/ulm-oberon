Errors(3)                     Ulm's Oberon System                    Errors(3)



[1mNAME[0m
       Errors - general interface for error handlers

[1mSYNOPSIS[0m
       CONST debug = 0;
       CONST message = 1;
       CONST warning = 2;
       CONST error = 3;
       CONST fatal = 4;
       CONST bug = 5;
       CONST nkinds = 6;
       TYPE Kind = SHORTINT; (* debug..bug *)
       VAR kindText: ARRAY nkinds OF ARRAY 12 OF CHAR;
       TYPE Handler = PROCEDURE (event: Events.Event; kind: Kind);
       TYPE HandlerSet = POINTER TO HandlerSetRec;
       TYPE HandlerSetRec = RECORD (Disciplines.ObjectRec) END;
       TYPE WriteProcedure = PROCEDURE (s: Streams.Stream; event: Events.Event);
       VAR null: HandlerSet; (* empty handler set *)

       PROCEDURE CreateHandlerSet(VAR hs: HandlerSet);
       PROCEDURE InstallHandler(hs: HandlerSet; kind: Kind; handler: Handler);
       PROCEDURE AssignWriteProcedure(eventType: Events.EventType;
                                      write: WriteProcedure);
       PROCEDURE Write(s: Streams.Stream; event: Events.Event);
       PROCEDURE CatchEvent(hs: HandlerSet; kind: Kind; type: Events.EventType);


[1mDESCRIPTION[0m
       [4mErrors[24m defines a general interface for event-driven error handling.  To
       allow some flexibility in the sort of  reaction,  a  classification  of
       events is introduced:
       [4mdebug[24m     Intended  for  events  which  are convenient for debugging or
                 tracing.
       [4mmessage[24m   Suitable for notification events.
       [4mwarning[24m   Intended for notifications which indicate a problem or errors
                 which do not lead to failures.
       [4merror[24m     Indicates a failure which allows further processing.
       [4mfatal[24m     Intended  for  serious  failures which should lead to process
                 termination.
       [4mbug[24m       Suitable for programming errors which are comparable to  run-
                 time  faults.   Handlers  of bug events are expected to abort
                 execution.

       A handler set defines a handler for each kind  of  events.   [4mCreateHan-[0m
       [4mdlerSet[24m  creates a new handler set and initializes it to the empty set.
       By default, all events are  ignored  (empty  handler).   [4mInstallHandler[0m
       installs a handler for the given class of events for [4mhs[24m.

       Many  events  contain  additional  components which contain interesting
       information beyond the simple text of the [4mmessage[24m  component.   [4mAssign-[0m
       [4mWriteProcedure[24m  allows to attach a specific write procedure to an event
       type.  [4mWrite[24m calls either a previously assign write  procedure  or,  in
       the default case, copies [4mevent.message[24m to [4ms[24m.

       [4mCatchEvent[24m  associates  [4mkind[24m  with  the given event type and causes the
       appropiate handler of [4mhs[24m to be called if [4mtype[24m is raised.

[1mSEE ALSO[0m
       [4mConclusions(3)[24m   defines a standard handler set
       [4mEvents(3)[24m        general event handling



Release 0.5                Last change: 10 July 2003                 Errors(3)
