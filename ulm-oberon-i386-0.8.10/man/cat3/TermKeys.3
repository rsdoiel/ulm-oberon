


TermKeys(3)            Ulm's Oberon System            TermKeys(3)


NNAAMMEE
       TermKeys - support of function keys on ASCII terminals


SSYYNNOOPPSSIISS
       (* function keys *)
       CONST f0 = 0;
       CONST f1 = 1;
       CONST f2 = 2;
       CONST f3 = 3;
       CONST f4 = 4;
       CONST f5 = 5;
       CONST f6 = 6;
       CONST f7 = 7;
       CONST f8 = 8;
       CONST f9 = 9;
       CONST f10 = 10;
       CONST f11 = 11;
       CONST f12 = 12;
       CONST f13 = 13;
       CONST f14 = 14;
       CONST f15 = 15;
       CONST f16 = 16;
       CONST f17 = 17;
       CONST f18 = 18;
       CONST f19 = 19;
       CONST f20 = 20;
       CONST cursorup = 21;
       CONST cursordown = 22;
       CONST cursorleft = 23;
       CONST cursorright = 24;
       CONST insert = 25;
       CONST delete = 26;
       CONST home = 27;
       CONST end = 28;
       CONST previous = 29;
       CONST next = 30;
       CONST functionkeys = 31;

       TYPE FunctionKeySet = ARRAY functionkeys+1 DIV Sets.setsize OF SET;
       TYPE Key = POINTER TO KeyRec;
       TYPE KeyRec =
          RECORD
             (PersistentObjects.ObjectRec)
          END;
       TYPE SimpleKey = POINTER TO SimpleKeyRec;
       TYPE SimpleKeyRec =
          RECORD
             (KeyRec)
             char: CHAR;
          END;
       TYPE FunctionKey = POINTER TO FunctionKeyRec;
       TYPE FunctionKeyRec =
          RECORD



Release 0.5        Last change: 4 January 1996                  1





TermKeys(3)            Ulm's Oberon System            TermKeys(3)


             (KeyRec)
             code: INTEGER;
          END;
       TYPE ReadProc = PROCEDURE(s: Streams.Stream; VAR key: Key): BOOLEAN;
       TYPE Interface = POINTER TO InterfaceRec;
       TYPE InterfaceRec =
          RECORD
             (Objects.ObjectRec)
             read: ReadProc;
          END;

       PROCEDURE Init(s: Streams.Stream; available: FunctionKeySet; if: Interface);
       PROCEDURE Read(s: Streams.Stream; VAR key: Key): BOOLEAN;
       PROCEDURE Available(s: Streams.Stream; VAR keys: FunctionKeySet);



DDEESSCCRRIIPPTTIIOONN
       _T_e_r_m_K_e_y_s  adds  the  capability to read function keys from
       terminals that have a keypad, which transmits sequences of
       bytes  when  keys are pressed.  _T_e_r_m_K_e_y_s therefore distin­
       guishes two types of keys:


       _S_i_m_p_l_e_K_e_y is a key, which  transmits  a  single  character
       when pressed, (i.e. it's ASCII code).

       _F_u_n_c_t_i_o_n_K_e_y is a key which transmits a sequence of charac­
       ters.

       Every function key is assigned a number.  _T_e_r_m_K_e_y_s  prede­
       fines numbers for a small set of keys. Implementations are
       free to add their own numbers for additional keys.

       _I_n_i_t has to be called by the underlying terminal implemen­
       tation  with  the set of available function keys in _a_v_a_i_l_­
       _a_b_l_e and the interface procedure for reading in _i_f.

       _R_e_a_d reads a key  from  the  terminal.  On  success,  _R_e_a_d
       returns  TRUE.  FALSE  is returned in case of errors or if
       the interface has not yet been initialized by the underly­
       ing terminal implementation.

       _A_v_a_i_l_a_b_l_e returns the set of available function keys.

SSEEEE AALLSSOO
       _T_e_r_m_i_n_a_l_s_(_3_)   abstraction for terminals

AAUUTTHHOORR
       Ralf Beck







Release 0.5        Last change: 4 January 1996                  2


