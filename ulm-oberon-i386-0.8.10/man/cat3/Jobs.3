


Jobs(3)                Ulm's Oberon System                Jobs(3)


NNAAMMEE
       Jobs - initiation of background tasks

SSYYNNOOPPSSIISS
       TYPE Job = POINTER TO JobRec;
       TYPE JobRec = RECORD (Disciplines.ObjectRec) END;
       TYPE Procedure = PROCEDURE (job: Job);

       PROCEDURE Submit(job: Job; proc: Procedure);
       PROCEDURE CreateCondition(VAR condition: Conditions.Condition; job: Job);


DDEESSCCRRIIPPTTIIOONN
       _J_o_b_s  allows to submit jobs which are running in the back­
       ground, i.e. they do not block the calling task.  _J_o_b_s  is
       more  efficient in the use of memory operations than usual
       background initiations because it  maintaines  a  pool  of
       unused  tasks.   That  means  that not each call of _S_u_b_m_i_t
       causes a task to be newly created.

       _S_u_b_m_i_t passes _p_r_o_c to a separate task  for  invocation  of
       _p_r_o_c  with the given job (which may be an arbitrary exten­
       sion of _J_o_b) as parameter.  The job  but  not  necessarily
       the  associated  task  terminate  when _p_r_o_c returns.  Note
       that the _j_o_b parameter must be newly created for each call
       of  _S_u_b_m_i_t  and  _p_r_o_c must not call directly or indirectly
       _T_a_s_k_s_._T_e_r_m_i_n_a_t_e.

       _C_r_e_a_t_e_C_o_n_d_i_t_i_o_n returns a  condition  which  evaluates  to
       TTRRUUEE  when  _j_o_b  is  finished.  _C_r_e_a_t_e_C_o_n_d_i_t_i_o_n is free to
       return NNIILL if _j_o_b is already finished.

DDIIAAGGNNOOSSTTIICCSS
       _J_o_b_s does not generate any error events on its own.

SSEEEE AALLSSOO
       _T_a_s_k_s_(_3_)   general task management

BBUUGGSS
       _J_o_b_s belongs to the set of modules which may delay program
       termination  because  they  maintain a set of tasks (like,
       for example, _R_e_m_o_t_e_O_b_j_e_c_t_s_(_3_)).  The task pool is released
       if a garbage collection starts (_P_r_o_c_e_s_s_._s_t_a_r_t_O_f_G_a_r_b_a_g_e_C_o_l_­
       _l_e_c_t_i_o_n) or on program termination  (_P_r_o_c_e_s_s_._t_e_r_m_i_n_a_t_i_o_n),
       though.












Release 0.5       Last change: 30 December 1995                 1


