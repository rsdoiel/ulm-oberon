


Forwarders(3)          Ulm's Oberon System          Forwarders(3)


NNAAMMEE
       Forwarders - forward abstractions through filter objects

SSYYNNOOPPSSIISS
       TYPE Object = Services.Object;
       TYPE ForwardProc = PROCEDURE (from, to: Object);

       PROCEDURE Register(for: ARRAY OF CHAR; forward: ForwardProc);
       PROCEDURE RegisterObject(object: Object; forward: ForwardProc);
       PROCEDURE Update(object: Object; forward: ForwardProc);
       PROCEDURE Forward(from, to: Object);


DDEESSCCRRIIPPTTIIOONN
       _F_o_r_w_a_r_d_e_r_s supports the registration of abstractions which
       are  able  to  forward  their  operations  through  filter
       objects.   A filter object delegates all operations of the
       associated main abstraction in a possibly  modified  form.
       Usually,  filters  are not aware of all auxiliary abstrac­
       tions, and, on the other side, auxiliary  abstractions  do
       not notice the creation of filter objects.

       Each auxiliary abstraction (i.e. an abstraction which does
       not depend on a static type extension) should register its
       notification  procedure  with  _R_e_g_i_s_t_e_r.  If the auxiliary
       abstraction may be  applied  to  all  extensions  of  _S_e_r_­
       _v_i_c_e_s_._O_b_j_e_c_t,  ""  is  to  be  passed to _f_o_r.  Otherwise a
       valid type name which has  been  earlier  passed  to  _S_e_r_­
       _v_i_c_e_s_._C_r_e_a_t_e_T_y_p_e or _S_e_r_v_i_c_e_s_._I_n_i_t_T_y_p_e may be given to _f_o_r.
       In this case, _f_o_r_w_a_r_d gets only called  if  both  objects,
       _f_r_o_m and _t_o, are extensions of that type.

       _R_e_g_i_s_t_e_r_O_b_j_e_c_t  may  be called instead of _R_e_g_i_s_t_e_r if spe­
       cific objects are supported only and not all objects which
       are an extension of a specific type.  This is useful if an
       auxiliary abstraction is available on request only.

       _U_p_d_a_t_e may be called by  auxiliary  abstractions  when  an
       interface  gets  newly installed or changed in a way which
       requires _f_o_r_w_a_r_d to be called again for all dependants  of
       _o_b_j_e_c_t.   Note that _U_p_d_a_t_e unlike _R_e_g_i_s_t_e_r does not assure
       that the objects passed to _f_o_r_w_a_r_d will be of  a  specific
       extension.

       Each module which acts as a filter should call _F_o_r_w_a_r_d for
       each created filter object.  _f_r_o_m is the filter object and
       _t_o the object where the operations of the main abstraction
       are   delegated   to.     Note    that    _F_o_r_w_a_r_d    calls
       _R_e_s_o_u_r_c_e_s_._D_e_p_e_n_d_s_O_n   to  register  the  dependency.   The
       dependency relation between _f_r_o_m and _t_o will be  automati­
       cally removed if either _f_r_o_m or _t_o terminates.

DDIIAAGGNNOOSSTTIICCSS
       Some errors are caught by assertions:



Release 0.5         Last change: 20 March 1995                  1





Forwarders(3)          Ulm's Oberon System          Forwarders(3)


       ·      _R_e_g_i_s_t_e_r checks that _f_o_r is "" or a valid type name
              which is known to _S_e_r_v_i_c_e_s.

       ·      _F_o_r_w_a_r_d requires that _f_r_o_m and _t_o have been earlier
              initialized by _S_e_r_v_i_c_e_s_._I_n_i_t.

SSEEEE AALLSSOO
       _R_e_s_o_u_r_c_e_s_(_3_)   notification  of  state changes and manage­
                      ment of dependency relations
       _S_e_r_v_i_c_e_s_(_3_)    type system of the library















































Release 0.5         Last change: 20 March 1995                  2


