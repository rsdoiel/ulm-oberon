AVLTrees(3)                   Ulm's Oberon System                  AVLTrees(3)



[1mNAME[0m
       AVLTrees - height-balanced-binary trees for data-storage and retrieval

[1mSYNOPSIS[0m
       CONST ascending = 0;
       CONST descending = 1;
       TYPE Order = Iterators.Mode (* ascending, descending *)

       TYPE AVLTree = POINTER TO AVLTreeRec;
       TYPE AVLTree = RECORD (Services.ObjectRec) END;
       CONST keyUsed = 0
       CONST noSuchKey = 1
       CONST wrongKey = 2
       CONST errorcodes = 3

       TYPE ErrorCode = SHORTINT;
       TYPE ErrorEvent = POINTER TO ErrorEventRec;
       TYPE ErrorEventRec =
          RECORD
             (Events.EventRec)
             errorcode: ErrorCode;
             avlTree: AVLTree;
             object: Services.Object;
             key: Keys.Value;
          END;

       VAR error: Events.EventType;
       VAR errormsg: ARRAY errorcodes OF Events.Message;

       PROCEDURE Create(VAR new: AVLTree; key: Keys.Key);
       PROCEDURE GetKey(avlTree: AVLTree; VAR key: Keys.Key);
       PROCEDURE Add(avlTree: AVLTree; object: Services.Object) : BOOLEAN
       PROCEDURE Remove(avlTree: AVLTree; keyval: Keys.Value) : BOOLEAN;
       PROCEDURE Get(avlTree: AVLTree; keyval: Keys.Value;
                     VAR object: Services.Object) : BOOLEAN;
       PROCEDURE Card(avlTree: AVLTree) : INTEGER;
       PROCEDURE GetEntries(avlTree: AVLTree; order: Order;
                            from, to: Keys.Value; VAR it: Iterators.Iterator);
       PROCEDURE Exists(avlTree: AVLTree; keyValue: Keys.Value) : BOOLEAN;


[1mDESCRIPTION[0m
       [4mAVLTrees[24m  implements  AVL trees (named after Adelson-Velsky and Landis,
       the inventors).  Every AVL tree has an associated  key  with  a  total-
       order  relation  (see [4mKeys(3)[24m) and allows to store and retrieve objects
       that support that key. As AVL trees are sorted  height-balanced  binary
       trees,  all operations have a worst cases time of log([4mN[24m) where [4mN[24m is the
       number of objects stored in the AVL tree.

       [4mCreate[24m creates an empty AVL tree.  All objects to be added to this  AVL
       tree are expected to support [4mkey[24m which defines the sorting order.

       [4mGetKey[24m returns the [4mkey[24m of the given AVL tree.

       [4mAdd[24m adds [4mobject[24m to the AVL tree. This means, it can be retrieved by the
       key components as defined by the key of the given AVL tree. There  must
       not be an object with the same value (of its key) in the AVL tree.  [4mAdd[0m
       returns [1mTRUE [22mif [4mobject[24m has been added to [4mavlTree[24m, otherwise [1mFALSE[22m.

       [4mRemove[24m removes an object from the AVL tree specified by the given  key.
       A return value of [4mTRUE[24m indicates success.

       [4mGet[24m  returns  the object with the given value (with respect to key), if
       the AVL tree contains such an object. Otherwise [4mnoSuchKey[24m is raised.  A
       return value of [4mTRUE[24m indicates success.

       [4mCard[24m returns the number of objects in the AVL tree.

       [4mGetEntries[24m  returns an iterator of objects in AVL tree. Possible orders
       are ascending and descending. The range of objects to be  iterated  can
       be narrowed by [4mfrom[24m and [4mto[24m. If [1mNIL [22mis given for from (respectively to),
       iteration starts at the first (respectively stops at the last)  object.
       Note, that iteration must not be carried on over changing operations on
       the AVL tree.

       [4mExists[24m returns [1mTRUE[22m, iff the AVL tree contains an object with the given
       value (with respect to key).

[1mDIAGNOSTICS[0m
       Errors  lead  to events raised by [4mAVLTrees[24m or an underlying implementa-
       tion.  Following errors may be raised by [4mAVLTrees[24m:
       [4mkeyUsed[24m     There is already an object with this value (with respect to
                   key) in the AVL tree.
       [4mnoSuchKey[24m   The  AVL  tree  contains  no object with this value (of its
                   key).
       [4mwrongKey[24m    A parameter does not support the needed key.

[1mSEE ALSO[0m
       [4mKeys(3)[24m        support of total-order relations

[1mAUTHOR[0m
       Sven Lutz



Release 0.5                Last change: 19 July 2004               AVLTrees(3)
