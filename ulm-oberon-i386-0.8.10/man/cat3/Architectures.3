Architectures(3)              Ulm's Oberon System             Architectures(3)



[1mNAME[0m
       Architectures  - classification of hardware architectures and operating
       systems

[1mSYNOPSIS[0m
       TYPE Architecture = POINTER TO ArchitectureRec;
       TYPE ArchitectureRec =
          RECORD
             (PersistentDisciplines.ObjectRec)
             class: ConstStrings.String;
             variant: ConstStrings.String;
             vendor: ConstStrings.String;
             model: ConstStrings.String;
             os, osrelease: ConstStrings.String;
          END;

       VAR system: Architecture;

       PROCEDURE Create(VAR arch: Architecture; class: ARRAY OF CHAR);
       PROCEDURE CreateCopy(VAR arch: Architecture; orig: Architecture);
       PROCEDURE Compatible(arch1, arch2: Architecture;
                      VAR combined: Architecture) : BOOLEAN;
       PROCEDURE Identical(arch1, arch2: Architecture) : BOOLEAN;
       PROCEDURE GetString(arch: Architecture; VAR string: ConstStrings.String);
       PROCEDURE GetArch(string: ConstStrings.String; VAR arch: Architecture);


[1mDESCRIPTION[0m
       [4mArchitectures[24m supports the specification of sets of  environments  that
       are  characterized  by  their  machine processor and, optionally, their
       operating system. Objects of type [4mArchitectures.Architecture[24m contain  a
       large set of attributes that might be helpful in distinguishing differ-
       ent variants. But specifications should specify as  less  as  possible:
       The  less specified the more powerful the set of architectures covered.
       Following components contribute to the specification  of  an  architec-
       ture:

       [4mclass[24m       characterizes a hardware family (e.g. [4mi386[24m, [4mm68k[24m, or [4msparc[24m)
                   that provides some sort of compatibility.  This is the only
                   mandatory  component  of an architecture. All others may be
                   [1mNIL[22m. Class names should,  if  possible,  conform  to  those
                   returned by ``uname -p''.
       [4mvariant[24m     specifies  a  minor  variant  of  the hardware architecture
                   (e.g. [4m586[24m for [4mi386[24m, [4m68030[24m of [4mm68k[24m, or [4mv8[24m  of  [4msparc[24m).  Most
                   families are organized in a hierarchy of variants where all
                   new variants are  compatibility  preserving  extensions  of
                   older variants.
       [4mvendor[24m      names  the  vendor  who designed the hardware architecture.
                   This component should only be given  in  case  of  multiple
                   vendors   with  different  user-visible  extensions  and/or
                   restrictions.
       [4mmodel[24m       is a name of a set of conventions that specify the size  of
                   the address space and long integers.
       [4mos[24m          specifies the operating system if dependencies to it are of
                   concern. The names used should conform to those returned by
                   ``uname -s''.
       [4mosrelease[24m   restricts an architecture to a specific release of an oper-
                   ating system.  Release  numbers  should  conform  to  those
                   returned  by  ``uname  -r''. Note that the specification of
                   [4mosrelease[24m requires [4mos[24m to be non-[1mNIL[22m.

       Note that objects of type [4mArchitectures.Architecture[24m are persistent and
       may have persistent disciplines attached to it.

       [4mCreate[24m  creates an architecture specification of the given class.  Fur-
       ther components that need to be specified  should  initialized  shortly
       thereafter  preferably  by  using  [4mConstStrings.Create[24m.  Note, however,
       that thereafter architectures should be treated as constants, i.e. they
       must not be modified.  Instead [4mCreateCopy[24m allows to create a copy of an
       architecture that may be changed shortly thereafter.

       [4mCompatible[24m returns [1mTRUE [22mif [4march1[24m and [4march2[24m are compatible to each other
       that  means  that  either  the  set  of  architectures defined by [4march1[0m
       includes those of [4march2[24m or vice versa.  [4mCompatible[24m sets on success [4mcom-[0m
       [4mbined[24m to the intersection of both architecture sets.  [4mIdentical[24m returns
       [1mTRUE [22mif [4march1[24m and [4march2[24m are identical.

       Architectures may be converted from oder  to  strings  using  following
       EBNF grammar:

       [4mArchString[24m =   [4mHardware[24m [ ";" [4mModel[24m ] [ "-" [4mSoftware[24m ] .
       [4mHardware[24m =     [4mClass[24m [ ":" [ [4mVariant[24m ] [ ":" [4mVendor[24m ] ] .
       [4mModel[24m =        [4mAlphaNum[24m .
       [4mSoftware[24m =     [4mOS[24m [ ":" [4mRelease[24m ] .
       [4mClass[24m =        [4mAlphaNum[24m .
       [4mVariant[24m =      [4mAlphaNum[24m .
       [4mVendor[24m =       [4mAlphaNum[24m .
       [4mOS[24m =           [4mAlphaNum[24m .
       [4mRelease[24m =      [4mAlphaNum[24m .
       [4mGetString[24m  creates a constant string representing [4march[24m.  [4mGetArch[24m recon-
       structs an architecture object from [4mstring[24m which is set to [1mNIL [22min  case
       of syntax errors.

       The  architectural information of the current system can be made avail-
       able through [4msystem[24m if a module  that  is  familiar  with  the  current
       architecture was loaded to retrieve these informations.

[1mSEE ALSO[0m
       [4muname(1)[24m                      prints parameters of current system
       [4mConstStrings(3)[24m               constant strings of arbitrary length
       [4mPersistentDisciplines(3)[24m      persistent disciplines
       [4mPersistentObjects(3)[24m          operations for persistent objects
       [4mSPARCSolarisArchitecture(3)[24m   initializes [4msystem[24m on SPARC/Solaris plat-
                                     forms, if loaded
       [4mSysSolarisInfo(3)[24m             extracts various credentials  on  Solaris
                                     systems
       [4mSysUname(3)[24m                   credentials of the current operating sys-
                                     tem



Release 0.5               Last change: 10 March 2004          Architectures(3)
