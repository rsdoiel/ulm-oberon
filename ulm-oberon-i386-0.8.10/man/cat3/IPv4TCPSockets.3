IPv4TCPSockets(3)             Ulm's Oberon System            IPv4TCPSockets(3)



[1mNAME[0m
       IPv4TCPSockets - create and access IPv4 TCP sockets

[1mSYNOPSIS[0m
       TYPE Socket = UnixSockets.Socket;
       TYPE Address = IPv4Addresses.Address;
       TYPE SocketAddress = IPv4Addresses.SocketAddress;

       PROCEDURE Open(VAR s: Streams.Stream; address: SocketAddress;
                      bufmode: Streams.BufMode;
                      errors: RelatedEvents.Object) : BOOLEAN;
       PROCEDURE OpenAs(VAR s: Streams.Stream; address, bindto: SocketAddress;
                        bufmode: Streams.BufMode;
                        errors: RelatedEvents.Object) : BOOLEAN;

       PROCEDURE CreateOpenCondition(VAR condition: Conditions.Condition;
                                     address: SocketAddress);
       PROCEDURE CreateOpenConditionAs(VAR condition: Conditions.Condition;
                                       address, bindto: SocketAddress);
       PROCEDURE TestAndOpen(VAR s: Streams.Stream;
                             condition: Conditions.Condition;
                             bufmode: Streams.BufMode;
                             errors: RelatedEvents.Object) : BOOLEAN;
       PROCEDURE Drop(condition: Conditions.Condition);

       PROCEDURE CreateSomeSocket(VAR socket: Socket;
                                  VAR address: SocketAddress;
                                  errors: RelatedEvents.Object) : BOOLEAN;
       PROCEDURE CreateSomeSocketOn(VAR socket: Socket;
                                    VAR address: SocketAddress;
                                    errors: RelatedEvents.Object) : BOOLEAN;
       PROCEDURE Listen(VAR socket: Socket; portnum: INTEGER;
                        errors: RelatedEvents.Object) : BOOLEAN;
       PROCEDURE ListenOn(VAR socket: Socket; address: SocketAddress;
                          errors: RelatedEvents.Object) : BOOLEAN;
       PROCEDURE Accept(socket: Socket;
                        VAR s: Streams.Stream; bufmode: Streams.BufMode;
                        VAR peer: SocketAddress) : BOOLEAN;
       PROCEDURE Release(socket: Socket);

       PROCEDURE CreateAcceptCondition(VAR condition: Conditions.Condition;
                                       socket: Socket);

       PROCEDURE GetName(socket: Socket; VAR address: SocketAddress;
                         errors: RelatedEvents.Object) : BOOLEAN;


[1mDESCRIPTION[0m
       [4mIPv4TCPSockets[24m provides a stream interface for IPv4 TCP domain sockets.
       [4mInetTCP(3)[24m bases on [4mIPv4TCPSockets[24m and provides an interface which con-
       forms  to  [4mNetworks(3)[24m.   [4mIPv4TCPSockets[24m itself uses the generic stream
       interface for sockets of [4mUnixSockets(3)[24m.

       [4mOpen[24m tries to create a socket which is  connected  to  the  given  IPv4
       address.   IPv4  addresses consist of a 4-byte address which identifies
       the host and a 2-byte integer which identifies the communication  part-
       ner on that machine.

       [4mOpenAs[24m  works  like  [4mOpen[24m but allows in [4mbindto[24m a local IP address to be
       specified the socket is to be bound to locally. This is useful in  case
       of virtual IP addresses.

       [4mCreateOpenCondition[24m and [4mTestAndOpen[24m may be used like their counterparts
       of [4mNetworks(3)[24m for non-blocking openings.  [4mCreateOpenConditionAs[24m  works
       like  [4mCreateOpenCondition[24m but allows in [4mbindto[24m a local IP address to be
       specified (see [4mOpenAs[24m).  [4mDrop[24m may be used to get rid of conditions cre-
       ated by [4mCreateOpenCondition[24m or [4mCreateOpenConditionAs[24m which have not yet
       been successfully opened using [4mTestAndOpen[24m.

       [4mListen[24m creates a socket which may be later used to  wait  for  incoming
       connections.   Each  socket  is uniquely identified by a port number on
       the current machine.  [4mListenOn[24m works like [4mListen[24m but allows a full IPv4
       address to specified (mainly for virtual IP addresses).

       [4mCreateSomeSocket[24m  and  [4mCreateSomeSocketOn[24m  operate like [4mListen[24m and [4mLis-[0m
       [4mtenOn[24m but leave the selection of the port  number  up  to  the  system.
       Note  that  [4maddress[24m is an out-parameter only for [4mCreateSomeSocket[24m while
       [4mCreateSomeSocketOn[24m honors the host part of [4maddress[24m.  [4mRelease[24m allows  to
       release  a  socket  which  has been formerly created by [4mListen[24m.  [4mAccept[0m
       waits for incoming connections for [4msocket[24m.  The socket must  have  been
       created  and prepared by [4mListen[24m, [4mListenOn[24m, [4mCreateSomeSocket[24m, or [4mCreate-[0m
       [4mSomeSocketOn[24m.  The resulting stream [4ms[24m is connected with the new  commu-
       nication partner.  The address of the other side is stored into [4mpeer[24m.

       [4mCreateAcceptCondition[24m  creates a condition which evaluates to [1mTRUE [22mif a
       subsequent [4mAccept[24m would not block for [4msocket[24m.

       [4mGetName[24m returns the address of a socket.  This is  particularly  useful
       when  a  port number of [1m0 [22mhas been given to [4mListen[24m in order to delegate
       the choice to the system.


[1mDIAGNOSTICS[0m
       All procedures return [1mFALSE [22mand relate their error events to [4merrors[24m  in
       case of errors.

       Errors  are converted into events of [4mRelatedEvents[24m.  [4mAccept[24m relates its
       errors to [4msocket[24m.  By default, these events are being queued.

[1mSEE ALSO[0m
       [4mConditions(3)[24m          interface for conditions
       [4mInetTCP(3)[24m             offers IPv4 TCP domain sockets for [4mNetworks(3)[0m
       [4mIPv4Addresses(3)[24m       support of IPv4 addresses
       [4mNetworks(3)[24m            general abstraction for network connections
       [4mRelatedEvents(3)[24m       handling of error events
       [4mInetResolver(3)[24m        conversion of domain  style  addresses  to  IPv4
                              addresses
       [4mStreams(3)[24m             stream operations
       [4mUnixSockets(3)[24m         generic stream interface of sockets



Release 0.5              Last change: 21 January 2005        IPv4TCPSockets(3)
