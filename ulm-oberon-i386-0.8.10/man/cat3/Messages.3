


Messages(3)            Ulm's Oberon System            Messages(3)


NNAAMMEE
       Messages - management of messages for attachable handlers

SSYYNNOOPPSSIISS
       TYPE Object = Disciplines.Object;
       TYPE Message = POINTER TO MessageRec;
       TYPE MessageRec =
          RECORD
             (PersistentDisciplines.ObjectRec)
             processed: BOOLEAN;
             done: BOOLEAN;
             errors: RelatedEvents.Object;
          END;
       TYPE Handler = PROCEDURE (object: Object; VAR message: Message);

       PROCEDURE InstallHandler(object: Object; handler: Handler);
       PROCEDURE Send(object: Object; VAR message: Message);
       PROCEDURE Init(message: Message); (* doesn't call NEW *)


DDEESSCCRRIIPPTTIIOONN
       _M_e_s_s_a_g_e_s  allows  to  attach arbitrary message handlers to
       objects which are an extension of _D_i_s_c_i_p_l_i_n_e_s_._O_b_j_e_c_t.   An
       object  may  have  any number of message handlers attached
       which will be able to process every message  sent  to  the
       object.

       _M_e_s_s_a_g_e_s  itself  does not support the persistency of mes­
       sage handlers if objects are an extension  of  _P_e_r_s_i_s_t_e_n_t_­
       _D_i_s_c_i_p_l_i_n_e_s_._O_b_j_e_c_t.   Nevertheless, the persistency of the
       handlers may be achieved if they are all  associated  with
       the  object or one of its persistent disciplines.  In this
       case, _I_n_s_t_a_l_l_H_a_n_d_l_e_r has to be called by the _c_r_e_a_t_e inter­
       face  procedures of the object or its disciplines for _P_e_r_­
       _s_i_s_t_e_n_t_O_b_j_e_c_t_s.

       Modules which implement abstractions which  are  based  on
       messages have to

       ·      declare  extended types of _M_e_s_s_a_g_e which represents
              the operations and additional  components  for  the
              associated parameters.

       ·      provide  methods  for  _P_e_r_s_i_s_t_e_n_t_O_b_j_e_c_t_s to create,
              read  and  write  their  message  types.   This  is
              required  to  allow remote procedure calls and log­
              ging.

       ·      define a handler of type  _H_a_n_d_l_e_r  which  processes
              all  incoming  messages and ignores those which are
              not recognized.  If known  message  are  processed,
              the  _p_r_o_c_e_s_s_e_d  component and, on success, the _d_o_n_e
              component should be  set  to  TTRRUUEE.   If  _p_r_o_c_e_s_s_e_d
              becomes  TTRRUUEE,  no further message handlers will be



Release 0.5         Last change: 15 April 1999                  1





Messages(3)            Ulm's Oberon System            Messages(3)


              called for that message.  Errors have to be related
              to _e_r_r_o_r_s.

       ·      call  _I_n_s_t_a_l_l_H_a_n_d_l_e_r for each object whose messages
              are to be processed.

       All newly created messages must  be  initialized  by  _I_n_i_t
       (which  itself doesn't call NNEEWW).  _I_n_i_t sets _p_r_o_c_e_s_s_e_d and
       _d_o_n_e to FFAALLSSEE and initializes _e_r_r_o_r_s to an object with  an
       empty  error  queue  (see  _R_e_l_a_t_e_d_E_v_e_n_t_s_(_3_)  for details).
       Afterwards,  additional  components  which  represent  the
       parameters  of the operation may be set.  _S_e_n_d allows then
       to send the message to the given object.

       _M_e_s_s_a_g_e_s supports _F_o_r_w_a_r_d_e_r_s by  installing  a  forwarding
       handler for dependent objects.  Note that the installation
       of handlers is not affected  by  _F_o_r_w_a_r_d_e_r_s_._F_o_r_w_a_r_d,  i.e.
       _I_n_s_t_a_l_l_H_a_n_d_l_e_r installs always _h_a_n_d_l_e_r for _o_b_j_e_c_t indepen­
       dently from any dependency relations.  Local handlers take
       always precedence over the handlers of the object which is
       depended on.

DDIIAAGGNNOOSSTTIICCSS
       Errors lead to events  which  are  related  to  the  given
       stream  in  case  of input and output operations or to the
       object.  As described above, errors raised by message han­
       dlers  are  conventionally related to the _e_r_r_o_r_s component
       of the message.

SSEEEE AALLSSOO
       _F_o_r_w_a_r_d_e_r_s_(_3_)              general forwarding operation
       _P_e_r_s_i_s_t_e_n_t_O_b_j_e_c_t_s_(_3_)       input and output of  persistent
                                  objects
       _P_e_r_s_i_s_t_e_n_t_D_i_s_c_i_p_l_i_n_e_s_(_3_)   input  and  output  of attached
                                  data structures  of  persistent
                                  objects
       _P_e_r_s_i_s_t_e_n_t_E_v_e_n_t_s_(_3_)        input and output of events
       _R_e_l_a_t_e_d_E_v_e_n_t_s_(_3_)           error handling



















Release 0.5         Last change: 15 April 1999                  2


