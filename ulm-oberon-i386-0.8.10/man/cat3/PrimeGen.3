


PrimeGen(3)            Ulm's Oberon System            PrimeGen(3)


NNAAMMEE
       PrimeGen - implementation of a prime number generator

SSYYNNOOPPSSIISS
       PROCEDURE Generate(test: Primes.Test; n: INTEGER;
                          pLeast: REAL;
                          VAR prime: IntOperations.Operand);


DDEESSCCRRIIPPTTIIOONN
       _P_r_i_m_e_G_e_n  is an implementation of a prime number generator
       using _Q_u_i_c_k_P_r_i_m_e_T_e_s_t_(_3_) to speed up the generation, and  a
       probabilistic  testing algorithm given as a parameter (see
       _L_e_h_m_a_n_n_(_3_) and _R_a_b_i_n_M_i_l_l_e_r_(_3_)). Prime  number  generation,
       particularly  if  large prime numbers are wanted, is time-
       consuming.  Large prime numbers means for example _n set to
       512.

       _G_e_n_e_r_a_t_e generates a prime number in [2_n-1..2_n). The prob­
       ability that the generated number is prime is  greater  or
       equal  than _p_L_e_a_s_t.  _t_e_s_t specifies the used probabilistic
       testing algorithm and the result is stored in the  already
       initialized  value  _p_r_i_m_e which must be large enough for _n
       bits (check with _I_n_t_O_p_e_r_a_t_i_o_n_s._I_s_L_a_r_g_e_E_n_o_u_g_h_F_o_r).

DDIIAAGGNNOOSSTTIICCSS
       _P_r_i_m_e_G_e_n asserts that the variable used  for  storing  the
       prime  number  is already initialized and that the type of
       _p_r_i_m_e is large enough for _n bits.

AAUUTTHHOORR
       Frank B.J. Fischer

SSEEEE AALLSSOO
       _I_n_t_O_p_e_r_a_t_i_o_n_s_(_3_)    generic interface for arithmetic inte­
                           ger operations
       _P_r_i_m_e_s_(_3_)           general   abstraction   for  primality
                           testing algorithms
       _Q_u_i_c_k_P_r_i_m_e_T_e_s_t_(_3_)   quick test for small primes
       _R_a_b_i_n_M_i_l_l_e_r_(_3_)      implementation  of  the   Rabin-Miller
                           primality test algorithm
       _L_e_h_m_a_n_n_(_3_)          implementation  of the Lehmann primal­
                           ity test algorithm














Release 0.5         Last change: 3 April 1997                   1


