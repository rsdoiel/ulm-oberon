


OneWayHashes(3)        Ulm's Oberon System        OneWayHashes(3)


NNAAMMEE
       OneWayHashes  - general abstraction for one-way hash func­
       tions

SSYYNNOOPPSSIISS
       TYPE Hash = POINTER TO HashRec;
       TYPE HashRec = RECORD (Services.ObjectRec) END;
       TYPE Value = POINTER TO ValueRec;
       TYPE ValueRec = RECORD (PersistentDisciplines.ObjectRec) END;
       TYPE GenerateProc = PROCEDURE (hash: Hash; message: Streams.Stream;
                             VAR value: Value);
       TYPE BitlengthProc = PROCEDURE (hash: Hash): LONGINT;
       TYPE Interface = POINTER TO InterfaceRec;
       TYPE InterfaceRec =
          RECORD
             (Objects.ObjectRec)
             generate:  GenerateProc;
             bitlength: BitlengthProc;
          END;
       TYPE GeneratorProc = PROCEDURE (value: Value): Hash;
       TYPE EqualProc = PROCEDURE (value1, value2: Value): BOOLEAN;
       TYPE CreateStreamProc = PROCEDURE (value: Value; VAR stream: Streams.Stream);
       TYPE ValueInterface = POINTER TO ValueInterfaceRec;
       TYPE ValueInterfaceRec =
          RECORD
             (Objects.ObjectRec)
             generator:    GeneratorProc;
             equal:       EqualProc;
             createStream: CreateStreamProc;
          END;

       PROCEDURE Init(hash: Hash; if: Interface);
       PROCEDURE InitValue(value: Value; if: ValueInterface);
       PROCEDURE Generate(hash: Hash; message: Streams.Stream; VAR value: Value);
       PROCEDURE Bitlength(hash: Hash): LONGINT;
       PROCEDURE Generator(value: Value): Hash;
       PROCEDURE Equal(value1, value2: Value): BOOLEAN;
       PROCEDURE CreateStream(value: Value; VAR stream: Streams.Stream);


DDEESSCCRRIIPPTTIIOONN
       _O_n_e_W_a_y_H_a_s_h_e_s provides a general interface for one-way hash
       functions.  One-way  hash  functions operate on arbitrary-
       length messages and return fixed-length hash values.  Such
       functions have the following characteristics:

       ·      Given  the  message, it is easy to compute the hash
              value.

       ·      Given the hash value, it is  hard  to  compute  the
              message.

       ·      It  is  hard to find two messages yielding the same
              hash value.



Release 0.5         Last change: 4 April 1998                   1





OneWayHashes(3)        Ulm's Oberon System        OneWayHashes(3)


       The interface procedures of hashes should meet the  speci­
       fications following:

       _g_e_n_e_r_a_t_e:  PPRROOCCEEDDUURREE(_h_a_s_h:  _H_a_s_h; _m_e_s_s_a_g_e: _S_t_r_e_a_m_s_._S_t_r_e_a_m;
            VVAARR _v_a_l_u_e: _V_a_l_u_e);
            generate a hash value out of given _m_e_s_s_a_g_e  by  using
            the one-way hash function specified in _h_a_s_h and store
            the computed hash value in _v_a_l_u_e. _m_e_s_s_a_g_e is a stream
            that will be read sequentially until end of file.
       _b_i_t_l_e_n_g_t_h: PPRROOCCEEDDUURREE(_h_a_s_h: _H_a_s_h) : LLOONNGGIINNTT;
            return the fixed bit length of a hash value generated
            by the one-way hash function specified in _h_a_s_h.

       Moreover, interface procedures of hash values  are  speci­
       fied as follows:

       _g_e_n_e_r_a_t_o_r: PPRROOCCEEDDUURREE(_v_a_l_u_e: _V_a_l_u_e) : _H_a_s_h;
            return the hash that generated _v_a_l_u_e.
       _e_q_u_a_l: PPRROOCCEEDDUURREE(_v_a_l_u_e_1, _v_a_l_u_e_2: _V_a_l_u_e) : BBOOOOLLEEAANN;
            test  whether  two  values generated by same hash are
            equal.  This function is not supposed  to  be  called
            with values generated by different hashes.
       _c_r_e_a_t_e_S_t_r_e_a_m:     PPRROOCCEEDDUURREE(_v_a_l_u_e:     _V_a_l_u_e;    VVAARR    _s:
            _S_t_r_e_a_m_s_._S_t_r_e_a_m);
            open the memory area allocated by  _v_a_l_u_e  as  stream,
            for reading.

       _I_n_i_t  is  to  be called by implementations of _O_n_e_W_a_y_H_a_s_h_e_s
       and connects the interface _i_f to  _h_a_s_h.   Note  that  _S_e_r_­
       _v_i_c_e_s_._I_n_i_t must of course be called as well.

       _I_n_i_t_V_a_l_u_e  connects  values with their _O_n_e_W_a_y_H_a_s_h_e_s inter­
       face.  Note that  _P_e_r_s_i_s_t_e_n_t_O_b_j_e_c_t_s_._I_n_i_t  is  supposed  to
       have been called before.

       _G_e_n_e_r_a_t_e  uses the one-way hash function specified by _h_a_s_h
       to compute a hash value out of given  _m_e_s_s_a_g_e  and  stores
       the  result  in  _v_a_l_u_e.  _B_i_t_l_e_n_g_t_h  returns  the fixed bit
       length of hash values created by the one-way hash function
       specified by _h_a_s_h.

       _G_e_n_e_r_a_t_o_r  returns  the  hash  that created a given value.
       _E_q_u_a_l returns TTRRUUEE if two values  generated  by  the  same
       hash are equal.  By definition, this is a strong hint that
       the original messages were equal as well.  Note that  com­
       paring  values  of  different hash functions does not make
       sense and is in fact illegal.

       _C_r_e_a_t_e_S_t_r_e_a_m opens the memory area of a hash  value  as  a
       stream for reading.

AAUUTTHHOORR
       Frank B.J. Fischer




Release 0.5         Last change: 4 April 1998                   2





OneWayHashes(3)        Ulm's Oberon System        OneWayHashes(3)


       revised by Martin Hasch

SSEEEE AALLSSOO
       _S_t_r_e_a_m_s_(_3_)   stream operations
       _M_D_5_(_3_)       implementation  of the MD5 one-way hash func­
                    tion



















































Release 0.5         Last change: 4 April 1998                   3


