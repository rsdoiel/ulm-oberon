


SysSegments(3)         Ulm's Oberon System         SysSegments(3)


NNAAMMEE
       SysSegments - registration of reserved memory areas

SSYYNNOOPPSSIISS
       TYPE Address = LONGINT;
       TYPE Size = LONGINT;
       TYPE Mode = SHORTINT; (* <0: growing backward; =0 fixed; >0 growing forward *)
       TYPE Segment =
          RECORD
             addr: Address;
             size: Size;
             mode: Mode;
          END;

       PROCEDURE Register(addr: Address; size: Size; mode: Mode);
       PROCEDURE NumberOfSegments() : INTEGER;
       PROCEDURE GetSegment(segmentIndex: INTEGER; VAR segment: Segment);


DDEESSCCRRIIPPTTIIOONN
       _S_y_s_S_e_g_m_e_n_t_s  allows  the  registration  of reserved memory
       segments during the runtime startup which are not free for
       storage allocation.  Later, these segments may be examined
       by the storage allocator.

       A segment is given by the interval [[_a_d_d_r,  _a_d_d_r++_s_i_z_e))  and
       the  growing  mode  which  is specified by _m_o_d_e.  Usually,
       there should be only one growing segment: the  stack  seg­
       ment which is provided by the invocation environment.

       _R_e_g_i_s_t_e_r  is  to  be  called only by the runtime start and
       registers the given segment.

       _N_u_m_b_e_r_O_f_S_e_g_m_e_n_t_s returns the number of registered segments
       and  _G_e_t_S_e_g_m_e_n_t  allows  to  retrieve the segments.  Valid
       segment indexes range from 00 to _N_u_m_b_e_r_O_f_S_e_g_m_e_n_t_s(())--11.

       The current runtime start declares following segments:
       _0   program text and static data
       _1   preallocated area for _S_t_o_r_a_g_e
       _2   stack of main coroutine
       _3   non-accessible area at end of address space

SSEEEE AALLSSOO
       _S_t_o_r_a_g_e_(_3_)   compiler interface of the storage allocator












Release 0.5         Last change: 10 June 1993                   1


