


Disciplines(3)         Ulm's Oberon System         Disciplines(3)


NNAAMMEE
       Disciplines   -   attach  additional  data  structures  to
       abstract datatypes

SSYYNNOOPPSSIISS
       TYPE Identifier = LONGINT;
       TYPE Discipline = POINTER TO DisciplineRec;
       TYPE DisciplineRec =
          RECORD
             (Objects.ObjectRec)
             id: Identifier;
          END;
       TYPE Object = POINTER TO ObjectRec;
       TYPE ObjectRec =
          RECORD
             (Objects.ObjectRec)
          END;

       PROCEDURE Unique() : Identifier;
       PROCEDURE Add(object: Object; discipline: Discipline);
       PROCEDURE Remove(object: Object; id: Identifier);
       PROCEDURE Seek(object: Object; id: Identifier;
                      VAR discipline: Discipline) : BOOLEAN;


DDEESSCCRRIIPPTTIIOONN
       _D_i_s_c_i_p_l_i_n_e_s allows to attach additional data structures to
       abstract  datatypes like _S_t_r_e_a_m_s.  These added data struc­
       tures permit to parametrize operations and thus to  define
       disciplines.

       Every  module  which  implements  a discipline should call
       _U_n_i_q_u_e during its initialization.  The returned identifier
       is  needed later to locate the data structures contributed
       by a specific module.

       _A_d_d_s attaches _d_i_s_c_i_p_l_i_n_e to  _o_b_j_e_c_t.   The  identifier  is
       given  by the _i_d component of _d_i_s_c_i_p_l_i_n_e.  Adding a disci­
       pline with the same identifier twice to  the  same  object
       causes  the discipline to be replaced.  One discipline may
       be attached to any number of objects.

       _R_e_m_o_v_e removes the  discipline  with  the  given  _i_d  from
       _o_b_j_e_c_t, if it exists.

       _S_e_e_k  seeks for a discipline with the given _i_d and returns
       it in _d_i_s_c_i_p_l_i_n_e,  if  it  exists.   Otherwise,  FFAALLSSEE  is
       returned.

EEXXAAMMPPLLEE
       _S_t_r_e_a_m_s_._S_t_r_e_a_m is an extension of _D_i_s_c_i_p_l_i_n_e_s_._O_b_j_e_c_t which
       allows to attach parameters to streams:

          TYPE



Release 0.5       Last change: 16 September 1996                1





Disciplines(3)         Ulm's Oberon System         Disciplines(3)


             LineTermDiscipline = POINTER TO LineTermDisciplineRec;
             LineTermDisciplineRec =
             RECORD
                (Disciplines.DisciplineRec)
                lineterm: CHAR;
             END;

          VAR linetermid: Disciplines.Identifier;

          PROCEDURE SetLineTerminator(s: Streams.Stream; lineterm: CHAR);
             VAR
             disc: LineTermDiscipline;
          BEGIN
             NEW(disc); disc.id := linetermid; disc.lineterm := lineterm;
             Disciplines.Add(s, disc);
          END SetLineTerminator;

          PROCEDURE WriteLn(s: Streams.Stream) : BOOLEAN;
             VAR
             disc: LineTermDiscipline;
          BEGIN
             IF Disciplines.Seek(s, linetermid, disc) THEN
             RETURN Streams.WriteByte(s, disc.lineterm)
             ELSE
             (* take default value *)
             RETURN Streams.WriteByte(s, ASCII.nl)
             END;
          END WriteLn;

       BEGIN (* initialization *)
          linetermid := Disciplines.Unique();
          (* ... *)


SSEEEE AALLSSOO
       _P_e_r_s_i_s_t_e_n_t_D_i_s_c_i_p_l_i_n_e_s_(_3_)   support  of  persistent  disci­
                                  plines
       _R_e_s_o_u_r_c_e_s_(_3_)               state changes of objects
       _S_e_r_v_i_c_e_s_(_3_)                major   extension   of   _D_i_s_c_i_­
                                  _p_l_i_n_e_s_._O_b_j_e_c_t
       _S_t_r_e_a_m_D_i_s_c_i_p_l_i_n_e_s_(_3_)       example for a public discipline
















Release 0.5       Last change: 16 September 1996                2


