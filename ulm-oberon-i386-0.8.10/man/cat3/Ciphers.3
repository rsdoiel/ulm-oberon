


Ciphers(3)             Ulm's Oberon System             Ciphers(3)


NNAAMMEE
       Ciphers - general abstraction for crypto systems

SSYYNNOOPPSSIISS
       TYPE Cipher = POINTER TO CipherRec;
       TYPE CipherRec = RECORD (PersistentDisciplines.ObjectRec) END;
       TYPE CryptProc = PROCEDURE (in: Streams.Stream; key: Cipher;
                                   length: INTEGER; out: Streams.Stream) : BOOLEAN;
       TYPE Interface = POINTER TO InterfaceRec;
       TYPE InterfaceRec =
          RECORD
             (Objects.ObjectRec)
             encrypt, decrypt : CryptProc;
          END;
       PROCEDURE Init(key: Cipher; if: Interface);
       PROCEDURE Encrypt(in: Streams.Stream; key: Cipher;
                         out: Streams.Stream) : BOOLEAN;
       PROCEDURE Decrypt(in: Streams.Stream; key: Cipher;
                         out: Streams.Stream) : BOOLEAN;
       PROCEDURE EncryptPart(in: Streams.Stream; key: Cipher;
                             length: INTEGER; out: Streams.Stream) : BOOLEAN;
       PROCEDURE DecryptPart(in: Streams.Stream; key: Cipher;
                             length: INTEGER; out: Streams.Stream) : BOOLEAN;



DDEESSCCRRIIPPTTIIOONN
       _C_i_p_h_e_r_s defines a general abstraction for the use of cryp­
       tographic methods.

       An implementation of _C_i_p_h_e_r_s must provide  two  procedures
       for encrypting and decrypting streams. Neither _e_n_c_r_y_p_t nor
       _d_e_c_r_y_p_t may be given as NNIILL. _I_n_i_t connects  these  methods
       by  the  interface  _i_f  with the cipher _k_e_y.  Note that an
       implementation of a  specific  crypto  system  should  not
       directly depend on _C_i_p_h_e_r_s but instead on more appropriate
       abstractions like _A_s_y_m_m_e_t_r_i_c_C_i_p_h_e_r_s_(_3_), _B_l_o_c_k_C_i_p_h_e_r_s_(_3_) or
       _S_t_r_e_a_m_C_i_p_h_e_r_s_(_3_).

       _E_n_c_r_y_p_t  encrypts  the  stream _i_n using the cipher _k_e_y and
       writes the output onto the stream _o_u_t.   _D_e_c_r_y_p_t  decrypts
       the  stream  _i_n.  _E_n_c_r_y_p_t_P_a_r_t and _D_e_c_r_y_p_t_P_a_r_t operate only
       on the next _l_e_n_g_t_h bytes of the input stream.  In case  of
       any error FFAALLSSEE is returned, otherwise TTRRUUEE.

SSEEEE AALLSSOO
       _A_s_y_m_m_e_t_r_i_c_C_i_p_h_e_r_s_(_3_)   abstraction  for  the use of public
                              key ciphers
       _B_l_o_c_k_C_i_p_h_e_r_s_(_3_)        abstraction for the  use  of  block
                              ciphers
       _P_e_r_s_i_s_t_e_n_t_O_b_j_e_c_t_s_(_3_)   abstraction for persistent objects
       _S_t_r_e_a_m_C_i_p_h_e_r_s_(_3_)       abstraction  for  the use of stream
                              ciphers




Release 0.5       Last change: 17 September 1996                1





Ciphers(3)             Ulm's Oberon System             Ciphers(3)


AAUUTTHHOORR
       Michael Szczuka, University of Ulm























































Release 0.5       Last change: 17 September 1996                2


