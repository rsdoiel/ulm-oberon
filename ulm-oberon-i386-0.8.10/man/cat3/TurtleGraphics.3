TurtleGraphics(3)             Ulm's Oberon System            TurtleGraphics(3)



[1mNAME[0m
       TurtleGraphics - subset of turtle graphic operations for plotters

[1mSYNOPSIS[0m
       TYPE Graphic = POINTER TO GraphicRec;
       TYPE GraphicRec = RECORD (Services.ObjectRec) END;

       PROCEDURE Create(VAR graphic: Graphic; angle: REAL);

       PROCEDURE EnableRoundCorners(graphic: Graphic; cornerFraction: REAL);

       PROCEDURE PenDown(graphic: Graphic);
       PROCEDURE PenUp(graphic: Graphic);

       PROCEDURE Save(graphic: Graphic);
       PROCEDURE Restore(graphic: Graphic);

       PROCEDURE Left(graphic: Graphic);
       PROCEDURE Right(graphic: Graphic);
       PROCEDURE Forward(graphic: Graphic);

       PROCEDURE ApplySymbols(graphic: Graphic; symbols: ARRAY OF CHAR);

       PROCEDURE Plot(graphic: Graphic; plotter: Plotters.Plotter);


[1mDESCRIPTION[0m
       Turtle  graphics  were invented for the Logo programming language which
       was developed 1967 at MIT by Seymour Papert, Wallace Feurzeig, and oth-
       ers.   A turtle graphic maintains a state consisting of a position on a
       2-dimensional plane, a direction, and a pen  position.  All  operations
       work relative to the current position and the current direction.

       [4mCreate[24m  creates  a  new  turtle graphic system.  Turns (be it left oder
       right) operate with a fixed angle which is to be given in degrees. Tra-
       ditional turtle graphics use an angle of 90 degrees.

       [4mEnableRoundCorners[24m requests tangential arcs to be used for the corners.
       The fraction out of the range (0,0.5) specifies the part of a unit line
       which  may  be  used  for  it. This is, for example, helpful for Dragon
       curves which would otherwise self-intersect. Round corners are not used
       at branch positions (generated by [4mSave[24m and [4mRestore[24m).

       [4mPenDown[24m  causes future forward moves to be drawn. Initially, the pen is
       already down.  [4mPenUp[24m causes following forward moves  not  to  be  drawn
       until [4mPenDown[24m is called.

       [4mSave[24m  saves the current state (current position, current direction, and
       pen position) for later restoral by [4mRestore[24m.  [4mRestore[24m restores the pre-
       viously saved state.  [4mSave[24m and [4mRestore[24m can be arbitrarily nested.

       [4mLeft[24m  turns  the  current  direction  to the left by the angle that was
       given to [4mCreate[24m.  [4mRight[24m turns the current direction to the right.

       [4mForward[24m moves forward one unit and causes, if the pen position is down,
       a line to be drawn.

       [4mApplySymbols[24m draws a string of Lindenmayer symbols from which following
       are supported:
           [4mPenDown[24m, [4mForward[24m [4mPenUp[24m, [4mForward[24m [4mLeft[24m [4mRight[24m [4mSave[24m [4mRestore[0m

       All other symbols are silently ignored.

       [4mPlot[24m draws the turtle graphic [4mgraphic[24m on [4mplotter[24m with a scale  that  is
       automatically adapted to the plot area.

[1mDIAGNOSTICS[0m
       Assertions  verify  that  the  corner fraction of [4mEnableRoundCorners[24m is
       within the range (0,0.5) and that [4mSave[24m and [4mRestore[24m  are  properly  bal-
       anced. No error events are generated.

[1mSEE ALSO[0m
       [4mPlotters(3)[24m   general plotter interface

       Przemyslaw Prusinkiewicz, Aristid Lindenmayer, ``The Algorithmic Beauty
       of Plants'', Springer-Verlag



Release 0.5                Last change: 8 April 2004         TurtleGraphics(3)
