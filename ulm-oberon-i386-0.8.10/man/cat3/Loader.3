


Loader(3)              Ulm's Oberon System              Loader(3)


NNAAMMEE
       Loader - load and initialize modules

SSYYNNOOPPSSIISS
       TYPE LoadProc = PROCEDURE (module: ARRAY OF CHAR;
                                  errors: RelatedEvents.Object) : BOOLEAN;
       TYPE LoadServiceProc = PROCEDURE (service, for: ARRAY OF CHAR;
                                         errors: RelatedEvents.Object) : BOOLEAN;
       TYPE Interface = POINTER TO InterfaceRec;
       TYPE InterfaceRec =
          RECORD
             load: LoadProc;
             loadService: LoadServiceProc;
          END;

       CONST noInterface = 0;
       CONST moduleNotLoaded = 1;
       CONST servicesNotSupported = 2;
       CONST serviceNotLoaded = 3;
       CONST errorcodes = 4;
       TYPE ErrorEvent = POINTER TO ErrorEventRec;
       TYPE ErrorEventRec =
          RECORD
             (Events.EventRec)
             errorcode: SHORTINT;
             module: Events.Message; (* module or service name *)
             for: Events.Message; (* type name for serviceNotLoaded *)
          END;
       VAR errormsg: ARRAY errorcodes OF Events.Message;
       VAR error: Events.EventType;

       PROCEDURE SetInterface(if: Interface);

       PROCEDURE Load(module: ARRAY OF CHAR;
                      errors: RelatedEvents.Object) : BOOLEAN;
       PROCEDURE LoadService(service, for: ARRAY OF CHAR;
                             errors: RelatedEvents.Object) : BOOLEAN;


DDEESSCCRRIIPPTTIIOONN
       _L_o_a_d_e_r provides a system-independent interface to the mod­
       ule loader.  Some implementations provide a dynamic module
       loader  while  others are only able to look for the module
       in a statically linked execution image.

       _S_e_t_I_n_t_e_r_f_a_c_e should be called during the initialization of
       the  module which performs load operations.  The _l_o_a_d pro­
       cedure component is expected to meet the specification  of
       _L_o_a_d.  The interface procedure _l_o_a_d_S_e_r_v_i_c_e is optional and
       may be set to NNIILL.

       _L_o_a_d tries to load and initialize the given module.  _L_o_a_d_­
       _S_e_r_v_i_c_e  tries  to  locate a module which offers the given
       service (see _S_e_r_v_i_c_e_s_(_3_)) for the type named _f_o_r, and,  if



Release 0.5       Last change: 16 September 1996                1





Loader(3)              Ulm's Oberon System              Loader(3)


       successful, to load it.

       Note that _L_o_a_d_e_r calls _S_e_r_v_i_c_e_s_._I_n_i_t_L_o_a_d_e_r during its ini­
       tialization.

DDIIAAGGNNOOSSTTIICCSS
       _L_o_a_d and _L_o_a_d_S_e_r_v_i_c_e return FFAALLSSEE in error  case.   Errors
       lead to events which are related to the _e_r_r_o_r_s parameter:
       _n_o_I_n_t_e_r_f_a_c_e       _S_e_t_I_n_t_e_r_f_a_c_e has not been called yet.
       _m_o_d_u_l_e_N_o_t_L_o_a_d_e_d   The  interface  procedure  _l_o_a_d returned
                         FFAALLSSEE.
       _s_e_r_v_i_c_e_N_o_t_L_o_a_d_e_d  The  interface   procedure   _l_o_a_d_S_e_r_v_i_c_e
                         returned FFAALLSSEE.
       _s_e_r_v_i_c_e_s_N_o_t_S_u_p_p_o_r_t_ei_ds returned if the loader is not able to
                         locate service offers (i.e. if the _l_o_a_d_­
                         _S_e_r_v_i_c_e interface procedure was NNIILL).

SSEEEE AALLSSOO
       _S_e_r_v_i_c_e_s_(_3_)    definition of services and type names
       _S_y_s_L_o_a_d_e_r_(_3_)   the system-dependent implementation of this
                      interface




































Release 0.5       Last change: 16 September 1996                2


