


MC68881(3)             Ulm's Oberon System             MC68881(3)


NNAAMMEE
       MC68881 - library interface to MC68881 instructions

SSYYNNOOPPSSIISS
       CONST available = TRUE;

       (* rounding modes *)
       CONST toNearest = 0;
       CONST towardZero = 1;
       CONST towardMinusInfinity = 2;
       CONST towardPlusInfinity = 3;

       (* rounding precision *)
       CONST extended = 0; single = 1; double = 2;

       (* exceptions *)
       CONST branchOnUnordered = 0;
       CONST signalingNotANumber = 1;
       CONST operandError = 2;
       CONST overflow = 3;
       CONST underflow = 4;
       CONST divideByZero = 5;
       CONST inexactOperation = 6;
       CONST inexactDecimalInput = 7;
       CONST floatlen = 4; (* length of a single precision real number *)

       PROCEDURE FACOS(x: LONGREAL) : LONGREAL;
       PROCEDURE FASIN(x: LONGREAL) : LONGREAL;
       PROCEDURE FATAN(x: LONGREAL) : LONGREAL;
       PROCEDURE FATANH(x: LONGREAL) : LONGREAL;
       PROCEDURE FCOS(x: LONGREAL) : LONGREAL;
       PROCEDURE FCOSH(x: LONGREAL) : LONGREAL;
       PROCEDURE FETOX(x: LONGREAL) : LONGREAL;
       PROCEDURE FETOXM1(x: LONGREAL) : LONGREAL;
       PROCEDURE FGETEXP(x: LONGREAL) : LONGREAL;
       PROCEDURE FGETMAN(x: LONGREAL) : LONGREAL;
       PROCEDURE FLOG10(x: LONGREAL) : LONGREAL;
       PROCEDURE FLOG2(x: LONGREAL) : LONGREAL;
       PROCEDURE FLOGN(x: LONGREAL) : LONGREAL;
       PROCEDURE FLOGNP1(x: LONGREAL) : LONGREAL;
       PROCEDURE FSIN(x: LONGREAL) : LONGREAL;
       PROCEDURE FSINH(x: LONGREAL) : LONGREAL;
       PROCEDURE FSQRT(x: LONGREAL) : LONGREAL;
       PROCEDURE FTAN(x: LONGREAL) : LONGREAL;
       PROCEDURE FTANH(x: LONGREAL) : LONGREAL;
       PROCEDURE FTENTOX(x: LONGREAL) : LONGREAL;
       PROCEDURE FTWOTOX(x: LONGREAL) : LONGREAL;

       PROCEDURE GetExceptionEnable(VAR exceptions: SET);
       PROCEDURE SetExceptionEnable(exceptions: SET);

       PROCEDURE GetRoundingMode(VAR precision, mode: INTEGER);
       PROCEDURE SetRoundingMode(precision, mode: INTEGER);




Release 0.5         Last change: 22 April 1992                  1





MC68881(3)             Ulm's Oberon System             MC68881(3)


       PROCEDURE RealToFloat(real: LONGREAL; VAR float: ARRAY OF BYTE);
       PROCEDURE FloatToReal(float: ARRAY OF BYTE; VAR real: LONGREAL);


DDEESSCCRRIIPPTTIIOONN
       The  implemenation  of this module is written in assembler
       and offers a library interface to  some  MC68881  instruc­
       tions.

       The constant _a_v_a_i_l_a_b_l_e is TTRRUUEE if a MC68881 or upward com­
       patible processor  is  present.   Otherwise  _a_v_a_i_l_a_b_l_e  is
       FFAALLSSEE  and  all operations are no-operations.  This allows
       some system modules to take advantage  of  known  floating
       processors in a portable manner.

       The  procedures _F_A_C_O_S to _F_T_W_O_T_O_X execute the equally named
       instructions.

       The MC68881 supports 8 exceptions which can be  separately
       enabled or disabled:
       _b_r_a_n_c_h_O_n_U_n_o_r_d_e_r_e_d     comparison of defined values against
                             undefined values
       _s_i_g_n_a_l_i_n_g_N_o_t_A_N_u_m_b_e_r   a signaling not-a-number was used as
                             operand, see _I_E_E_E_(_3_) for details
       _o_p_e_r_a_n_d_E_r_r_o_r          operation has no mathematical inter­
                             pretation for  the  given  operands,
                             e.g.  operand  is less than zero for
                             FFLLOOGGNN
       _o_v_e_r_f_l_o_w              the result of  an  operation  equals
                             plus or minus infinity
       _u_n_d_e_r_f_l_o_w             a non-zero result gets zero
       _d_i_v_i_d_e_B_y_Z_e_r_o          division by zero
       _i_n_e_x_a_c_t_O_p_e_r_a_t_i_o_n      the  exact result of an operation is
                             not representable
       _i_n_e_x_a_c_t_D_e_c_i_m_a_l_I_n_p_u_t   decimal format cannot be represented
                             exactly;  this  exception  does  not
                             arise in Oberon programs
       All exceptions are disabled by default.  _S_y_s_S_i_g_n_a_l_s_._F_P_E is
       raised  if  an  enabled  exception  arises.   The faulting
       instruction is re-executed if execution continues.  Thus a
       floating point exception handler must either not return or
       disable the arised exception to avoid an infinite loop.

       The MC68881 supports four rounding modes:
       +--------------------------------------------------------------+
       |rounding mode         examples for real to integer conversion |
       |                        -1.9       -1.1       1.1       1.9   |
       +--------------------------------------------------------------+
       |_t_o_N_e_a_r_e_s_t               -2         -1         1         2     |
       |_t_o_w_a_r_d_Z_e_r_o              -1         -1         1         1     |
       |_t_o_w_a_r_d_M_i_n_u_s_I_n_f_i_n_i_t_y     -2         -2         1         1     |
       |_t_o_w_a_r_d_P_l_u_s_I_n_f_i_n_i_t_y      -1         -1         2         2     |
       +--------------------------------------------------------------+
       Note that  EENNTTIIEERR  is  a  conversion  with  rounding  mode



Release 0.5         Last change: 22 April 1992                  2





MC68881(3)             Ulm's Oberon System             MC68881(3)


       towards  minus  infinity.  The inline code of the compiler
       for EENNTTIIEERR saves  the  current  rounding  mode,  sets  the
       rounding mode towards minus infinity, executes the conver­
       sion, and restores the old rounding  mode.   The  rounding
       precision  is  either  _e_x_t_e_n_d_e_d,  _s_i_n_g_l_e,  or _d_o_u_b_l_e.  The
       rounding precision is set to _e_x_t_e_n_d_e_d at beginning of exe­
       cution and must not be changed (else floating point opera­
       tions would behave unexpected, e.g. the precision of  LLOONN­­
       GGRREEAALL   and   RREEAALL  differs  from  the  specifications  of
       _R_e_a_l_s_(_3_)).  _G_e_t_R_o_u_n_d_i_n_g_M_o_d_e returns current rounding  mode
       and  precision.   _S_e_t_R_o_u_n_d_i_n_g_M_o_d_e sets the rounding preci­
       sion to _p_r_e_c_i_s_i_o_n and the rounding mode to _m_o_d_e.

       The Oberon compiler maps RREEAALL to the 8-byte double  preci­
       sion format and LLOONNGGRREEAALL to the 12-byte extended precision
       format and does not  provide  a  basic  datatype  for  the
       4-byte  single precision format.  _R_e_a_l_T_o_F_l_o_a_t and _F_l_o_a_t_T_o_­
       _R_e_a_l allow to convert to and from the 4-byte single preci­
       sion  format  (e.g.  to  export  or  import real values in
       binary format to other programming languages).  Both  pro­
       cedures  use  AARRRRAAYY  OOFF BBYYTTEE for the 4-byte real value for
       convenience.  The constant _f_l_o_a_t_l_e_n specifies  the  neces­
       sary  number  of  bytes  to  hold  a single precision real
       value.

SSEEEE AALLSSOO
       _I_E_E_E_(_3_)         IEEE floating point formats
       _R_e_a_l_s_(_3_)        real conversions
       _S_y_s_S_i_g_n_a_l_s_(_3_)   floating point exceptions




























Release 0.5         Last change: 22 April 1992                  3


