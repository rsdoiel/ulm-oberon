


Shadows(3)             Ulm's Oberon System             Shadows(3)


NNAAMMEE
       Shadows - call-back objects on top of _R_e_m_o_t_e_O_b_j_e_c_t_s_(_3_)

SSYYNNOOPPSSIISS
       TYPE Shadow = POINTER TO ShadowRec;
       TYPE ShadowRec = RECORD (Services.ObjectRec) END;

       PROCEDURE InitObject(object: Services.Object);
       PROCEDURE Create(VAR shadow: Shadow; proxy: Services.Object);
       PROCEDURE Init(shadow: Shadow; proxy: Services.Object);

       PROCEDURE Send(object: Services.Object; VAR message: Messages.Message);
       PROCEDURE SendExcept(object: Services.Object; shadow: Shadow;
                            VAR message: Messages.Message);

       PROCEDURE GetProxy(shadow: Shadow; VAR proxy: Services.Object);
       PROCEDURE GetShadow(proxy: Services.Object; VAR shadow: Shadow);


DDEESSCCRRIIPPTTIIOONN
       _R_e_m_o_t_e_O_b_j_e_c_t_s_(_3_)  supports  the  delegation  of operations
       from proxy objects to their  associated  original  object.
       In  some  cases,  it turns out to be necessary to delegate
       operations from the side of the  original  object  to  all
       sides  with  proxy objects.  _S_h_a_d_o_w_s supports this on base
       of shadow objects.  Shadow objects are created on the side
       of the proxy object and exported to the side of the origi­
       nal object.  _S_h_a_d_o_w_s maintains a list of shadow proxies at
       the  side  of the original object and allows operations to
       be forwarded to all (or nearly all) shadow objects  which,
       in turn, may operate on the proxy objects.

       _S_h_a_d_o_w_s  must  be  supported by that module which installs
       its interface at _R_e_m_o_t_e_O_b_j_e_c_t_s_(_3_):

       ·      _I_n_i_t_O_b_j_e_c_t  is  to  be  called  by  the   _R_e_m_o_t_e_O_b_­
              _j_e_c_t_s_._G_e_t_P_a_r_a_m_s_P_r_o_c  interface procedure to prepare
              an object to receive messages about  newly  created
              proxies of it.

       ·      _C_r_e_a_t_e  is to be called by the _R_e_m_o_t_e_O_b_j_e_c_t_s_._R_e_g_i_s_­
              _t_e_r_P_r_o_c interface procedure  to  register  a  proxy
              object  at  the  side of the original object.  _I_n_i_t
              may be used instead of _C_r_e_a_t_e if  an  extension  of
              _S_h_a_d_o_w_s_._S_h_a_d_o_w  is  used.  Note that shadow objects
              depend on their associated proxy objects and  hence
              terminate  when  their proxy object terminates (see
              _R_e_s_o_u_r_c_e_s_(_3_)).

       _S_e_n_d sends the given message to all shadow objects of  the
       given  object.  This is a no-operation if the given object
       is not shadowed.  Note that _S_h_a_d_o_w_s parallelizes the  for­
       warding of messages to all shadow objects by maintaining a
       task for each shadow proxy.  _S_e_n_d_E_x_c_e_p_t  works  like  _S_e_n_d



Release 0.5       Last change: 19 December 1995                 1





Shadows(3)             Ulm's Oberon System             Shadows(3)


       but  suppresses  the  delivery of the message to the given
       shadow object.  This allows to  forward  a  message  which
       came  from  one  of the shadow objects to all other shadow
       objects.

       _G_e_t_P_r_o_x_y allows (on the  side  of  the  proxy  object)  to
       retrieve the associated proxy object of a shadow.  This is
       useful for message handlers of shadow objects.   _G_e_t_S_h_a_d_o_w
       returns  the shadow of a proxy object.  This may be useful
       for other parties which are  interested  in  installing  a
       message handler for the shadow object.

DDIIAAGGNNOOSSTTIICCSS
       _S_h_a_d_o_w_s  does not generate any error events on its own but
       forwards the  events  of  _M_e_s_s_a_g_e_s_(_3_)  to  the  associated
       objects.   _S_e_n_d and _S_e_n_d_E_x_c_e_p_t silently ignore the message
       if the given object is not shadowed.   _G_e_t_P_r_o_x_y  and  _G_e_t_­
       _S_h_a_d_o_w  return  NNIILL in error cases (if it is called on the
       wrong side or if that object is not shadowed).

SSEEEE AALLSSOO
       _M_e_s_s_a_g_e_(_3_)         message handling
       _R_e_m_o_t_e_O_b_j_e_c_t_s_(_3_)   delegation  of   messages   to   remote
                          objects
       _R_e_s_o_u_r_c_e_s_(_3_)       life-time dependencies between objects
































Release 0.5       Last change: 19 December 1995                 2


