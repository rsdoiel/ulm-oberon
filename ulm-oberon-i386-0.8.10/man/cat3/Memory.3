


Memory(3)              Ulm's Oberon System              Memory(3)


NNAAMMEE
       Memory - address space management

SSYYNNOOPPSSIISS
       TYPE Address = Types.UntracedAddress;
       TYPE Size = Types.Size;
       (* allocation mode *)
       CONST fixed = { 0 };
       CONST growingForward = { 1 };
       CONST growingBackward = { 0, 1 };
       CONST redzoneProtected = { 2 };
       TYPE AllocationMode = SET;
       (* status returns for memory locations *)
       CONST stAllocated = 1;
       CONST stRedzone = 2;
       CONST stReserved = 3;
       CONST stThreatened = 4;
       CONST stInternalFrag = 5;
       CONST stFree = 6;
       TYPE Status = SHORTINT; (* stAllocated..stFree *)
       TYPE Region = POINTER TO RegionRec;
       TYPE RegionRec = RECORD (Disciplines.ObjectRec) END;
       (* assertions *)
       VAR overlappingRegions: Events.EventType;
       VAR addrNotOnPageBoundary: Events.EventType;
       VAR pagesizeSetTwice: Events.EventType;
       VAR undefinedPageSize: Events.EventType;
       CONST cannotAllocRegion = 0;
       CONST cannotExtendRegion = 1;
       CONST fixedRegion = 2;
       CONST reservedRegionsAreNotProtected = 3;
       CONST badParamsOfReservedRegion = 4;
       CONST errorcodes = 5;
       TYPE ErrorEvent = POINTER TO ErrorEventRec;
       TYPE ErrorEventRec =
          RECORD
             (Events.EventRec)
             errorcode: SHORTINT;
          END;
       VAR errormsg: ARRAY errorcodes OF Events.Message;
       VAR error: Events.EventType;

       PROCEDURE ReserveRegion(addr: Address; len: Size;
                               mode: AllocationMode;
                               VAR region: Region);
       PROCEDURE AllocateRegion(len: Size; mode: AllocationMode;
                                VAR addr: Address; VAR region: Region;
                                errors: RelatedEvents.Object) : BOOLEAN;
       PROCEDURE ExtendRegion(region: Region; newlen: Size;
                              errors: RelatedEvents.Object) : BOOLEAN;
       PROCEDURE ReleaseRegion(region: Region);
       PROCEDURE GetStatus(addr: Address; VAR status: Status; VAR region: Region);
       PROCEDURE SetPageSize(pagesize: Size);
       PROCEDURE GetPageSize() : Size;



Release 0.5        Last change: 6 December 1996                 1





Memory(3)              Ulm's Oberon System              Memory(3)


       PROCEDURE AlignSize(VAR size: Size);


DDEESSCCRRIIPPTTIIOONN
       _M_e_m_o_r_y  provides a general and machine-independent alloca­
       tion of memory regions.  The only dependency of the imple­
       mentation is the type _S_y_s_T_y_p_e_s_._A_d_d_r_e_s_s and its representa­
       tion.

       Usually there are many modules which accesses the  address
       space:  the compiler dependent procedures which are called
       by NNEEWW and on creation  of  coroutines,  system  dependent
       modules  which  need  space  for  shared  memory or mapped
       files.  _M_e_m_o_r_y is to be used by all these  procedures  and
       modules  to  assure  that  no part of the address space is
       accidently used twice and for achieving more fairness  for
       growing memory regions (e.g. for stacks of coroutines).

       Following allocation modes are supported:
       _f_i_x_e_d              The  size  of  the  region is fixed and
                          doesn't grow.
       _g_r_o_w_i_n_g_F_o_r_w_a_r_d     The memory  region  may  grow  forward,
                          i.e. from lower to higher addresses.
       _g_r_o_w_i_n_g_B_a_c_k_w_a_r_d    The  memory  region  may grow backward,
                          i.e. from higher to lower addresses.
       _r_e_d_z_o_n_e_P_r_o_t_e_c_t_e_d   At least one  memory  page  before  and
                          after  the  region is to be reserved in
                          addition to the returned region.
       Exactly one of the modes _f_i_x_e_d, _g_r_o_w_i_n_g_F_o_r_w_a_r_d  and  _g_r_o_w_­
       _i_n_g_B_a_c_k_w_a_r_d is to be given.  _r_e_d_z_o_n_e_P_r_o_t_e_c_t_e_d may be added
       optionally.

       Addresses and lengths must be  multiplies  of  the  system
       dependent  page size.  A length of 0 designates the entire
       address space.

       Initially,  _M_e_m_o_r_y  isn't  aware  of  preallocated  memory
       regions,  e.g.  for program text and the stack of the main
       coroutine.  These preallocated memory regions  are  to  be
       declared by use of _R_e_s_e_r_v_e_R_e_g_i_o_n in the early stage of the
       startup phase by some system dependent modules.  The  mem­
       ory  region  is specified by [[_a_d_d_r, _a_d_d_r++_l_e_n)) for fixed or
       forward growing regions and by [[_a_d_d_r--_l_e_n, _a_d_d_r)) for  back­
       ward  growing  regions.  An _a_d_d_r value of 00 represents the
       end of the address  space  in  case  of  backward  growing
       regions.

       _A_l_l_o_c_a_t_e_R_e_g_i_o_n  tries  to  allocate a memory region of the
       given length and the given allocation mode.   If  success­
       ful,  _A_l_l_o_c_a_t_e_R_e_g_i_o_n  returns a reference to the region in
       _r_e_g_i_o_n.  Further _a_d_d_r is  returned  which  designates  the
       beginning  of the region (_f_i_x_e_d and _g_r_o_w_i_n_g_F_o_r_w_a_r_d) or the
       end of the region (_g_r_o_w_i_n_g_B_a_c_k_w_a_r_d).




Release 0.5        Last change: 6 December 1996                 2





Memory(3)              Ulm's Oberon System              Memory(3)


       _E_x_t_e_n_d_R_e_g_i_o_n allows to extend growing regions by  specify­
       ing a new length which must not be smaller than the previ­
       ous length.  The  length  of  the  memory  region  remains
       unchanged in case of failures.

       _R_e_l_e_a_s_e_R_e_g_i_o_n allows to release a given region.

       _G_e_t_S_t_a_t_u_s  returns the allocation status and, if possible,
       the associated region of the page which is  designated  by
       _a_d_d_r.   _M_e_m_o_r_y  classifies  pages  according  to following
       characteristics:
       _s_t_A_l_l_o_c_a_t_e_d      The memory page belongs to  the  returned
                        region.
       _s_t_R_e_d_z_o_n_e        The memory page belongs to the redzone of
                        the returned region.
       _s_t_R_e_s_e_r_v_e_d       The area is reserved for a growing region
                        and cannot be allocated to other regions.
       _s_t_T_h_r_e_a_t_e_n_e_d     This area is threatened by  the  returned
                        growing  region  but  not yet reserved or
                        allocated.
       _s_t_I_n_t_e_r_n_a_l_F_r_a_g   The memory page cannot be  allocated  due
                        to  internal  fragmentation caused by the
                        returned fixed region.
       _s_t_F_r_e_e           The memory page is free.

       _S_e_t_P_a_g_e_S_i_z_e must be called during the startup  before  any
       of the other procedures gets called.

       _G_e_t_P_a_g_e_S_i_z_e returns the pagesize set previously and _A_l_i_g_n_­
       _S_i_z_e aligns the given size to the next page boundary.

DDIIAAGGNNOOSSTTIICCSS
       Errors lead to events or assertions which  are  passed  to
       _R_e_l_a_t_e_d_E_v_e_n_t_s  or  _A_s_s_e_r_t_i_o_n_s.   Following  assertions and
       error codes are implemented:
       _o_v_e_r_l_a_p_p_i_n_g_R_e_g_i_o_n_s               A memory region has  been
                                        given   to  _R_e_s_e_r_v_e_R_e_g_i_o_n
                                        which  overlaps  existing
                                        regions.
       _a_d_d_r_N_o_t_O_n_P_a_g_e_B_o_u_n_d_a_r_y            An  address or length has
                                        been given which is not a
                                        multiply   of   the  page
                                        size.
       _p_a_g_e_s_i_z_e_S_e_t_T_w_i_c_e                 _S_e_t_P_a_g_e_S_i_z_e  was   called
                                        twice.
       _u_n_d_e_f_i_n_e_d_P_a_g_e_S_i_z_e                One of the procedures was
                                        called  without  a  prior
                                        call of _S_e_t_P_a_g_e_S_i_z_e.
       _c_a_n_n_o_t_A_l_l_o_c_R_e_g_i_o_n                A  memory  region  of the
                                        given  length  cannot  be
                                        allocated.
       _c_a_n_n_o_t_E_x_t_e_n_d_R_e_g_i_o_n               The  given  memory region
                                        cannot be extended to the
                                        given length.



Release 0.5        Last change: 6 December 1996                 3





Memory(3)              Ulm's Oberon System              Memory(3)


       _f_i_x_e_d_R_e_g_i_o_n                      _E_x_t_e_n_d_R_e_g_i_o_n       cannot
                                        extend fixed regions.
       _r_e_s_e_r_v_e_d_R_e_g_i_o_n_s_A_r_e_N_o_t_P_r_o_t_e_c_t_e_d   Reserved  regions  cannot
                                        be redzone protected.
       _b_a_d_P_a_r_a_m_s_O_f_R_e_s_e_r_v_e_d_R_e_g_i_o_n        The  parameters  _a_d_d_r and
                                        _l_e_n  specify   a   memory
                                        region which does not fit
                                        into the address space.

SSEEEE AALLSSOO
       _A_s_s_e_r_t_i_o_n_s_(_3_) handling of assertions
       _R_e_l_a_t_e_d_E_v_e_n_t_s_(_3e_)rror handling
       _S_y_s_T_y_p_e_s_(_3_)   system dependent types

BBUUGGSS
       The current implementation needs dynamic  memory  for  its
       data  structure  and is free to call NNEEWW during any of its
       operations and its initialization.

       The implementation uses a modified buddy system allocator.
       This  results  in internal fragmentation for lengths which
       are not a power of 2.  Only _R_e_s_e_r_v_e_R_e_g_i_o_n is able to allo­
       cate the given length without internal fragmentation.


































Release 0.5        Last change: 6 December 1996                 4


