DNSHeaders(3)                 Ulm's Oberon System                DNSHeaders(3)



[1mNAME[0m
       DNSHeaders - DNS header structure according to RFC 1035

[1mSYNOPSIS[0m
       CONST headerlen = 12;
       TYPE Header = ARRAY headerlen OF CHAR;

       CONST minval = 0; maxval = 65535; (* of header ID and record counts *)

       CONST query = 0;
       CONST response = 1;
       TYPE QRValue = SHORTINT; (* query or response *)

       CONST standardQuery = 0;
       CONST inverseQuery = 1;
       CONST serverStatusRequest = 2;
       CONST update = 5; (* RFC 2136 *)
       TYPE OpCode = SHORTINT; (* standardQuery .. *)

       CONST noError = 0;
       CONST formatError = 1;
       CONST serverFailure = 2;
       CONST nameError = 3;
       CONST notImplemented = 4;
       CONST refused = 5;
       CONST yxDomain = 6; (* RFC 2136 *)
       CONST yxRrset = 7; (* RFC 2136 *)
       CONST notAuth = 8; (* RFC 2136 *)
       CONST notZone = 9; (* RFC 2136 *)
       TYPE ResponseCode = SHORTINT; (* noError .. *)

       PROCEDURE Init(VAR header: Header);

       PROCEDURE SetID(VAR header: Header; id: INTEGER);
       PROCEDURE GetID(header: Header) : INTEGER;

       PROCEDURE SetQR(VAR header: Header; qr: QRValue);
       PROCEDURE GetQR(header: Header) : QRValue;

       PROCEDURE SetOpCode(VAR header: Header; opcode: OpCode);
       PROCEDURE GetOpCode(header: Header) : OpCode;

       PROCEDURE SetAAFlag(VAR header: Header; aa: BOOLEAN);
       PROCEDURE GetAAFlag(header: Header) : BOOLEAN;

       PROCEDURE SetTCFlag(VAR header: Header; tc: BOOLEAN);
       PROCEDURE GetTCFlag(header: Header) : BOOLEAN;

       PROCEDURE SetRDFlag(VAR header: Header; rd: BOOLEAN);
       PROCEDURE GetRDFlag(header: Header) : BOOLEAN;

       PROCEDURE SetRAFlag(VAR header: Header; ra: BOOLEAN);
       PROCEDURE GetRAFlag(header: Header) : BOOLEAN;

       PROCEDURE SetResponseCode(VAR header: Header; rc: ResponseCode);
       PROCEDURE GetResponseCode(header: Header) : ResponseCode;

       PROCEDURE SetQDCount(VAR header: Header; qdcount: INTEGER);
       PROCEDURE GetQDCount(header: Header) : INTEGER;

       PROCEDURE SetANCount(VAR header: Header; ancount: INTEGER);
       PROCEDURE GetANCount(header: Header) : INTEGER;

       PROCEDURE SetNSCount(VAR header: Header; nscount: INTEGER);
       PROCEDURE GetNSCount(header: Header) : INTEGER;

       PROCEDURE SetARCount(VAR header: Header; arcount: INTEGER);
       PROCEDURE GetARCount(header: Header) : INTEGER;


[1mDESCRIPTION[0m
       [4mDNSHeaders[24m  supports  DNS header structures according to RFC 1035, sec-
       tion 4.1.1.  DNS headers are at the beginning of each  DNS  packet  and
       consist of [4mheaderlen[24m bytes.

       Headers  of  type  [4mHeader[24m  can  be  read or written directly from or to
       streams. However, to avoid  alignment  pitfalls,  [4mStreams.ReadPart[24m  and
       [4mStreams.WritePart[24m  with  an explicitly given length of [4mheaderlen[24m are to
       be used instead of [4mStreams.Read[24m and [4mStreams.Write[24m.

       [4mInit[24m initializes a header with default values (all zeroes).

       [4mSetID[24m and [4mGetID[24m set or retrieve a 16 bit identifier  that  is  used  to
       match responses to outstanding queries.

       [4mSetQR[24m  and [4mGetQR[24m set or retrieve a value of type [4mQRValue[24m that specifies
       the message type. Possible values are [4mquery[24m and [4mresponse[24m.

       [4mSetOpCode[24m and [4mGetOpCode[24m set or retrieve the opcode of a query (of  type
       [4mOpCode[24m).   Possible  values are [4mstandardQuery[24m, [4minverseQuery[24m, [4mserverSta-[0m
       [4mtusRequest[24m, and [4mupdate[24m (RFC 2136).

       [4mSetAAFlag[24m and [4mGetAAFlag[24m set or retrieve a flag that is set to [1mTRUE [22mif a
       response comes from an authoritative source.

       [4mSetTCFlag[24m  and  [4mGetTCFlag[24m  set  or retrieve a flag that tells whether a
       response packet was truncated or not.

       [4mSetRDFlag[24m and [4mGetRDFlag[24m set or retrieve a flag for query  packets  that
       is to be set to [1mTRUE [22mif recursion is desired.

       [4mSetRAFlag[24m  and  [4mGetRAFlag[24m  set  or retrieve a flag for response packets
       that tells whether recursive queries are supported or not.

       [4mSetResponseCode[24m and [4mGetResponseCode[24m set or retrieve the  response  code
       of  type  [4mResponseCode[24m.   Possible  values  are  [4mnoError[24m,  [4mformatError[24m,
       [4mserverFailure[24m, [4mnameError[24m, [4mnotImplemented[24m,  [4mrefused[24m,  and  the  response
       codes of extensions like that of RFC 2136.

       The number of records in various sections can be set or retrieved using
       following procedures:
       [4mSetQDCount,[24m [4mGetQDCount[24m   query records section
       [4mSetANCount,[24m [4mSetANCount[24m   answer records section
       [4mSetNSCount,[24m [4mGetNSCount[24m   authority records section
       [4mSetARCount,[24m [4mGetARCount[24m   additional records section

[1mSEE ALSO[0m
       [4mDNSRecords(3)[24m   construction and retrieval of DNS records.



Release 0.5               Last change: 10 March 2004             DNSHeaders(3)
