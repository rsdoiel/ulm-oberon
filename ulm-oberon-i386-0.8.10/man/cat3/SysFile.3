


SysFile(3)             Ulm's Oberon System             SysFile(3)


NNAAMMEE
       SysFile - system calls related to files

SSYYNNOOPPSSIISS
       CONST readAccess = {SysStat.oread};
       CONST writeAccess = {SysStat.owrite};
       CONST execAccess = {SysStat.oexec};
       CONST existence = {};
       TYPE AccessMode = SET;
       PROCEDURE Access(filename: ARRAY OF CHAR; amode: AccessMode;
                        errors: RelatedEvents.Object) : BOOLEAN;
       PROCEDURE EffectiveAccess(filename: ARRAY OF CHAR;
                                 amode: AccessMode;
                                 errors: RelatedEvents.Object) : BOOLEAN;

       PROCEDURE Link(filename1, filename2: ARRAY OF CHAR;
                      errors: RelatedEvents.Object) : BOOLEAN;
       PROCEDURE Unlink(filename: ARRAY OF CHAR;
                        errors: RelatedEvents.Object) : BOOLEAN;
       PROCEDURE Rename(filename1, filename2: ARRAY OF CHAR;
                        errors: RelatedEvents.Object) : BOOLEAN;

       PROCEDURE SymbolicLink(VAR filename1, filename2: ARRAY OF CHAR;
                              errors: RelatedEvents.Object) : BOOLEAN;
       PROCEDURE ReadLink(filename: ARRAY OF CHAR; VAR buf: ARRAY OF CHAR;
                          errors: RelatedEvents.Object) : BOOLEAN;

       PROCEDURE MakeDir(filename: ARRAY OF CHAR; mode: SET;
                         errors: RelatedEvents.Object) : BOOLEAN;
       PROCEDURE RemoveDir(filename: ARRAY OF CHAR;
                           errors: RelatedEvents.Object) : BOOLEAN;

       PROCEDURE SetFileCreationMask(mask: SET;
                                     errors: RelatedEvents.Object) : BOOLEAN;
       PROCEDURE GetFileCreationMask(VAR mask: SET;
                                     errors: RelatedEvents.Object) : BOOLEAN;


DDEESSCCRRIIPPTTIIOONN
       _S_y_s_F_i_l_e_s  interfaces  system  calls  which  are related to
       files.   Input-  and  output  operations  are  covered  by
       _S_y_s_I_O_(_3_).

       _A_c_c_e_s_s  is  mapped  to _a_c_c_e_s_s_(_2_) and checks _f_i_l_e_n_a_m_e to be
       accessible with mode _a_m_o_d_e for the real  user  id  of  the
       process.

       Typically, effective and real user id only differ for pro­
       cesses which have been started as  s-bit  commands  (s-bit
       stands  for  substitute  user  bit and is part of the file
       attributes).  In these cases the effective user id  equals
       the  owner  of  the  command  file and the real user id is
       inherited from the parent process.   While  in  all  other
       system  calls  accesses  are checked against the effective



Release 0.5       Last change: 11 December 2000                 1





SysFile(3)             Ulm's Oberon System             SysFile(3)


       user id, this system calls allows to  check  accessibility
       for the real user id of the parent process.

       _E_f_f_e_c_t_i_v_e_A_c_c_e_s_s  works like _A_c_c_e_s_s but checks the accessi­
       bility for the calling process by considering  the  effec­
       tive user id.

       _L_i_n_k  creates  a new directory entry named _f_i_l_e_n_a_m_e_2 which
       points to the file referenced  by  _f_i_l_e_n_a_m_e_1.   Both  file
       references  must  belong  to the same file system.  _U_n_l_i_n_k
       removes the directory  entry  named  _f_i_l_e_n_a_m_e.   The  disc
       space allocated by the referenced file is reclaimed by the
       operating system if _f_i_l_e_n_a_m_e was the last reference to the
       referenced  file.   _R_e_n_a_m_e works for files and directories
       where both pathnames reside on the same file system. A new
       link  named  _f_i_l_e_n_a_m_e_2  is  created and the old link named
       _f_i_l_e_n_a_m_e_1 is removed, just like a combination of _L_i_n_k  and
       _U_n_l_i_n_k that, however, would not work for directories.

       _S_y_m_b_o_l_i_c_L_i_n_k  creates  a new symbolic link named _f_i_l_e_n_a_m_e_2
       that points to _f_i_l_e_n_a_m_e_1 which is not  required  to  exist
       and  may  point  to other file systems. Chains of symbolic
       links are permitted up to a system-dependent maximum level
       of  indirection.  _R_e_a_d_L_i_n_k allows to read out the pathname
       a symbolic link points to.

       _M_a_k_e_D_i_r creates a new directory with mode _m_o_d_e  (see  _S_y_s_­
       _S_t_a_t_(_3_))  that  is  matched  against the umask.  _R_e_m_o_v_e_D_i_r
       allows to remove empty directories.

       _S_e_t_F_i_l_e_C_r_e_a_t_i_o_n_M_a_s_k and  _G_e_t_F_i_l_e_C_r_e_a_t_i_o_n_M_a_s_k  set/get  the
       umask  of the current process. The complement of the umask
       is ANDed against the  protection  mode  of  newly  created
       files  or  directories  to  yield the effective protection
       mode. The umask is inherited to child processes.

DDIIAAGGNNOOSSTTIICCSS
       System call failures lead to events of _S_y_s_E_r_r_o_r_s_(_3_).   The
       _e_r_r_o_r_s parameter is passed to _S_y_s_E_r_r_o_r_s_._R_a_i_s_e.  All proce­
       dures return FFAALLSSEE in error case.  Access test failures of
       _A_c_c_e_s_s  and _E_f_f_e_c_t_i_v_e_A_c_c_e_s_s are interpreted as system call
       failures.

SSEEEE AALLSSOO
       _a_c_c_e_s_s_(_2_)      _A_c_c_e_s_s, _E_f_f_e_c_t_i_v_e_A_c_c_e_s_s
       _l_i_n_k_(_2_)        _L_i_n_k
       _m_k_d_i_r_(_2_)       _M_a_k_e_D_i_r
       _r_e_a_d_l_i_n_k_(_2_)    _R_e_a_d_L_i_n_k
       _r_e_n_a_m_e_(_2_)      _R_e_n_a_m_e
       _r_m_d_i_r_(_2_)       _R_e_m_o_v_e_D_i_r
       _s_t_a_t_(_2_)        _E_f_f_e_c_t_i_v_e_A_c_c_e_s_s
       _s_y_m_l_i_n_k_(_2_)     _S_y_m_b_o_l_i_c_L_i_n_k
       _u_m_a_s_k_(_2_)       _S_e_t_F_i_l_e_C_r_e_a_t_i_o_n_M_a_s_k, _G_e_t_F_i_l_e_C_r_e_a_t_i_o_n_M_a_s_k




Release 0.5       Last change: 11 December 2000                 2





SysFile(3)             Ulm's Oberon System             SysFile(3)


       _u_n_l_i_n_k_(_2_)      _U_n_l_i_n_k
       _S_y_s_E_r_r_o_r_s_(_3_)   handling of failed system calls
       _S_y_s_I_O_(_3_)       opening, accessing and closing a file
       _S_y_s_S_t_a_t_(_3_)     retrieval of file attributes





















































Release 0.5       Last change: 11 December 2000                 3


