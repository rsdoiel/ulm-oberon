Math(3)                       Ulm's Oberon System                      Math(3)



[1mNAME[0m
       Math - mathematical constants and functions

[1mSYNOPSIS[0m
       CONST e = 2.7182818284590452354;
       CONST log2e = 1.4426950408889634074;
       CONST log10e = 0.43429448190325182765;
       CONST ln2 = 0.69314718055994530942;
       CONST ln10 = 2.30258509299404568402;
       CONST pi = 3.14159265358979323846;
       CONST pidiv2 = 1.57079632679489661923;
       CONST pidiv4 = 0.78539816339744830962;
       CONST onedivpi = 0.31830988618379067154;
       CONST twodivpi = 0.63661977236758134308;
       CONST twodivsqrtpi = 1.12837916709551257390;
       CONST sqrt2 = 1.41421356237309504880;
       CONST sqrt1div2 = 0.70710678118654752440;

       CONST domain = 0;
       CONST sing = 1;
       CONST overflow = 2;
       CONST underflow = 3;
       CONST errorcodes = 4;
       TYPE ErrorCode = SHORTINT; (* domain..underflow *)
       TYPE ErrorEvent = POINTER TO ErrorEventRec;
       TYPE ErrorEventRec =
          RECORD
             (Events.EventRec)
             errorcode: ErrorCode;
          END;
       VAR errormsg: ARRAY errorcodes OF Events.Message;
       VAR error: Events.EventType;

       PROCEDURE Sin(x: REAL) : REAL;
       PROCEDURE Cos(x: REAL) : REAL;
       PROCEDURE Tan(x: REAL) : REAL;
       PROCEDURE Arctan(x: REAL) : REAL;
       PROCEDURE Arctan2(y, x: REAL) : REAL;
       PROCEDURE Ln(x: REAL) : REAL;
       PROCEDURE Exp(x: REAL) : REAL;
       PROCEDURE Sqrt(x: REAL) : REAL;

       PROCEDURE SinE(x: REAL; errors: RelatedEvents.Object) : REAL;
       PROCEDURE CosE(x: REAL; errors: RelatedEvents.Object) : REAL;
       PROCEDURE TanE(x: REAL; errors: RelatedEvents.Object) : REAL;
       PROCEDURE ArctanE(x: REAL; errors: RelatedEvents.Object) : REAL;
       PROCEDURE Arctan2E(y, x: REAL; errors: RelatedEvents.Object) : REAL;
       PROCEDURE LnE(x: REAL; errors: RelatedEvents.Object) : REAL;
       PROCEDURE ExpE(x: REAL; errors: RelatedEvents.Object) : REAL;
       PROCEDURE SqrtE(x: REAL; errors: RelatedEvents.Object) : REAL;

       PROCEDURE SinL(x: LONGREAL) : LONGREAL;
       PROCEDURE CosL(x: LONGREAL) : LONGREAL;
       PROCEDURE TanL(x: LONGREAL) : LONGREAL;
       PROCEDURE ArctanL(x: LONGREAL) : LONGREAL;
       PROCEDURE Arctan2L(y, x: LONGREAL) : LONGREAL;
       PROCEDURE LnL(x: LONGREAL) : LONGREAL;
       PROCEDURE ExpL(x: LONGREAL) : LONGREAL;
       PROCEDURE SqrtL(x: LONGREAL) : LONGREAL;

       PROCEDURE SinLE(x: LONGREAL; errors: RelatedEvents.Object) : LONGREAL;
       PROCEDURE CosLE(x: LONGREAL; errors: RelatedEvents.Object) : LONGREAL;
       PROCEDURE TanLE(x: LONGREAL; errors: RelatedEvents.Object) : LONGREAL;
       PROCEDURE ArctanLE(x: LONGREAL; errors: RelatedEvents.Object) : LONGREAL;
       PROCEDURE Arctan2LE(y, x: LONGREAL; errors: RelatedEvents.Object) : LONGREAL;
       PROCEDURE LnLE(x: LONGREAL; errors: RelatedEvents.Object) : LONGREAL;
       PROCEDURE ExpLE(x: LONGREAL; errors: RelatedEvents.Object) : LONGREAL;
       PROCEDURE SqrtLE(x: LONGREAL; errors: RelatedEvents.Object) : LONGREAL;


[1mDESCRIPTION[0m
       [4mMath[24m  offers  commonly  used mathematical constants and functions.  All
       functions are offered in four variants: for [1mREAL [22mand [1mLONGREAL [22mand  with
       or without an [4merrors[24m parameter.

[1mDIAGNOSTICS[0m
       Errors lead to events which are related to the [4merrors[24m parameter, or, if
       not given, directly to [4mEvents.Raise[24m.   Because  these  events  are  not
       ignored  by  default,  this could cause program termination if [4merror[24m is
       not ignored or there doesn't exist a handler for it.

       Following error codes are implemented:
       [4mdomain[24m      The argument [4mx[24m of the function  is  outside  of  the  valid
                   domain.
       [4msing[24m        Argument singularity, usually division by zero.
       [4moverflow[24m    Overflow  range  exception, i.e. the result is too large to
                   be representable.
       [4munderflow[24m   Underflow range exception.

       The current implementation defines an event handler for  [4mSysSignals.FPE[0m
       to  catch  floating point exceptions.  For this to work, the event han-
       dler for [4mSysSignals.FPE[24m must not be removed.  The event handler of [4mMath[0m
       ignores exceptions caused by other modules.

[1mSEE ALSO[0m
       [4mIEEE(3)[24m            support of IEEE floating point format
       [4mRelatedEvents(3)[24m   error handling
       [4mSysSignals(3)[24m      floating point exception

[1mCREDITS[0m
       The  implementation  of  this  module  has  been derived from the GNU C
       Library which, in turn, has been partially derived from sources of  the
       University of California.



Release 0.5               Last change: 9 August 2006                   Math(3)
