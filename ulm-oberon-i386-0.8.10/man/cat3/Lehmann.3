


Lehmann(3)             Ulm's Oberon System             Lehmann(3)


NNAAMMEE
       Lehmann  - implementation of the Lehmann primality testing
       algorithm

SSYYNNOOPPSSIISS
       VAR test: Primes.Test;


DDEESSCCRRIIPPTTIIOONN
       _L_e_h_m_a_n_n offers the implementation of the primality testing
       algorithm  developed by D. J.  Lehmann. Look at SIAM Jour­
       nal on Computing, v. 11, n. 2, May 1982, pp.  374-375:  D.
       J.  Lehmann,  _O_n  _P_r_i_m_a_l_i_t_y _T_e_s_t_s as a reference. The test
       wrongly declares a none-prime a prime in 1/2 of the cases.
       The tests are independent and consequently _n tests declare
       a none-prime a prime in 1/2_n of the cases.

       During its initialization, _L_e_h_m_a_n_n creates an interface of
       the type defined in _P_r_i_m_e_s_(_3_) and assigns it to _t_e_s_t.

       _L_e_h_m_a_n_n must have the possibility to create random numbers
       of the type specified by the given  value  to  be  tested.
       Consequently,  a module importing _L_e_h_m_a_n_n must also import
       a service provider for the generation of random numbers of
       the specified type (see, for example, _R_a_n_d_C_a_r_d_1_0_2_4_s_(_3_)).

AAUUTTHHOORR
       Frank B.J. Fischer

SSEEEE AALLSSOO
       _P_r_i_m_e_s_(_3_)           general   abstraction   for  primality
                           testing algorithms
       _Q_u_i_c_k_P_r_i_m_e_T_e_s_t_(_3_)   a quick test for small primes
       _R_a_b_i_n_M_i_l_l_e_r_(_3_)      implementation  of  the   Rabin-Miller
                           primality testing algorithm
       _P_r_i_m_e_G_e_n_(_3_)         implementation  of a prime number gen­
                           erator




















Release 0.5         Last change: 3 April 1997                   1


