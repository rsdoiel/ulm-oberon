


Conditions(3)          Ulm's Oberon System          Conditions(3)


NNAAMMEE
       Conditions - general interface for wait conditions

SSYYNNOOPPSSIISS
       TYPE Domain = POINTER TO DomainRec;
       TYPE DomainRec = RECORD (Disciplines.ObjectRec) END;
       TYPE Condition = POINTER TO ConditionRec;
       TYPE ConditionRec = RECORD (Disciplines.ObjectRec) END;
       TYPE ConditionSet = POINTER TO ConditionSetRec;
       TYPE ConditionSetRec = RECORD (Objects.ObjectRec) END;
       CONST select = 0; timelimit = 1; async = 2; timecond = 3; preconditions = 4;
       TYPE CapabilitySet = SET; (* OF [select..preconditions] *)
       TYPE SelectProc = PROCEDURE (domain: Domain; conditionSet: ConditionSet;
                                    time: Times.Time;
                                    VAR setOfTrueConditions: ConditionSet;
                                    errors: RelatedEvents.Object;
                                    retry: BOOLEAN;
                                    VAR interrupted: BOOLEAN) : BOOLEAN;
       TYPE TestProc = PROCEDURE (domain: Domain; condition: Condition;
                                  errors: RelatedEvents.Object) : BOOLEAN;
       TYPE SendEventProc = PROCEDURE (domain: Domain; condition: Condition;
                                       event: Events.Event;
                                       errors: RelatedEvents.Object) : BOOLEAN;
       TYPE GetTimeProc = PROCEDURE (domain: Domain; conditionSet: ConditionSet;
                                     VAR nextTime: Times.Time;
                                     VAR nextCond: Condition;
                                     errors: RelatedEvents.Object);
       TYPE PreConditionsProc = PROCEDURE (domain: Domain; condition: Condition;
                                           VAR preconds: ConditionSet;
                                           errors: RelatedEvents.Object) : BOOLEAN;
       TYPE Interface = POINTER TO InterfaceRec;
       TYPE InterfaceRec =
          RECORD
             (Objects.ObjectRec)
             test: TestProc;
             select: SelectProc;
             sendevent: SendEventProc;
             gettime: GetHintProc;
             preconditions: PreConditionsProc;
          END;
       TYPE Description = POINTER TO DescriptionRec;
       TYPE DescriptionRec =
          RECORD
             (Objects.ObjectRec)
             caps: CapabilitySet;
             internal: BOOLEAN;
          END;
       TYPE GetTimeOfNextTryProc = PROCEDURE (iteration: INTEGER;
                                              VAR time: Times.Time);

       PROCEDURE InitDomain(domain: Domain; if: Interface; desc: Description);
       PROCEDURE Init(condition: Condition; domain: Domain);
       PROCEDURE WaitFor(conditionSet: ConditionSet;
                         VAR setOfTrueConditions: ConditionSet;



Release 0.5       Last change: 13 September 1996                1





Conditions(3)          Ulm's Oberon System          Conditions(3)


                         errors: RelatedEvents.Object);
       PROCEDURE Test(condition: Condition; errors: RelatedEvents.Object) : BOOLEAN;
       PROCEDURE CreateSet(VAR conditionSet: ConditionSet);
       PROCEDURE Incl(conditionSet: ConditionSet; condition: Condition);
       PROCEDURE Excl(conditionSet: ConditionSet; condition: Condition);
       PROCEDURE Union(result: ConditionSet; set: ConditionSet);
       PROCEDURE Union3(VAR result: ConditionSet; set1, set2: ConditionSet);
       PROCEDURE In(conditionSet: ConditionSet; condition: Condition) : BOOLEAN;
       PROCEDURE Card(conditionSet: ConditionSet) : INTEGER;
       PROCEDURE ExamineConditions(conditionSet: ConditionSet);
       PROCEDURE GetNextCondition(conditionSet: ConditionSet;
                                  VAR condition: Condition) : BOOLEAN;
       PROCEDURE SetGetTimeOfNextTryProc(p: GetTimeOfNextTryProc);


DDEESSCCRRIIPPTTIIOONN
       A  condition  is  a boolean-valued function (with possible
       side effects) which allows to wait until it becomes  TTRRUUEE.
       _C_o_n_d_i_t_i_o_n_s provides a general interface for conditions and
       a waiting algorithm which blocks the current process until
       at least one condition of a set becomes TTRRUUEE.

       There  exist a couple of condition variants with differing
       semantics in dependence of the different kinds  of  events
       they  allow  to wait for.  These differences do not affect
       _C_o_n_d_i_t_i_o_n_s itself but result in different uses.  The  most
       important variants are:
       _l_o_c_a_l _e_v_e_n_t_s            have  only  two parties: one which
                               causes the event to happen and one
                               which  is interested in the event.
                               Example: _S_t_r_e_a_m_C_o_n_d_i_t_i_o_n_s_(_3_).
       _g_r_o_u_p _e_v_e_n_t_s            are of interest  for  a  group  of
                               parties.   Each  of  these parties
                               registers its interest which lasts
                               until  it  is  explicitly unregis­
                               tered.   Each  receipt  of   these
                               group events must be acknowledged.
                               Example: _E_v_e_n_t_C_o_n_d_i_t_i_o_n_s_(_3_).
       _g_l_o_b_a_l _e_v_e_n_t_s           are described by conditions  which
                               have  no  more than one transition
                               from FFAALLSSEE to TTRRUUEE.  These  condi­
                               tions  may  be  checked for by any
                               number of  parties  at  any  time.
                               Example: _T_i_m_e_C_o_n_d_i_t_i_o_n_s_(_3_).
       _c_o_n_c_u_r_r_e_n_t _c_o_n_d_i_t_i_o_n_s   are  conditions  where only a lim­
                               ited number  of  them  may  become
                               TTRRUUEE at the same time.  These con­
                               ditions  obviously  have  a   side
                               effect   when  they  are  created.
                               Example: _S_e_m_a_p_h_o_r_e_s_(_3_).

       Note that conditions are always created and used  locally,
       i.e. even for non-local events each party creates and uses
       its own condition.  Conditions related to group events and



Release 0.5       Last change: 13 September 1996                2





Conditions(3)          Ulm's Oberon System          Conditions(3)


       concurrent  conditions  need  some  special treatment when
       they become TTRRUUEE.  Conditions which are related  to  local
       or group events may be recycled.

       Note  that _C_o_n_d_i_t_i_o_n_s is independent from the kind of con­
       currency used.  The synchronization  of  concurrent  units
       which  share  the same address space is done by other mod­
       ules (e.g. _T_a_s_k_s_(_3_)).  _C_o_n_d_i_t_i_o_n_s itself  allows  only  to
       block _a_l_l concurrent units of an address space.  Neverthe­
       less, conditions of _C_o_n_d_i_t_i_o_n_s may be used  for  the  syn­
       chronization  with  other  processes  (concurrent units of
       other address spaces) _a_n_d with  concurrent  units  of  the
       same address space.  For this to work, _C_o_n_d_i_t_i_o_n_s requires
       the memory model to follow the semantics  of  total  store
       ordering,  i.e. memory operations are visible for all con­
       current units of the same address space in  the  order  of
       execution.

       Conditions  which  are  of  the  same  type (and generally
       defined by one module) belong to one domain.  An interface
       is associated with a domain and some of the interface pro­
       cedures are able to cope with a set  of  conditions  which
       all belong to the same domain.

       Interfaces are expected to meet following specifications:
       _t_e_s_t:   PPRROOCCEEDDUURREE(_d_o_m_a_i_n:  _D_o_m_a_i_n;  _c_o_n_d_i_t_i_o_n:  _C_o_n_d_i_t_i_o_n;
            _e_r_r_o_r_s: _R_e_l_a_t_e_d_E_v_e_n_t_s_._O_b_j_e_c_t) : BBOOOOLLEEAANN;
            Test the condition and return the result.  This  pro­
            cedure must not block the current process.  Note that
            TTRRUUEE is to be returned even in case of errors because
            FFAALLSSEE  is  only  to  be returned if it makes sense to
            wait for _c_o_n_d_i_t_i_o_n to become TTRRUUEE.
       _s_e_l_e_c_t: PPRROOCCEEDDUURREE(_d_o_m_a_i_n: _D_o_m_a_i_n; _c_o_n_d_i_t_i_o_n_S_e_t: _C_o_n_d_i_t_i_o_n_­
            _S_e_t;  _t_i_m_e: _T_i_m_e_s_._T_i_m_e; VVAARR _s_e_t_O_f_T_r_u_e_C_o_n_d_i_t_i_o_n_s: _C_o_n_­
            _d_i_t_i_o_n_S_e_t;   _e_r_r_o_r_s:   _R_e_l_a_t_e_d_E_v_e_n_t_s_._O_b_j_e_c_t;   _r_e_t_r_y:
            BBOOOOLLEEAANN; VVAARR _i_n_t_e_r_r_u_p_t_e_d: BBOOOOLLEEAANN) : BBOOOOLLEEAANN;
            Wait  for  one  of  the conditions in _c_o_n_d_i_t_i_o_n_S_e_t to
            become TTRRUUEE.  _t_i_m_e may be NNIILL or given as absolute or
            relative  time  limit.   The  time limit is to inter­
            preted in the sense of the system  clock  _C_l_o_c_k_s_._s_y_s_­
            _t_e_m.   _t_i_m_e is guaranteed to be equal to NNIILL if _t_i_m_e_­
            _l_i_m_i_t is not in the set of capabilities.  If success­
            ful,  _s_e_l_e_c_t  should  _s_e_t_O_f_T_r_u_e_C_o_n_d_i_t_i_o_n_s  set to the
            subset of _c_o_n_d_i_t_i_o_n_S_e_t which contains the  conditions
            which evaluates to TTRRUUEE.  _s_e_l_e_c_t must return FFAALLSSEE if
            the time limit  exceeds  and  all  conditions  remain
            FFAALLSSEE.  In case of other errors (e.g. one of the con­
            ditions is no longer valid) TTRRUUEE is to  be  returned.
            In the latter case an error event should be passed to
            _R_e_l_a_t_e_d_E_v_e_n_t_s which is related to _e_r_r_o_r_s.  This  pro­
            cedure needs only to be provided if _s_e_l_e_c_t belongs to
            the set of capabilities.  It  is  important  to  note
            that  _s_e_l_e_c_t is expected to return immediately if one
            of the conditions become TTRRUUEE (even if the time limit



Release 0.5       Last change: 13 September 1996                3





Conditions(3)          Ulm's Oberon System          Conditions(3)


            is  not  yet  exceeded).   Implementations  which are
            unable to assure this must not include  _t_i_m_e_l_i_m_i_t  in
            their capability set.
            Additionally,  implementations  are  expected  to  be
            interruptible (by external events) if _r_e_t_r_y is FFAALLSSEE.
            Otherwise,  if  _r_e_t_r_y  is TTRRUUEE, _s_e_l_e_c_t is expected to
            retry  the  operation  on  interrupts.    _i_n_t_e_r_r_u_p_t_e_d
            should be set to TTRRUUEE if interrupts occurred.
       _s_e_n_d_e_v_e_n_t: PPRROOCCEEDDUURREE(_d_o_m_a_i_n: _D_o_m_a_i_n; _c_o_n_d_i_t_i_o_n: _C_o_n_d_i_t_i_o_n;
            _e_v_e_n_t: _E_v_e_n_t_s_._E_v_e_n_t; _e_r_r_o_r_s: _R_e_l_a_t_e_d_E_v_e_n_t_s_._O_b_j_e_c_t)  :
            BBOOOOLLEEAANN;
            Raise   the  given  event  immediately  if  _c_o_n_d_i_t_i_o_n
            becomes TTRRUUEE or is  no  longer  valid.   In  case  of
            external  conditions  (i.e.  _d_e_s_c_._i_n_t_e_r_n_a_l  is FFAALLSSEE)
            this notification must be asynchronously,  i.e.  _P_r_o_­
            _c_e_s_s_._P_a_u_s_e has to return.  FFAALLSSEE is to be returned if
            _c_o_n_d_i_t_i_o_n already evaluates to TTRRUUEE (in this case  an
            event  doesn't  need  to be raised).  _s_e_n_d_e_v_e_n_t needs
            only to be implemented if _a_s_y_n_c  is  in  the  set  of
            capabilities.   Note  that  this  capability  is very
            important for a good performance of the waiting algo­
            rithm.
       _g_e_t_t_i_m_e:  PPRROOCCEEDDUURREE(_d_o_m_a_i_n:  _D_o_m_a_i_n;  _c_o_n_d_i_t_i_o_n_S_e_t: _C_o_n_d_i_­
            _t_i_o_n_S_e_t; VVAARR _n_e_x_t_T_i_m_e: _T_i_m_e_s_._T_i_m_e; VVAARR _n_e_x_t_C_o_n_d: _C_o_n_­
            _d_i_t_i_o_n; _e_r_r_o_r_s: _R_e_l_a_t_e_d_E_v_e_n_t_s_._O_b_j_e_c_t);
            Return  a relative time measure which gives the delay
            time until the first condition  (to  be  returned  in
            _n_e_x_t_C_o_n_d)  of _c_o_n_d_i_t_i_o_n_S_e_t becomes TTRRUUEE.  This proce­
            dure is only to be provided if _t_i_m_e_c_o_n_d is in the set
            of capabilities.
       _p_r_e_c_o_n_d_i_t_i_o_n_s: PPRROOCCEEDDUURREE(_d_o_m_a_i_n: _D_o_m_a_i_n; _c_o_n_d_i_t_i_o_n: _C_o_n_d_i_­
            _t_i_o_n; VVAARR _p_r_e_c_o_n_d_s: _C_o_n_d_i_t_i_o_n_S_e_t;  _e_r_r_o_r_s:  _R_e_l_a_t_e_d_E_­
            _v_e_n_t_s_._O_b_j_e_c_t) : BBOOOOLLEEAANN;
            Allows  the implementation to specify a set of condi­
            tions where at least one of them needs to become TTRRUUEE
            before _c_o_n_d_i_t_i_o_n evaluates to TTRRUUEE.  If _p_r_e_c_o_n_d_i_t_i_o_n_s
            returns TTRRUUEE and at least one condition in  _p_r_e_c_o_n_d_s,
            _p_r_e_c_o_n_d_i_t_i_o_n_s  is called again when one of the condi­
            tions of _p_r_e_c_o_n_d_s becomes TTRRUUEE.  On  repeated  calls,
            _p_r_e_c_o_n_d_i_t_i_o_n_s  is  free to return different condition
            sets.  This  procedure  must  not  return  conditions
            which  are already TTRRUUEE.  _p_r_e_c_o_n_d_i_t_i_o_n_s needs only to
            be implemented if _p_r_e_c_o_n_d_i_t_i_o_n_s is given in  the  set
            of  capabilities.  FFAALLSSEE is to be returned when there
            are no remaining preconditions.

       _I_n_i_t_D_o_m_a_i_n initializes a new domain and associates it with
       the  interface  _i_f  and  the  given description _d_e_s_c.  The
       description consists of the capability set and a  boolean-
       valued  component  _i_n_t_e_r_n_a_l which states whether the value
       of conditions of the given domain may change  during  pro­
       cess  suspension  (i.e.  call of _P_r_o_c_e_s_s_._P_a_u_s_e).  Internal
       conditions are able change only if the program is  running
       while  external  conditions may be effected by the outside



Release 0.5       Last change: 13 September 1996                4





Conditions(3)          Ulm's Oberon System          Conditions(3)


       world.  _I_n_i_t initializes a condition and  connects  it  to
       the given domain.

       _W_a_i_t_F_o_r  blocks  the current process until at least one of
       the conditions becomes TTRRUUEE and returns the  set  of  true
       conditions in _c_o_n_d_i_t_i_o_n_S_e_t.  Note that usually _T_a_s_k_s_._W_a_i_t_­
       _F_o_r is called which blocks the current task only.

       The algorithm of _W_a_i_t_F_o_r may degenerate in some cases to a
       busy  loop, i.e. the conditions are repeatedly tested.  To
       reduce the consumed CPU time in such a case,  the  process
       is  suspended  for some time in each iteration of the busy
       loop.  The delay time of this loop for the _n-th retry  may
       be  determined  by  an  interface procedure which is to be
       passed to _S_e_t_G_e_t_T_i_m_e_O_f_N_e_x_t_T_r_y_P_r_o_c.  Initially, this inter­
       face  procedure  is  provided  by _C_o_n_d_i_t_i_o_n_s itself with a
       reasonable variant which returns longer  delay  times  for
       increasing _n.  Busy loops may be caused by external condi­
       tions which do not support the capabilities _a_s_y_n_c or _t_i_m_e_­
       _l_i_m_i_t.

       _T_e_s_t returns TTRRUUEE if _c_o_n_d_i_t_i_o_n evaluates to TTRRUUEE.

       _C_r_e_a_t_e_S_e_t  creates  and initializes a condition set to the
       empty set.  _I_n_c_l includes _c_o_n_d_i_t_i_o_n to _c_o_n_d_i_t_i_o_n_S_e_t.  _E_x_c_l
       excludes  _c_o_n_d_i_t_i_o_n  from  _c_o_n_d_i_t_i_o_n_S_e_t.   _U_n_i_o_n stores in
       _r_e_s_u_l_t the union of _r_e_s_u_l_t and  _s_e_t.   _U_n_i_o_n_3  returns  in
       _r_e_s_u_l_t  the  union  of  _s_e_t_1 and _s_e_t_2.  _I_n returns TTRRUUEE if
       _c_o_n_d_i_t_i_o_n is a member of _c_o_n_d_i_t_i_o_n_S_e_t.  _C_a_r_d  returns  the
       cardinality of _c_o_n_d_i_t_i_o_n_S_e_t.

       _E_x_a_m_i_n_e_C_o_n_d_i_t_i_o_n_s starts a traverse through all conditions
       of _c_o_n_d_i_t_i_o_n_S_e_t.  _G_e_t_N_e_x_t_C_o_n_d_i_t_i_o_n, if successful,  stores
       one  of  the conditions of _c_o_n_d_i_t_i_o_n_S_e_t into _c_o_n_d_i_t_i_o_n and
       returns FFAALLSSEE if there are no more conditions.

DDIIAAGGNNOOSSTTIICCSS
       Some errors lead to failed assertions:

       ·      The _s_e_l_e_c_t interface procedure  must  return  FFAALLSSEE
              (if  the time limit is exceeded) or a non-empty set
              of true conditions.  If _t_i_m_e_l_i_m_i_t is not  supported
              or  if  the  _t_i_m_e is NNIILL, _s_e_l_e_c_t is only allowed to
              return FFAALLSSEE if _r_e_t_r_y is  FFAALLSSEE  and  an  interrupt
              occurred.

       ·      A  non-empty  set  of  conditions must be passed to
              _W_a_i_t_F_o_r.

       ·      _W_a_i_t_F_o_r detects a deadlock if  all  conditions  are
              internal and none of them evaluates to TTRRUUEE.

       ·      _W_a_i_t_F_o_r  must not be called if the priority is that
              high that asynchronous events cannot be  delivered.



Release 0.5       Last change: 13 September 1996                5





Conditions(3)          Ulm's Oberon System          Conditions(3)


       ·      The  interface  procedure  which  returns the delay
              time for the next iteration of the busy  loop  must
              not return a zero-valued delay.

       _C_o_n_d_i_t_i_o_n_s  does  not generate any error events itself but
       forwards the events generated by the interface  procedures
       to the _e_r_r_o_r_s parameters.

SSEEEE AALLSSOO
       _C_l_o_c_k_s_(_3_)          definition of the system clock
       _P_r_o_c_e_s_s_(_3_)         exports  _P_r_o_c_e_s_s_._P_a_u_s_e  which allows to
                          suspend the current process
       _R_e_l_a_t_e_d_E_v_e_n_t_s_(_3_)   error handling
       _T_a_s_k_s_(_3_)           general task management
       _T_i_m_e_s_(_3_)           time measures










































Release 0.5       Last change: 13 September 1996                6


