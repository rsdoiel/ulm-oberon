


FTPServers(3)          Ulm's Oberon System          FTPServers(3)


NNAAMMEE
       FTPServers - framework for the inner core of a FTP server

SSYYNNOOPPSSIISS
       TYPE Message = POINTER TO MessageRec;
       TYPE MessageRec =
             RECORD
                (Messages.MessageRec)
                request: FTPRequests.Request;
                response: FTPResponses.Response;
                markEventType: Events.EventType;
             END;

       TYPE Server = POINTER TO ServerRec;
       TYPE ServerRec =
             RECORD
                (Services.ObjectRec)
                authorized: BOOLEAN;
                finished: BOOLEAN;
             END;

       PROCEDURE Create(VAR server: Server);
       PROCEDURE ProcessRequest(server: Server;
                                request: FTPRequests.Request;
                                markEventType: Events.EventType;
                                VAR response: FTPResponses.Response);


DDEESSCCRRIIPPTTIIOONN
       _F_T_P_S_e_r_v_e_r_s  provides  a  framework for the inner core of a
       FTP server that processes FTP requests without  access  to
       the network connection.

       During  the initialization phase of a FTP server for a new
       network connection,

       ·      a new server object is to be created using _C_r_e_a_t_e,

       ·      an arbitrary number  of  message  handlers  may  be
              installed for it using _M_e_s_s_a_g_e_s_(_3_), and

       ·      the initial state is to be set, if necessary.

       State   is   maintained  by  various  handlers  that  were
       installed by _M_e_s_s_a_g_e_s_._I_n_s_t_a_l_l_H_a_n_d_l_e_r  on  base  of  disci­
       plines, and some public server components:
       _a_u_t_h_o_r_i_z_e_d   indicates whether FTP commands beyond _F_T_P_C_o_m_­
                    _m_a_n_d_s_._u_s_e_r,  _F_T_P_C_o_m_m_a_n_d_s_._p_a_s_s,  and   _F_T_P_C_o_m_­
                    _m_a_n_d_s_._a_c_c_t  are  to  be  accepted  (initially
                    FFAALLSSEE).
       _f_i_n_i_s_h_e_d     is  initially  FFAALLSSEE,  and  set  to  TTRRUUEE  on
                    encountering the _F_T_P_C_o_m_m_a_n_d_s_._q_u_i_t command.

       _P_r_o_c_e_s_s_R_e_q_u_e_s_t checks whether _r_e_q_u_e_s_t is acceptable at the



Release 0.5         Last change: 23 April 2001                  1





FTPServers(3)          Ulm's Oberon System          FTPServers(3)


       current state (in  dependence  of  _a_u_t_h_o_r_i_z_e_d),  processes
       some  simple  commands  itself,  and  converts  all  other
       requests into messages (of type _M_e_s_s_a_g_e) and sends them to
       _s_e_r_v_e_r,   using  _M_e_s_s_a_g_e_s_._S_e_n_d.   Following  commands  are
       implemented by _P_r_o_c_e_s_s_R_e_q_u_e_s_t:
       _F_T_P_Cs_oe_mt_ms_a_nt_dh_se_._qp_uu_ib_tlic component _f_i_n_i_s_h_e_d to TTRRUUEE, and returns
          a 221 return code.
       _F_T_P_Ci_os_m_ma_an_ns_dw_se_.r_ne_od_o_pby a 200 return code.
       Attempts  to  re-authorize when _a_u_t_h_o_r_i_z_e_d is already TTRRUUEE
       are answered with a response code  of  230.  All  commands
       beyond  authorization  commands  are  rejected with 530 as
       long _a_u_t_h_o_r_i_z_e_d remains FFAALLSSEE.

       If, after processing of _M_e_s_s_a_g_e_s_._S_e_n_d, the _r_e_s_p_o_n_s_e  field
       of  the  message  remains  NNIILL, an error code is returned:
       either 450 (as indication for temporary failures) if error
       events were found, or 502 (as indication for an unknown or
       unsupported command).

       Some commands of the FTP protocol request some  intermedi­
       ate responses, called marks, on the command channel as the
       transfer on the separate channel begins or ends. Marks are
       to   be   delivered  by  raising  events  of  type  _F_T_P_R_e_­
       _s_p_o_n_s_e_s_._E_v_e_n_t using _m_a_r_k_E_v_e_n_t_T_y_p_e as event type.

SSEEEE AALLSSOO
       _F_T_P_R_e_q_u_e_s_t_s_(_3_)    persistent  object  type  for   incoming
                         requests.
       _F_T_P_R_e_s_p_o_n_s_e_s_(_3_)   persistent   object  type  for  outgoing
                         responses.
       _M_e_s_s_a_g_e_s_(_3_)       general  abstraction  for  message  han­
                         dlers.

























Release 0.5         Last change: 23 April 2001                  2


