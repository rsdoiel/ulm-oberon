


Scan(3)                Ulm's Oberon System                Scan(3)


NNAAMMEE
       Scan - formatted input from streams

SSYYNNOOPPSSIISS
       PROCEDURE F(fmt: ARRAY OF CHAR);
       PROCEDURE F1(fmt: ARRAY OF CHAR; VAR p1: ARRAY OF BYTE);
       PROCEDURE F2(fmt: ARRAY OF CHAR; VAR p1, p2: ARRAY OF BYTE);
       PROCEDURE F3(fmt: ARRAY OF CHAR; VAR p1, p2, p3: ARRAY OF BYTE);
       PROCEDURE F4(fmt: ARRAY OF CHAR; VAR p1, p2, p3, p4: ARRAY OF BYTE);
       PROCEDURE F5(fmt: ARRAY OF CHAR; VAR p1, p2, p3, p4, p5: ARRAY OF BYTE);
       PROCEDURE F6(fmt: ARRAY OF CHAR; VAR p1, p2, p3, p4, p5, p6: ARRAY OF BYTE);
       PROCEDURE F7(fmt: ARRAY OF CHAR;
                    VAR p1, p2, p3, p4, p5, p6, p7: ARRAY OF BYTE);
       PROCEDURE F8(fmt: ARRAY OF CHAR;
                    VAR p1, p2, p3, p4, p5, p6, p7, p8: ARRAY OF BYTE);
       PROCEDURE F9(fmt: ARRAY OF CHAR;
                    VAR p1, p2, p3, p4, p5, p6, p7, p8, p9: ARRAY OF BYTE);

       PROCEDURE S(in: Streams.Stream; fmt: ARRAY OF CHAR);
       PROCEDURE S1(in: Streams.Stream; fmt: ARRAY OF CHAR; VAR p1: ARRAY OF BYTE);
       PROCEDURE S2(in: Streams.Stream; fmt: ARRAY OF CHAR; VAR p1, p2: ARRAY OF BYTE);
       PROCEDURE S3(in: Streams.Stream; fmt: ARRAY OF CHAR;
                 VAR p1, p2, p3: ARRAY OF BYTE);
       PROCEDURE S4(in: Streams.Stream; fmt: ARRAY OF CHAR;
                    VAR p1, p2, p3, p4: ARRAY OF BYTE);
       PROCEDURE S5(in: Streams.Stream; fmt: ARRAY OF CHAR;
                    VAR p1, p2, p3, p4, p5: ARRAY OF BYTE);
       PROCEDURE S6(in: Streams.Stream; fmt: ARRAY OF CHAR;
                    VAR p1, p2, p3, p4, p5, p6: ARRAY OF BYTE);
       PROCEDURE S7(in: Streams.Stream; fmt: ARRAY OF CHAR;
                    VAR p1, p2, p3, p4, p5, p6, p7: ARRAY OF BYTE);
       PROCEDURE S8(in: Streams.Stream; fmt: ARRAY OF CHAR;
                    VAR p1, p2, p3, p4, p5, p6, p7, p8: ARRAY OF BYTE);
       PROCEDURE S9(in: Streams.Stream; fmt: ARRAY OF CHAR;
                    VAR p1, p2, p3, p4, p5, p6, p7, p8, p9: ARRAY OF BYTE);


DDEESSCCRRIIPPTTIIOONN
       _S_c_a_n  offers  formatted  reading  in  _s_c_a_n_f_(_3_)  style from
       _S_t_r_e_a_m_s_._s_t_d_i_n (_F through _F_9) or from _i_n  (_S  through  _S_9).
       The  procedures  scan  input  in  dependence of the format
       string _f_m_t and put read items into parameters  _p_1  through
       _p_9.   The  number  of  parameters  determine the procedure
       name.

       The format string _f_m_t is interpreted as follows: Any char­
       acter  not belonging to an escape sequence introduced by \\
       or a format element introduced by %% must  match  the  next
       input  character.   _S_c_a_n skips the next input character on
       success and aborts processing otherwise.  A blank  charac­
       ter in the format string matches a possibly empty sequence
       of white space  characters  in  _S_t_r_e_a_m_s_._s_t_d_i_n  resp.   _i_n.
       White space is given by _S_t_r_e_a_m_D_i_s_c_i_p_l_i_n_e_s.




Release 0.5       Last change: 18 November 1991                 1





Scan(3)                Ulm's Oberon System                Scan(3)


       Escape sequences encode one character which must match the
       next input  character.   Following  escape  sequences  are
       understood:

       \[0-9A-F]+
              character in hex representation.

       \b     backspace character (08X).

       \e     escape character (1BX).

       \f     form feed (0CX).

       \n     new line (as defined by _S_t_r_e_a_m_D_i_s_c_i_p_l_i_n_e_s).

       \q     single quote ("'").

       \Q     quote character (_A_S_C_I_I_._q_u_o_t_e).

       \r     carriage return (0DX).

       \t     horizontal tab (09X).

       \&     audible bell (07X).

       It  is  important to note that in despite to _s_c_a_n_f_(_3_) "\n"
       and "\t" does not lead to white space skipping.   Instead,
       they match a new line resp. a tab character.

       Format elements must conform to following syntax:

       FormatElement = "%" [Flags] [Width] Conversion .
       Flags = "*" .
       Width = { DecDigits } .
       DecDigits = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" .
       Conversion = "c" | "d" | "e" | "f" | "g" | "o" | "s" | "x" | ScanSet .
       ScanSet = "[" CharSet "]" .
       CharSet = Complement | Set .
       Complement = "^" Set .
       Set = [ "]" ] { Range | AnyChar } .
       Range = AnyChar "-" AnyChar .

       Conversions  of  integer  and  real numbers accept leading
       white space.  A positive width  (default:  0)  limits  the
       number of characters read (after skipping white space).

       All  format  elements  assigns  the  read item to the next
       parameter (_p_1 through _p_9).  Assignment can  be  suppressed
       by use of the "*" flag.

       Following conversions are supported:

       c      read next character.




Release 0.5       Last change: 18 November 1991                 2





Scan(3)                Ulm's Oberon System                Scan(3)


       d      read integer in decimal notation.

       e,f,g  read  real  number  in  Oberon syntax.  "e" and "d"
              instead of "E" and "D" are accepted.

       o      read integer in octal notation.

       s      read  string.  Leading  white  space  is   skipped.
              String scanning is stopped on the first white space
              character or if the given parameter is filled.  0X-
              termination is guaranteed.

       x      read integer in hexadecimal notation.

       [...]  read  sequence  of  characters  according  to given
              character set.  String scanning is stopped  on  the
              first  character  which  is not member of the given
              character set, or if the given parameter is filled.
              0X-termination is guaranteed.

       Termination characters are put back to the input stream if
       possible.

DDIIAAGGNNOOSSTTIICCSS
       If the input does not match the given format  string  _S_c_a_n
       stops  scanning and returns immediately.  _S_c_a_n returns the
       number  of  stored  items  in  _S_t_r_e_a_m_s_._s_t_d_i_n_._c_o_u_n_t   resp.
       _i_n_._c_o_u_n_t.

SSEEEE AALLSSOO
       _R_e_a_d_(_3_)                alternative routines for formatted input
       _S_t_r_e_a_m_D_i_s_c_i_p_l_i_n_e_s_(_3_)   definition of white space and line terminator
       _S_t_r_e_a_m_s_(_3_)             stream operations

BBUUGGSS
       The  current version does not raise events for some common
       errors, e.g. if the number of parameters and  format  ele­
       ments does not match.

       _S_t_r_e_a_m_s  does  not  support  _S_t_r_e_a_m_s_._B_a_c_k  for  unbuffered
       streams.  Thus termination characters are lost by  reading
       from streams with buffering mode _S_t_r_e_a_m_s_._n_o_b_u_f.















Release 0.5       Last change: 18 November 1991                 3


