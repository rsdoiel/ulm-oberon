


User Commands                                           obload(1)



NAME
     obload - load Oberon object from CDB

SYNOPSIS
     obload [-a _a_u_t_h] [-A _a_r_c_h] {-b _b_a_s_e_d_i_r} [-i  _i_n_t_e_n_s_i_t_y]  [-l
     _l_o_g_l_e_v_e_l]  [-m]  [-o  _o_u_t_p_u_t]  [-O  _p_a_t_t_e_r_n] [-c|-C] [-D|-M]
     {modname}

DESCRIPTION
     _o_b_l_o_a_d generates (if non-existing or out-of-date) and  loads
     (if  requested)  a  persistent object of the Oberon compiler
     for all  given  modules  (_m_o_d_n_a_m_e)  whose  sources  must  be
     present in the compiler database (CDB, see _o_b_c_i(_1)).

     Objects generated by the  compiler  are  persistent  objects
     representing  abstract  syntax  trees  (either architecture-
     independent  or  architecture-dependent),  or   ready-to-run
     machine   code.    Both,  definitions  and  modules  may  be
     translated into abstract syntax trees.

     _o_b_l_o_a_d works recursively in a manner comparable to  _m_a_k_e(_1).
     If  the  target  is  missing or out-of-date regarding to the
     most recent sources found in CDB, _o_b_l_o_a_d  tries  to  rebuild
     it.  If  one  of the abstract trees representing the defini-
     tions for the modules imported  by  _m_o_d_n_a_m_e  is  missing  or
     out-of-date, it will be regenerated like the primary target.

     Note that compilation options have to be passed  to  _o_b_c_i(_1)
     because different sources may require different options.

     Following options are supported:

     -a _a_u_t_h specifies a file containing a persistent  object  of
             type  _S_h_a_r_d_s._L_i_d  that  is to be used for authoriza-
             tion.

     -A _a_r_c_h load an object for the architecture _a_r_c_h.  Architec-
             tures are to be specified in a syntax as required by
             _A_r_c_h_i_t_e_c_t_u_r_e_s(_3).

     -b _b_a_s_e_d_i_r
             defines the base path  of  the  compiler  data  base
             (CDB).  Default  is  /_p_u_b/_c_d_b/_o_b_e_r_o_n.  Note that any
             number of base paths may  be  given.  Multiple  base
             paths are combined through _T_r_a_n_s_l_u_c_e_n_t_N_a_m_e_s(_3), i.e.
             results are written into the  last  base  path,  and
             base  paths specified later on the command line take
             precedence over those given earlier.

     -c      store all generated objects into  CDB.  By  default,
             architecture-independent  abstract  syntax  trees of
             modules will not be stored. Note  that  the  use  of



Release 0.5Last change: Last change: 20 September 2004          1






User Commands                                           obload(1)



             this  option  can  be  more time-consuming since re-
             generation of objects can be in  some  cases  faster
             than loading persistent objects from CDB.

     -C      do not store anything into CDB.

     -D      load an object containing an  abstract  syntax  tree
             for  the  definition  (public  interface) of _m_o_d_n_a_m_e
             (default).

     -i _i_n_t_e_n_s_i_t_y
             allows   to   set   the    intensity    level    for
             _S_t_o_r_a_g_e._I_n_t_e_n_s_i_t_y  (see  _S_t_o_r_a_g_e(_3)). This allows to
             fine-tune the balance of memory usage vs CPU time by
             the garbage collection. By default, the intensity is
             8. Lower intensity values reduce  memory  usage  but
             cause  CPU overhead by more frequent garbage collec-
             tions.  Higher intensity values cause more memory to
             be used while saving more CPU time. Please note how-
             ever, that the address space can also be a  signifi-
             cant limit, i.e. at high intensity values it is pos-
             sible  that  no  more  address  space  is  found  by
             _M_e_m_o_r_y(_3).

     -l _l_o_g_l_e_v_e_l
             requests log information as generated via  _C_o_m_p_i_l_e_r_-
             _L_o_g_s(_3)  to  be  displayed. This is mainly useful to
             follow the recursive  process  of  building.  A  log
             level of 0 (default) suppresses any logs. Larger log
             levels cause more output to generated.

     -m      asks to setup  performance  monitoring  by  _S_y_s_M_o_n_i_-
             _t_o_r(_3).  Statistics are printed to standard output.

     -M      load   an   object   containing   an   architecture-
             independent  abstract  syntax tree, or, if an archi-
             tecture was specified, ready-to-run machine code  of
             _m_o_d_n_a_m_e.

     -o _o_u_t_p_u_t
             asks the generated persistent object  to  be  stored
             into _o_u_t_p_u_t.

     -O _p_a_t_t_e_r_n
             asks the requested results and their transitive clo-
             sure  to be stored in multiple files whose names are
             generated from _p_a_t_t_e_r_n. All characters  within  _p_a_t_-
             _t_e_r_n  are taken literally with the exception of two-
             character sequences starting with ``%'':

             %a      insert the string representing the architec-
                     ture.   ``gen''   is   generated  if  it  is



Release 0.5Last change: Last change: 20 September 2004          2






User Commands                                           obload(1)



                     architecture-independent.

             %c      insert the string representing the architec-
                     ture  class.  ``gen''  is generated if it is
                     architecture-independent.

             %m      insert the module name.

             %t      insert the type,  i.e.  ``def''  for  public
                     interfaces,  and  ``mod'' for private imple-
                     mentations.

             %%      insert a single ``%''.

DIAGNOSTICS
     All error messages generated by the compiler  are  hopefully
     self-explanatory.  Please  do not expect error messages from
     _m_o_d_n_a_m_e only but the transitive closure of imported  modules
     as  they  have possibly not been compiled yet. The layout of
     error messages is different (and easier to read) if it  goes
     directly  to a tty if a standout mode is supported. See _C_o_m_-
     _p_i_l_e_r_E_r_r_o_r_s(_3),  _L_i_s_t_e_r_s(_3),  and   _T_e_r_m_i_n_a_l_L_i_s_t_e_r_s(_3)   for
     details.

SEE ALSO
     _o_b_c_i(_1)              check in of Oberon sources into CDB
     _A_r_c_h_i_t_e_c_t_u_r_e_s(_3)     specification of target architectures
     _C_o_m_p_i_l_e_r_E_r_r_o_r_s(_3)    events generated by the compiler
     _C_o_m_p_i_l_e_r_L_o_g_s(_3)      generation of log messages for  compil-
                          ing and loading
     _C_o_m_p_i_l_e_r_O_b_j_e_c_t_s(_3)   general form of persistent objects gen-
                          erated by the compiler
     _O_b_e_r_o_n_S_y_m_b_o_l_s(_3)     architecture-independent abstract  syn-
                          tax trees for Oberon
     _L_i_s_t_e_r_s(_3)           general interface for lists of compiler
                          error messages
     _T_e_r_m_i_n_a_l_L_i_s_t_e_r_s(_3)   implementation of _L_i_s_t_e_r_s(_3) using _T_e_r_-
                          _m_i_n_a_l_s(_3)

EXAMPLE
     Following commands check in Oberon sources into the CDB  and
     try to load them:

     oberon$ A=/var/cdbd/db/write
     oberon$ obci -a $A Hello.o[dm]
     oberon$ obload -a $A -A SPARC -M -o Hello.obj Hello

     This command line, however, does not load the modules  _H_e_l_l_o
     depends on. This is possible through the ``-O'' option:

     oberon$ obload -a $A -A SPARC -M -O %m.obj Hello




Release 0.5Last change: Last change: 20 September 2004          3






User Commands                                           obload(1)



     This transitive closure, however, omits those modules  which
     are  nowhere  explicitly  imported but still required by the
     runtime system.  This module list can be retrieved using the
     ``-r'' option of _g_e_n_o_b_r_t_s(_1):

     oberon$ rtmodules=`$BINDIR/genobrts -r`
     oberon$ obload -a $A -A SPARC -M -O %m.obj Hello $rtmodules


FILES
     /_v_a_r/_c_d_b_d/_d_b/_w_r_i_t_e   default location of authorization  file
                          (necessary for write access of CDB).











































Release 0.5Last change: Last change: 20 September 2004          4



